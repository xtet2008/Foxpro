* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
*  文件名: MAIN.PRG(主文件) <-- 本文件由 UnFoxAll 创建
* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


SET SAFETY OFF
SET EXCLUSIVE OFF
SET TALK OFF

PROCEDURE ReadIniFile
	PARAMETER LPFILENAME , LPAPPLICATIONNAME , LPKEYNAME
	IF EMPTY(LPFILENAME)
		RETURN ''
	ENDIF
	DECLARE INTEGER GetPrivateProfileString IN Win32API AS GetPrivStr STRING , STRING ,  ;
		STRING , STRING @ , INTEGER , STRING
	LOCAL LPRETURNEDSTRING , NSIZE , LCSTRING
	LPRETURNEDSTRING = SPACE(200)
	NSIZE = 200
	= GETPRIVSTR(LPAPPLICATIONNAME,LPKEYNAME,'',@LPRETURNEDSTRING,NSIZE,LPFILENAME)
	LCSTRING = KILLPRIVNULLCHAR(ALLTRIM(LPRETURNEDSTRING))
	RETURN LCSTRING
ENDPROC
*------
PROCEDURE WriteIniFile
	PARAMETER LPFILENAME , LPAPPLICATIONNAME , LPKEYNAME , LPKEYVALUE
	IF EMPTY(LPFILENAME) .OR. EMPTY(LPAPPLICATIONNAME) .OR. EMPTY(LPKEYVALUE)
		RETURN .F.
	ENDIF
	LOCAL NRETURNVALUE
	DECLARE INTEGER WritePrivateProfileString IN Win32API AS WritePrivStr STRING , STRING ,  ;
		STRING , STRING
	NRETURNVALUE = WRITEPRIVSTR(LPAPPLICATIONNAME,LPKEYNAME,LPKEYVALUE,LPFILENAME)
	IF NRETURNVALUE = 0
		RETURN .F.
	ELSE
		RETURN .T.
	ENDIF
ENDPROC
*------
PROCEDURE KillPrivNullChar
	LPARAMETER SPSW
	LOCAL LNLENGTH , LCSTRING
	LNLENGTH = LEN(SPSW)
	LCSTRING = STRTRAN(SPSW,CHR(0),'')
	RETURN LCSTRING
ENDPROC
*------
PROCEDURE paulREPMEMOX
	LPARAMETER VERROR , PLMEMO , PLREP , PLWITH
	LOCAL VPAUL , VCOUNTER , VPLREPL , VPLVAR , VPAULOK
	IF EMPTY(ALLTRIM(PLMEMO))
		RETURN ''
	ENDIF
	VERROR = 'OK'
	ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
	VCOUNTER = AT(UPPER(PLREP),UPPER(PLMEMO))
	VPAUL = ''
	IF VCOUNTER > 0
		STORE MEMLINES(PLMEMO) TO GNNUMLINES
		FOR VCOUNT = 1 TO GNNUMLINES
			VPAULLINEDESC = MLINE(PLMEMO,VCOUNT)
			IF AT(UPPER(PLREP),UPPER(VPAULLINEDESC)) > 0
				VPAUL =  ;
					VPAUL + IIF( .NOT. EMPTY(VPAUL),CHR(13),'') +  ;
					STUFF(VPAULLINEDESC,AT(UPPER(PLREP),UPPER(VPAULLINEDESC)),LEN(PLREP),PLWITH)
			ELSE
				VPAUL = VPAUL + IIF( .NOT. EMPTY(VPAUL),CHR(13),'') + VPAULLINEDESC
			ENDIF
		ENDFOR
	ELSE
		VPAUL = PLMEMO
	ENDIF
	RETURN VPAUL
ENDPROC
*------
PROCEDURE itseparates
	LPARAMETER ID_NAME , VVALUE1 , VVALUE2 , VVALUE3 , VVALUE4 , VVALUE5 , VVALUE6 , VVALUE7
	VERROR = 'OK'
	ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
	VVALUE1 = ''
	VVALUE2 = ''
	VVALUE3 = ''
	VVALUE4 = ''
	VVALUE5 = ''
	VVALUE6 = ''
	VVALUE7 = ''
	GCSTRING = CHRTRANC(ID_NAME,':,;\/(){}[]<>-=_|~!@#$%^&*|?' + CHR(34),SPACE(29))
	GCSTRING = CHRTRANC(GCSTRING,'+',' ')
	GCSTRING = STRTRAN(GCSTRING,'      ',' ')
	GCSTRING = STRTRAN(GCSTRING,'     ',' ')
	GCSTRING = STRTRAN(GCSTRING,'    ',' ')
	GCSTRING = STRTRAN(GCSTRING,'   ',' ')
	GCSTRING = STRTRAN(GCSTRING,'  ',' ')
	IF OCCURS(' ',GCSTRING) = 0
		VVALUE1 = GCSTRING
		VVALUE( 1 ) = VVALUE1
		RETURN VERROR
	ENDIF
	IF OCCURS(' ',GCSTRING) > 0
		I = 1
		VLAST = 0
		VOC = OCCURS(' ',GCSTRING)
		FOR I = 0 TO VOC
			VVAR = 'Vvalue' + ALLTRIM(STR(I + 1))
			IF I = 0
				VSTAR = 1
				VLAST = AT(' ',GCSTRING)
			ELSE
				VSTAR = AT(' ',GCSTRING,I)
				VLAST = AT(' ',GCSTRING,I + 1)
			ENDIF
			IF I = VOC .OR. I >= 6
				&vvar.= alltrim(substr(gcstring,vstar,50))
				EXIT
			ENDIF
			&vvar.= alltrim(substr(gcstring,vstar, vlast-vstar+1))
		ENDFOR
	ENDIF
	VVALUE( 1 ) = VVALUE1
	VVALUE( 2 ) = VVALUE2
	VVALUE( 3 ) = VVALUE3
	VVALUE( 4 ) = VVALUE4
	VVALUE( 5 ) = VVALUE5
	VVALUE( 6 ) = VVALUE6
	VVALUE( 7 ) = VVALUE7
	RETURN VERROR
ENDPROC
*------
PROCEDURE ITGENRANDLIST
	LPARAMETER VINPUT , VOUTPUT , VERROR
	IF VARTYPE(VINPUT) = 'C'
		VINPUT = VAL(ALLTRIM(VINPUT))
	ENDIF
	IF VARTYPE(VOUTPUT) = 'C'
		VOUTPUT = VAL(ALLTRIM(VOUTPUT))
	ENDIF
	IF VINPUT = 0 .OR. VOUTPUT = 0
		VERROR = 'FAIL - INPUT/OUTPUT CAN NOT BE 0'
		RETURN ',1,'
	ENDIF
	IF VOUTPUT > VINPUT
		VOUTPUT = VINPUT
	ENDIF
	IF VINPUT = 1
		RETURN ',1,'
	ENDIF
	VCOUNTER = 1
	VRANDLIST = ','
	VSELECTCOUNT = 0
	SET DECIMALS TO 6
	DO WHILE VCOUNTER <= VINPUT
		VDECIMALALUE = RAND() * SECONDS()
		VDECIMALALUE = VDECIMALALUE - INT(VDECIMALALUE)
		VRANDVALUE = INT(VDECIMALALUE * VINPUT + 0.3)
		IF VRANDVALUE >= 1 AND AT(ALLTRIM(STR(VRANDVALUE)) + ',',VRANDLIST) = 0
			VSELECTCOUNT = VSELECTCOUNT + 1
			VRANDLIST = VRANDLIST + ALLTRIM(STR(VRANDVALUE)) + ','
			VCOUNTER = VCOUNTER + 1
		ENDIF
		IF VSELECTCOUNT = VOUTPUT
			EXIT
		ENDIF
	ENDDO
	RETURN VRANDLIST
ENDPROC
*------
PROCEDURE ITCOLOR
	LPARAMETER VCOLOR , PLMEMO , VREP1 , VREP2 , VREP3 , VREP4 , VREP5 , VREP6 , VREP7
	LOCAL VPAUL , VCOUNTER , VPLREPL , VPLVAR , VPAULOK
	IF EMPTY(ALLTRIM(PLMEMO))
		RETURN ''
	ENDIF
	VERROR = 'OK'
	ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
	IF EMPTY(VCOLOR)
		VCOLOR = '#FF0000'
	ENDIF
	VBEGIN = "<font color='" + VCOLOR + "'>"
	VEND = '</font>'
	VLENG = LEN(PLMEMO)
	VPAUL = ''
	FOR VCOUNT = 0 TO VLENG
		VCOMPARISON = RIGHT(PLMEMO,VLENG - VCOUNT)
		VCHAR = SUBSTR(PLMEMO,VCOUNT,1)
		VOK = .F.
		IF  .NOT. VOK AND  .NOT. EMPTY(VREP1) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP1))
			VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP1))) + VEND
			VCOUNT = VCOUNT + LEN(ALLTRIM(VREP1))
			VOK = .T.
		ENDIF
		IF  .NOT. VOK AND  .NOT. EMPTY(VREP2) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP2))
			VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP2))) + VEND
			VCOUNT = VCOUNT + LEN(ALLTRIM(VREP2))
			VOK = .T.
		ENDIF
		IF  .NOT. VOK AND  .NOT. EMPTY(VREP3) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP3))
			VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP3))) + VEND
			VCOUNT = VCOUNT + LEN(ALLTRIM(VREP3))
			VOK = .T.
		ENDIF
		IF  .NOT. VOK AND  .NOT. EMPTY(VREP4) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP4))
			VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP4))) + VEND
			VCOUNT = VCOUNT + LEN(ALLTRIM(VREP4))
			VOK = .T.
		ENDIF
		IF  .NOT. VOK AND  .NOT. EMPTY(VREP5) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP5))
			VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP5))) + VEND
			VCOUNT = VCOUNT + LEN(ALLTRIM(VREP5))
			VOK = .T.
		ENDIF
		IF  .NOT. VOK AND  .NOT. EMPTY(VREP6) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP6))
			VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP6))) + VEND
			VCOUNT = VCOUNT + LEN(ALLTRIM(VREP6))
			VOK = .T.
		ENDIF
		IF  .NOT. VOK AND  .NOT. EMPTY(VREP7) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP7))
			VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP7))) + VEND
			VCOUNT = VCOUNT + LEN(ALLTRIM(VREP7))
			VOK = .T.
		ENDIF
		IF  .NOT. VOK
			VPAUL = VPAUL + VCHAR
		ENDIF
	ENDFOR
	RETURN VPAUL
ENDPROC
*------
PROCEDURE ITRC
	LPARAMETER VSTRING , VKEY1 , VREP1 , VKEY2 , VREP2 , VKEY3 , VREP3 , VKEY4 , VREP4 , VKEY5 ,  ;
		VREP5 , VKEY6 , VREP6 , VKEY7 , VREP7
	IF EMPTY(VSTRING)
		RETURN ''
	ENDIF
	VERROR = 'OK'
	ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
	IF  .NOT. EMPTY(VKEY1)
		IF EMPTY(VREP1)
			VREP1 = "<font color='#FF0000'><b>" + VKEY1 + '</b></font>'
		ENDIF
		VSTRING = PAULREPMEMOX(VERROR,VSTRING,VKEY1,VREP1)
	ENDIF
	IF  .NOT. EMPTY(VKEY2)
		IF EMPTY(VREP2)
			VREP2 = "<font color='#FF0000'><b>" + VKEY2 + '</b></font>'
		ENDIF
		VSTRING = PAULREPMEMOX(VERROR,VSTRING,VKEY2,VREP2)
	ENDIF
	IF  .NOT. EMPTY(VKEY3)
		IF EMPTY(VREP3)
			VREP3 = "<font color='#FF0000'><b>" + VKEY3 + '</b></font>'
		ENDIF
		VSTRING = PAULREPMEMOX(VERROR,VSTRING,VKEY3,VREP3)
	ENDIF
	IF  .NOT. EMPTY(VKEY4)
		IF EMPTY(VREP4)
			VREP4 = "<font color='#FF0000'><b>" + VKEY4 + '</b></font>'
		ENDIF
		VSTRING = PAULREPMEMOX(VERROR,VSTRING,VKEY4,VREP4)
	ENDIF
	IF  .NOT. EMPTY(VKEY5)
		IF EMPTY(VREP5)
			VREP5 = "<font color='#FF0000'><b>" + VKEY5 + '</b></font>'
		ENDIF
		VSTRING = PAULREPMEMOX(VERROR,VSTRING,VKEY5,VREP5)
	ENDIF
	IF  .NOT. EMPTY(VKEY6)
		IF EMPTY(VREP6)
			VREP6 = "<font color='#FF0000'><b>" + VKEY6 + '</b></font>'
		ENDIF
		VSTRING = PAULREPMEMOX(VERROR,VSTRING,VKEY6,VREP6)
	ENDIF
	IF  .NOT. EMPTY(VKEY7)
		IF EMPTY(VREP7)
			VREP7 = "<font color='#FF0000'><b>" + VKEY7 + '</b></font>'
		ENDIF
		VSTRING = PAULREPMEMOX(VERROR,VSTRING,VKEY7,VREP7)
	ENDIF
	RETURN VSTRING
ENDPROC
*------
PROCEDURE paulADDMEMO
	LPARAMETER PLMEMO , PLID_VALUE , PLTYPE , PLSUBITEM
	LOCAL VPAUL , VCOUNTER , VPLREPL , VPLVAR , VPAULOK
	VPAUL = PLMEMO
	VPAULOK = PLMEMO
	VCOUNTER = AT('[<',VPAUL)
	VLOOPNO = 1
	IF VCOUNTER > 0
		DO WHILE VLOOPNO <= OCCURS('[<',VPAUL)
			VPLVAR =  ;
				SUBSTR(VPAUL,AT('[<',VPAUL,VLOOPNO) + 2,AT('>]',VPAUL,VLOOPNO) - AT('[<',VPAUL,VLOOPNO) - 2)
			VPLREPL =  ;
				SUBSTR(VPAUL,AT('[<',VPAUL,VLOOPNO),AT('>]',VPAUL,VLOOPNO) - AT('[<',VPAUL,VLOOPNO) + 2)
			APPEND_YN = .F.
			IF EMPTY(VPLVAR)
				VPAULOK = STRTRAN(VPAULOK,VPLREPL,'')
			ELSE
				vpaulok=STRTRAN(vpaulok,vplrepl,&vplvar.)
			ENDIF
			VLOOPNO = VLOOPNO + 1
		ENDDO
	ENDIF
	RETURN VPAULOK
ENDPROC
*------
PROCEDURE itsqlfieldconvert
	LPARAMETER SET_SYSPATH , VDATATYPE , VDBF , VFIELD , VVALUE , VCHARTYPE
	SYSWORKAREA = SELECT()
	VUSEDDBF = ALLTRIM(SET_SYSPATH) + 'sysflds'
	VFIELD_TYPE = ''
	IF AT('.',VUSEDDBF) = 0
		IF FILE(VUSEDDBF + '.wsd')
			VUSEDDBF = VUSEDDBF + '.wsd'
		ELSE
			VUSEDDBF = VUSEDDBF + '.dbf'
		ENDIF
	ENDIF
	IF FILE(VUSEDDBF)
		IF  .NOT. USED('itsqlsysflds')
			use &vuseddbf. alias itsqlsysflds order table_name in 0 again
		ENDIF
		SELECT ITSQLSYSFLDS
		GO TOP
		SEEK UPPER(SUBSTR(VDBF + SPACE(10),1,10) + 'FIELD     ' + VFIELD)
		IF FOUND()
			VFIELD_TYPE = ALLTRIM(ITSQLSYSFLDS.FIELD_TYPE)
		ELSE
			IF  .NOT. EMPTY(VCHARTYPE)
				VFIELD_TYPE = VCHARTYPE
			ENDIF
		ENDIF
	ELSE
		IF  .NOT. EMPTY(VCHARTYPE)
			VFIELD_TYPE = VCHARTYPE
		ENDIF
	ENDIF
	SELECT (SYSWORKAREA)
	IF SUBSTR(VFIELD_TYPE,1,1) = 'C' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'M' .OR.  ;
			EMPTY(VFIELD_TYPE)
		RETURN PAULADDMEMO(VVALUE)
	ENDIF
	IF SUBSTR(VFIELD_TYPE,1,1) = 'D'
		IF AT('[<',VVALUE) > 0 AND AT('>]',VVALUE) > 0
			VVALUE = STRTRAN(STRTRAN(VVALUE,'[<'),'>]')
			RETURN &VVALUE.
		ENDIF
		IF VARTYPE(VVALUE) = 'D'
			RETURN VVALUE
		ELSE
			RETURN CTOD(VVALUE)
		ENDIF
	ENDIF
	IF SUBSTR(VFIELD_TYPE,1,1) = 'N' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'I' .OR.  ;
			SUBSTR(VFIELD_TYPE,1,1) = 'F' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'Y'
		IF VARTYPE(VVALUE) = 'N' .OR. VARTYPE(VVALUE) = 'Y'
			RETURN VVALUE
		ELSE
			RETURN VAL(STRTRAN(VVALUE,',',''))
		ENDIF
	ENDIF
	IF SUBSTR(VFIELD_TYPE,1,1) = 'T'
		IF AT('[<',VVALUE) > 0 AND AT('>]',VVALUE) > 0
			VVALUE = STRTRAN(STRTRAN(VVALUE,'[<'),'>]')
			RETURN &VVALUE.
		ENDIF
		IF VARTYPE(VVALUE) = 'T'
			RETURN VVALUE
		ELSE
			RETURN CTOT(VVALUE)
		ENDIF
	ENDIF
	IF SUBSTR(VFIELD_TYPE,1,1) = 'L'
		IF VARTYPE(VVALUE) = 'L'
			RETURN VVALUE
		ELSE
			IF UPPER(VVALUE) = 'TRUE' .OR. UPPER(VVALUE) = '.T.' .OR. UPPER(VVALUE) = 'T' .OR.  ;
					UPPER(VVALUE) = '1'
				RETURN .T.
			ENDIF
			IF UPPER(VVALUE) = 'FALSE' .OR. UPPER(VVALUE) = '.F.' .OR. UPPER(VVALUE) = 'F' .OR.  ;
					UPPER(VVALUE) = '0'
				RETURN .F.
			ENDIF
		ENDIF
	ENDIF
ENDPROC
*------
PROCEDURE paulDATE
	LPARAMETER PLDATE , PLTYPE
	LOCAL PLDATE , PLTYPE , PLMONTH , PLDAY
	IF SET('century') = 'ON'
		PLYEAR = ALLTRIM(STR(YEAR(PLDATE)))
	ELSE
		PLYEAR = SUBSTR(ALLTRIM(STR(YEAR(PLDATE))),3,2)
	ENDIF
	IF PLDATE = {}
		RETURN '  /  / '
	ENDIF
	IF PLTYPE = 1
		PLMONTH = SUBSTR(CMONTH(PLDATE),1,3)
		PLDAY = ALLTRIM(STR(DAY(PLDATE)))
		RETURN PLDAY + '-' + PLMONTH + '-' + PLYEAR
	ENDIF
	IF PLTYPE = 2
		PLMONTH = CMONTH(PLDATE)
		PLDAY = ALLTRIM(STR(DAY(PLDATE)))
		RETURN PLMONTH + ' ' + PLDAY + ', ' + PLYEAR
	ENDIF
	IF PLTYPE = 3
		PLMONTH = CMONTH(PLDATE)
		PLDAY = ALLTRIM(STR(DAY(PLDATE)))
		RETURN PLDAY + ' ' + PLMONTH + ', ' + PLYEAR
	ENDIF
	IF PLTYPE = 4
		IF DEF_LANG = 'CHS'
			PLDATE = DTOS(PLDATE)
			RETURN LEFT(PLDATE,4) + '?' + SUBSTR(PLDATE,5,2) + '?' + RIGHT(PLDATE,2) + '?'
		ELSE
			RETURN DMY(PLDATE)
		ENDIF
	ENDIF
	IF PLTYPE = 5
		IF EMPTY(PLDATE)
			PLDATE = DATE()
		ENDIF
		RETURN PLDATE - DAY(PLDATE) + 1
	ENDIF
	IF PLTYPE = 6
		IF EMPTY(PLDATE)
			PLDATE = DATE()
		ENDIF
		VPLLASTDATE = PLDATE
		VPLCOUNTER = 1
		DO WHILE VPLCOUNTER <= 32
			VPLCOUNTER = VPLCOUNTER + 1
			VPLLASTDATE = VPLLASTDATE + 1
			IF MONTH(PLDATE) <> MONTH(VPLLASTDATE)
				EXIT
			ENDIF
		ENDDO
		RETURN VPLLASTDATE - 1
	ENDIF
	RETURN DTOC(PLDATE)
ENDPROC
*------
PROCEDURE itsqlrecupdate
	LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VKEY_VALUE , VFIELD1 , VVALUE1 ,  ;
		VFIELD2 , VVALUE2 , VFIELD3 , VVALUE3 , VFIELD4 , VVALUE4 , VFIELD5 ,  ;
		VVALUE5 , VFIELD6 , VVALUE6 , VFIELD7 , VVALUE7 , VFIELD8 , VVALUE8 ,  ;
		VFIELD9 , VVALUE9 , VFIELD10 , VVALUE10
	IF EMPTY(SYS_SETTINGS)
		RETURN 'FAIL - sys_settings is empty!'
	ENDIF
	SET EXCLUSIVE OFF
	SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
	SET_SYSPATH =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
	VDATATYPE =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
	USER_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
	SECURITY_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
	DEPARTMENT =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
	DATETYPE =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
	IF EMPTY(DATETYPE)
		SET DATE TO DMY
	ELSE
		SET DATE TO &datetype.
	ENDIF
	IF AT('ON',UPPER(DATETYPE)) > 0
		SET CENTURY ON
	ENDIF
	IF AT('OFF',UPPER(DATETYPE)) > 0
		SET CENTURY OFF
	ENDIF
	_ISERROR = .F.
	VPLCOUNTER = 1
	DO WHILE VPLCOUNTER <= 10
		VPLFIELD = 'vfield' + ALLTRIM(STR(VPLCOUNTER))
		VPLVALUE = 'vvalue' + ALLTRIM(STR(VPLCOUNTER))
		IF !EMPTY(&vplfield.)
			vplfield=&vplfield.
			vplvalue=&vplvalue.
			vplvalue=itsqlfieldconvert(SET_SYSPATH,VDATATYPE,VDBF,vplfield,vplvalue,vartype(&vplfield.))
			replace  &vplfield. with vplvalue
		ENDIF
		VPLCOUNTER = VPLCOUNTER + 1
	ENDDO
	REPLACE ADATETIME WITH DATETIME()
	IF VARTYPE(ADATE) <> 'U'
		REPLACE ADATE WITH TTOC(DATETIME()) + ' ' + USER_ID
	ENDIF
	IF _ISERROR
		RETURN 'FAIL'
	ELSE
		RETURN 'OK'
	ENDIF
ENDPROC
*------
PROCEDURE itsqlrecadd
	LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VKEY_VALUE , VFIELD1 , VVALUE1 ,  ;
		VFIELD2 , VVALUE2 , VFIELD3 , VVALUE3 , VFIELD4 , VVALUE4 , VFIELD5 ,  ;
		VVALUE5 , VFIELD6 , VVALUE6 , VFIELD7 , VVALUE7 , VFIELD8 , VVALUE8 ,  ;
		VFIELD9 , VVALUE9 , VFIELD10 , VVALUE10
	IF EMPTY(SYS_SETTINGS)
		RETURN 'FAIL - sys_settings is empty!'
	ENDIF
	SET EXCLUSIVE OFF
	SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
	SET_SYSPATH =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
	VDATATYPE =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
	USER_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
	SECURITY_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
	DEPARTMENT =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
	DATETYPE =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
	IF EMPTY(DATETYPE)
		SET DATE TO DMY
	ELSE
		SET DATE TO &datetype.
	ENDIF
	IF AT('ON',UPPER(DATETYPE)) > 0
		SET CENTURY ON
	ENDIF
	IF AT('OFF',UPPER(DATETYPE)) > 0
		SET CENTURY OFF
	ENDIF
	_ISERROR = .F.
	IF  .NOT. EMPTY(VKEY)
		replace &VKEY. with itsqlfieldconvert(SET_SYSPATH,VDATATYPE,VDBF,VKEY,VKEY_VALUE,vartype(&VKEY. ))
	ENDIF
	VPLCOUNTER = 1
	DO WHILE VPLCOUNTER <= 10
		VPLFIELD = 'vfield' + ALLTRIM(STR(VPLCOUNTER))
		VPLVALUE = 'vvalue' + ALLTRIM(STR(VPLCOUNTER))
		IF !EMPTY(&vplfield.)
			vplfield=&vplfield.
			vplvalue=&vplvalue.
			vplvalue=itsqlfieldconvert(SET_SYSPATH,VDATATYPE,VDBF,vplfield,vplvalue,vartype(&vplfield.))
			replace  &vplfield. with vplvalue
		ENDIF
		VPLCOUNTER = VPLCOUNTER + 1
	ENDDO
	REPLACE ADATETIME WITH DATETIME()
	IF VARTYPE(CDATE) <> 'U'
		REPLACE CDATE WITH TTOC(DATETIME()) + ' ' + USER_ID
	ENDIF
	IF _ISERROR
		RETURN 'FAIL'
	ELSE
		RETURN 'OK'
	ENDIF
ENDPROC
*------
PROCEDURE itsqlrecupdate2
	LPARAMETER SYS_SETTINGS , VTYPE , VSCREEN_ID , VUSER_ID , VSECURITY_ID , VDBF , VSEEK ,  ;
		VKEY , VKEY_VALUE , VFIELD1 , VVALUE1 , VFIELD2 , VVALUE2 , VFIELD3 ,  ;
		VVALUE3 , VFIELD4 , VVALUE4 , VFIELD5 , VVALUE5 , VFIELD6 , VVALUE6 ,  ;
		VFIELD7 , VVALUE7 , VFIELD8 , VVALUE8
	IF EMPTY(SYS_SETTINGS)
		RETURN 'FAIL - sys_settings is empty!'
	ENDIF
	SET EXCLUSIVE OFF
	SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
	SET_SYSPATH =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
	VDATATYPE =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
	USER_ID = VUSER_ID
	SECURITY_ID = VSECURITY_ID
	DEPARTMENT =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
	DATETYPE =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
	IF EMPTY(DATETYPE)
		SET DATE TO DMY
	ELSE
		SET DATE TO &datetype.
	ENDIF
	IF AT('ON',UPPER(DATETYPE)) > 0
		SET CENTURY ON
	ENDIF
	IF AT('OFF',UPPER(DATETYPE)) > 0
		SET CENTURY OFF
	ENDIF
	VERROR = 'OK'
	ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
	_ISERROR = .F.
	VPLCOUNTER = 1
	DO WHILE VPLCOUNTER <= 8
		VPLFIELD = 'vfield' + ALLTRIM(STR(VPLCOUNTER))
		VPLVALUE = 'vvalue' + ALLTRIM(STR(VPLCOUNTER))
		IF !EMPTY(&vplfield.)
			vplfield=&vplfield.
			vplvalue=&vplvalue.
			vplvalue=itsqlfieldconvert(SET_SYSPATH,VDATATYPE,VDBF,vplfield,vplvalue,vartype(&vplfield.))
			replace  &vplfield. with vplvalue
		ENDIF
		VPLCOUNTER = VPLCOUNTER + 1
	ENDDO
	REPLACE ADATETIME WITH DATETIME()
	IF UPPER(VTYPE) = 'ADD'
		IF VARTYPE(CDATE) <> 'U'
			REPLACE CDATE WITH TTOC(DATETIME()) + ' ' + USER_ID
		ENDIF
	ELSE
		IF VARTYPE(ADATE) <> 'U'
			REPLACE ADATE WITH TTOC(DATETIME()) + ' ' + USER_ID
		ENDIF
	ENDIF
	RETURN VERROR
ENDPROC
*------
PROCEDURE itsqlrecadd2
	LPARAMETER SYS_SETTINGS , VTYPE , VSCREEN_ID , VUSER_ID , VSECURITY_ID , VDBF , VSEEK ,  ;
		VKEY , VKEY_VALUE , VFIELD1 , VVALUE1 , VFIELD2 , VVALUE2 , VFIELD3 ,  ;
		VVALUE3 , VFIELD4 , VVALUE4 , VFIELD5 , VVALUE5 , VFIELD6 , VVALUE6 ,  ;
		VFIELD7 , VVALUE7 , VFIELD8 , VVALUE8
	IF EMPTY(SYS_SETTINGS)
		RETURN 'FAIL - sys_settings is empty!'
	ENDIF
	SET EXCLUSIVE OFF
	SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
	SET_SYSPATH =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
	VDATATYPE =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
	USER_ID = VUSER_ID
	SECURITY_ID = VSECURITY_ID
	DEPARTMENT =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
	DATETYPE =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
	IF EMPTY(DATETYPE)
		SET DATE TO DMY
	ELSE
		SET DATE TO &datetype.
	ENDIF
	IF AT('ON',UPPER(DATETYPE)) > 0
		SET CENTURY ON
	ENDIF
	IF AT('OFF',UPPER(DATETYPE)) > 0
		SET CENTURY OFF
	ENDIF
	VERROR = 'OK'
	ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
	_ISERROR = .F.
	IF  .NOT. EMPTY(VKEY)
		replace &VKEY. with itsqlfieldconvert(SET_SYSPATH,VDATATYPE,VDBF,VKEY,VKEY_VALUE,vartype(&VKEY. ))
	ENDIF
	VPLCOUNTER = 1
	DO WHILE VPLCOUNTER <= 8
		VPLFIELD = 'vfield' + ALLTRIM(STR(VPLCOUNTER))
		VPLVALUE = 'vvalue' + ALLTRIM(STR(VPLCOUNTER))
		IF !EMPTY(&vplfield.)
			vplfield=&vplfield.
			vplvalue=&vplvalue.
			vplvalue=itsqlfieldconvert(SET_SYSPATH,VDATATYPE,VDBF,vplfield,vplvalue,vartype(&vplfield.))
			replace  &vplfield. with vplvalue
		ENDIF
		VPLCOUNTER = VPLCOUNTER + 1
	ENDDO
	REPLACE ADATETIME WITH DATETIME()
	IF UPPER(VTYPE) = 'ADD'
		IF VARTYPE(CDATE) <> 'U'
			REPLACE CDATE WITH TTOC(DATETIME()) + ' ' + USER_ID
		ENDIF
	ELSE
		IF VARTYPE(ADATE) <> 'U'
			REPLACE ADATE WITH TTOC(DATETIME()) + ' ' + USER_ID
		ENDIF
	ENDIF
	RETURN VERROR
ENDPROC
*------
PROCEDURE ITSQLCREATECURSOR
	LPARAMETER SYS_SETTINGS , VTYPE , VTABLENAME , VCURSORNAME , VADD1 , VSTR1 , VADD2 , VSTR2 ,  ;
		VADD3 , VSTR3 , VADD4 , VSTR4 , VADD5 , VSTR5
	LOCAL VPLWORKINGARE
	IF EMPTY(SYS_SETTINGS)
		RETURN 'FAIL - sys_settings is empty!'
	ENDIF
	SET EXCLUSIVE OFF
	SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
	SET_SYSPATH =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
	VDATATYPE =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
	USER_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
	SECURITY_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
	DEPARTMENT =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
	DATETYPE =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
	IF EMPTY(DATETYPE)
		SET DATE TO DMY
	ELSE
		SET DATE TO &datetype.
	ENDIF
	IF AT('ON',UPPER(DATETYPE)) > 0
		SET CENTURY ON
	ENDIF
	IF AT('OFF',UPPER(DATETYPE)) > 0
		SET CENTURY OFF
	ENDIF
	IF EMPTY(VCURSORNAME) .OR. EMPTY(VTABLENAME)
		RETURN 'Pls specify your cursor name or table name from which you want to copy !'
	ENDIF
	VPLWORKINGARE = SELECT()
	IF USED('source_cursorname')
		USE IN SOURCE_CURSORNAME
	ENDIF
	IF USED(VCURSORNAME)
		use in &vcursorname.
	ENDIF
	VUSEDDBF2 = ALLTRIM(SET_DATAPATH) + ALLTRIM(VTABLENAME)
	use &vuseddbf2. alias source_cursorname in 0 again
	SELECT SOURCE_CURSORNAME
	VPLFIELDCOUNT = AFIELDS(VPLGAMYARRAY)
	FOR GNCOUNT = 1 TO VPLFIELDCOUNT
		VPLGAMYARRAY( GNCOUNT , 7 ) = ''
		VPLGAMYARRAY( GNCOUNT , 8 ) = ''
		VPLGAMYARRAY( GNCOUNT , 10 ) = ''
	ENDFOR
	SELECT 0
	VPLEXTEND = 0
	IF  .NOT. EMPTY(VADD1)
		VPLEXTEND = VPLEXTEND + 1
	ENDIF
	IF  .NOT. EMPTY(VADD2)
		VPLEXTEND = VPLEXTEND + 1
	ENDIF
	IF  .NOT. EMPTY(VADD3)
		VPLEXTEND = VPLEXTEND + 1
	ENDIF
	IF  .NOT. EMPTY(VADD4)
		VPLEXTEND = VPLEXTEND + 1
	ENDIF
	IF  .NOT. EMPTY(VADD5)
		VPLEXTEND = VPLEXTEND + 1
	ENDIF
	IF VPLEXTEND = 0
		CREATE CURSOR (VCURSORNAME) FROM ARRAY VPLGAMYARRAY
	ELSE
		DIMENSION VPLGAMYARRAYNEW( VPLFIELDCOUNT + VPLEXTEND , 11 )
		FOR GNCOUNT = 1 TO VPLFIELDCOUNT
			VPLGAMYARRAYNEW( GNCOUNT , 1 ) = VPLGAMYARRAY(GNCOUNT,1)
			VPLGAMYARRAYNEW( GNCOUNT , 2 ) = VPLGAMYARRAY(GNCOUNT,2)
			VPLGAMYARRAYNEW( GNCOUNT , 3 ) = VPLGAMYARRAY(GNCOUNT,3)
			VPLGAMYARRAYNEW( GNCOUNT , 4 ) = VPLGAMYARRAY(GNCOUNT,4)
			VPLGAMYARRAYNEW( GNCOUNT , 5 ) = VPLGAMYARRAY(GNCOUNT,5)
			VPLGAMYARRAYNEW( GNCOUNT , 6 ) = VPLGAMYARRAY(GNCOUNT,6)
			VPLGAMYARRAYNEW( GNCOUNT , 7 ) = VPLGAMYARRAY(GNCOUNT,7)
			VPLGAMYARRAYNEW( GNCOUNT , 8 ) = VPLGAMYARRAY(GNCOUNT,8)
			VPLGAMYARRAYNEW( GNCOUNT , 9 ) = VPLGAMYARRAY(GNCOUNT,9)
			VPLGAMYARRAYNEW( GNCOUNT , 10 ) = VPLGAMYARRAY(GNCOUNT,10)
			VPLGAMYARRAYNEW( GNCOUNT , 11 ) = VPLGAMYARRAY(GNCOUNT,11)
		ENDFOR
		IF  .NOT. EMPTY(VADD1)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 1 , 1 ) = VADD1
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 1 , 2 ) = ITRETURNCHARTYPE(VSTR1,1)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 1 , 3 ) = ITRETURNCHARTYPE(VSTR1,2)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 1 , 4 ) = ITRETURNCHARTYPE(VSTR1,3)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 1 , 5 ) = .F.
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 1 , 6 ) = .F.
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 1 , 7 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 1 , 8 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 1 , 9 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 1 , 10 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 1 , 11 ) = ''
		ENDIF
		IF  .NOT. EMPTY(VADD2)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 2 , 1 ) = VADD2
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 2 , 2 ) = ITRETURNCHARTYPE(VSTR2,1)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 2 , 3 ) = ITRETURNCHARTYPE(VSTR2,2)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 2 , 4 ) = ITRETURNCHARTYPE(VSTR2,3)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 2 , 5 ) = .F.
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 2 , 6 ) = .F.
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 2 , 7 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 2 , 8 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 2 , 9 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 2 , 10 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 2 , 11 ) = ''
		ENDIF
		IF  .NOT. EMPTY(VADD3)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 3 , 1 ) = VADD3
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 3 , 2 ) = ITRETURNCHARTYPE(VSTR3,1)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 3 , 3 ) = ITRETURNCHARTYPE(VSTR3,2)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 3 , 4 ) = ITRETURNCHARTYPE(VSTR3,3)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 3 , 5 ) = .F.
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 3 , 6 ) = .F.
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 3 , 7 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 3 , 8 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 3 , 9 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 3 , 10 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 3 , 11 ) = ''
		ENDIF
		IF  .NOT. EMPTY(VADD4)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 4 , 1 ) = VADD4
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 4 , 2 ) = ITRETURNCHARTYPE(VSTR4,1)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 4 , 3 ) = ITRETURNCHARTYPE(VSTR4,2)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 4 , 4 ) = ITRETURNCHARTYPE(VSTR4,3)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 4 , 5 ) = .F.
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 4 , 6 ) = .F.
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 4 , 7 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 4 , 8 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 4 , 9 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 4 , 10 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 4 , 11 ) = ''
		ENDIF
		IF  .NOT. EMPTY(VADD5)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 5 , 1 ) = VADD5
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 5 , 2 ) = ITRETURNCHARTYPE(VSTR5,1)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 5 , 3 ) = ITRETURNCHARTYPE(VSTR5,2)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 5 , 4 ) = ITRETURNCHARTYPE(VSTR5,3)
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 5 , 5 ) = .F.
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 5 , 6 ) = .F.
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 5 , 7 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 5 , 8 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 5 , 9 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 5 , 10 ) = ''
			VPLGAMYARRAYNEW( VPLFIELDCOUNT + 5 , 11 ) = ''
		ENDIF
		CREATE CURSOR (VCURSORNAME) FROM ARRAY VPLGAMYARRAYNEW
	ENDIF
	IF USED('source_cursorname')
		USE IN SOURCE_CURSORNAME
	ENDIF
ENDPROC
*------
PROCEDURE ITSQLLOADDATA
	LPARAMETER SYS_SETTINGS , VKEY_VALUE , PAULINDEX , PAULKEY , PAULOLDDBF , PAULNEWDBF ,  ;
		PAULOLDOPEN , PAULNEWOPEN , PAULCONDITION
	IF EMPTY(SYS_SETTINGS)
		RETURN 'FAIL - sys_settings is empty!'
	ENDIF
	SET EXCLUSIVE OFF
	SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
	SET_SYSPATH =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
	VDATATYPE =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
	USER_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
	SECURITY_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
	DEPARTMENT =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
	DATETYPE =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
	IF EMPTY(DATETYPE)
		SET DATE TO DMY
	ELSE
		SET DATE TO &datetype.
	ENDIF
	IF AT('ON',UPPER(DATETYPE)) > 0
		SET CENTURY ON
	ENDIF
	IF AT('OFF',UPPER(DATETYPE)) > 0
		SET CENTURY OFF
	ENDIF
	SET EXACT OFF
	SET DELETED ON
	IF USED('paulOLD')
		USE IN PAULOLD
	ENDIF
	IF EMPTY(PAULCONDITION)
		PAULCONDITION = '  .T.'
	ENDIF
	PAULOLD = 'paulOLD'
	VUSEDDBF3 = ALLTRIM(SET_DATAPATH) + ALLTRIM(PAULOLDDBF)
	use &vuseddbf3. order &paulindex. in 0 alias (paulOLD) again
	SELECT (PAULOLD)
	set order to &paulindex.
	PAULNEW = PAULNEWDBF
	PAULKEY_VALUE = ''
	CONTINUE_YN = 0
	PAULDELETED = .F.
	FPAULOLDADATETIME = ALLTRIM(PAULOLD) + '.' + 'ADATETIME'
	FPAULNEWADATETIME = ALLTRIM(PAULNEW) + '.' + 'ADATETIME'
	SELECT (PAULOLD)
	GO TOP
	SEEK VKEY_VALUE
	IF  .NOT. FOUND()
		IF USED(PAULOLD)
			USE IN (PAULOLD)
		ENDIF
		LRPRINT = 999
		SET EXACT OFF
		SET DELETED ON
		RETURN
	ENDIF
	LOCAL PAULFIELD , PAULFIELD_VALUE
	SELECT (PAULOLD)
	PAULKEY_VALUE = VKEY_VALUE
	PAULDELETED = DELETED()
	PAULNOREC = 0
	DO WHILE MACROS  ???FUN[CA] ('.NOT. EOF(paulOLD) .AND. &paulKEY.=VKEY_VALUE')
		SELECT (PAULOLD)
		IF ALLTRIM(&paulKEY.)==VKEY_VALUE  .AND. &paulcondition.
			PAULNOREC = PAULNOREC + 1
			CONTINUE_YN = 1
			SELECT (PAULNEW)
			APPEND BLANK
			SELECT (PAULOLD)
			FOR GNCOUNT = 1 TO FCOUNT()
				PAULFIELD = FIELD(GNCOUNT)
				IF TYPE(FIELD(GNCOUNT)) = 'C'
					paulFIELD_VALUE=FIELD(gnCount)+&paulFIELD.
				ELSE
					PAULFIELD_VALUE = FIELD(GNCOUNT)
				ENDIF
				FPAULOLD = ALLTRIM(PAULOLD) + '.' + ALLTRIM(PAULFIELD)
				FPAULNEW = ALLTRIM(PAULNEW) + '.' + ALLTRIM(PAULFIELD)
				PAULSELECT = .T.
				SELECT (PAULNEW)
				IF PAULSELECT
					REPLACE &FpaulNEW. WITH &FpaulOLD.
				ENDIF
				SELECT (PAULOLD)
			ENDFOR
		ENDIF
		SELECT (PAULOLD)
		SKIP
		PAULDELETED = DELETED()
		paulKEY_VALUE=&paulKEY.
	ENDDO
	IF USED('paulOLD')
		USE IN PAULOLD
	ENDIF
	IF USED(PAULOLD)
		USE IN (PAULOLD)
	ENDIF
	SET EXACT OFF
	SET DELETED ON
	RETURN
ENDPROC
*------
PROCEDURE paulZAP
	LPARAMETER PAULDBF , PAULTYPE
	LOCAL PLSELECTWK , PLSETSAFETY
	_ISERROR = .F.
	ON ERROR _isError=.T.
	PLSELECTWK = SELECT()
	PLSETSAFETY = SET('SAFETY')
	SET SAFETY OFF
	PAULSTATUS = USED(PAULDBF)
	IF  .NOT. PAULSTATUS
		use &pauldbf. in 0
		use in &pauldbf.
		use &pauldbf. in 0  exclusive again
		SELECT (PAULDBF)
		IF  .NOT. EMPTY(PAULTYPE) AND PAULTYPE = 'ZAP'
			ZAP
		ELSE
			DELETE ALL
			PACK
		ENDIF
	ELSE
		SELECT (PAULDBF)
		IF  .NOT. EMPTY(PAULTYPE) AND PAULTYPE = 'ZAP'
			ZAP
		ELSE
			DELETE ALL
			PACK
		ENDIF
	ENDIF
	IF  .NOT. PAULSTATUS
		use in &pauldbf.
	ENDIF
	SELECT (PLSELECTWK)
	SET SAFETY &plsetsafety.
	RETURN
ENDPROC
*------
PROCEDURE ITRETURNCHARTYPE
	LPARAMETER VPLSTRING , VPLTYPE
	IF VPLTYPE = 1
		RETURN UPPER(SUBSTR(VPLSTRING,1,1))
	ENDIF
	IF VPLTYPE = 2
		IF AT('.',VPLSTRING) = 0
			RETURN SUBSTR(VPLSTRING,AT('(',VPLSTRING) + 1,AT(')',VPLSTRING) - AT('(',VPLSTRING) - 1)
		ELSE
			VPLSTRINGNEW =  ;
				SUBSTR(VPLSTRING,AT('(',VPLSTRING) + 1,AT(')',VPLSTRING) - AT('(',VPLSTRING) - 1)
			RETURN SUBSTR(VPLSTRINGNEW,1,AT('.',VPLSTRINGNEW) - 1)
		ENDIF
	ENDIF
	IF VPLTYPE = 3
		IF AT('.',VPLSTRING) = 0
			RETURN 0
		ELSE
			VPLSTRINGNEW =  ;
				SUBSTR(VPLSTRING,AT('(',VPLSTRING) + 1,AT(')',VPLSTRING) - AT('(',VPLSTRING) - 1)
			RETURN SUBSTR(VPLSTRINGNEW,AT('.',VPLSTRINGNEW) + 1,4)
		ENDIF
	ENDIF
ENDPROC
*------
PROCEDURE ITSQLTEXT
	LPARAMETER SYS_SETTINGS , VPLCURSORTABLE , VSELECTION , VPLBEGIN , VPLEND , VPLDELIMITER
	IF EMPTY(SYS_SETTINGS)
		RETURN 'FAIL - sys_settings is empty!'
	ENDIF
	SET EXCLUSIVE OFF
	SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
	SET_SYSPATH =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
	VDATATYPE =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
	USER_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
	SECURITY_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
	DEPARTMENT =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
	DATETYPE =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
	IF EMPTY(DATETYPE)
		SET DATE TO DMY
	ELSE
		SET DATE TO &datetype.
	ENDIF
	IF AT('ON',UPPER(DATETYPE)) > 0
		SET CENTURY ON
	ENDIF
	IF AT('OFF',UPPER(DATETYPE)) > 0
		SET CENTURY OFF
	ENDIF
	SELECT (VPLCURSORTABLE)
	GO TOP
	IF EMPTY(VPLBEGIN)
		VPLBEGIN = '<BR>'
	ENDIF
	IF EMPTY(VPLEND)
		VPLEND = '</BR>'
	ENDIF
	IF EMPTY(VPLDELIMITER)
		VPLDELIMITER = '[*|||~]'
	ENDIF
	VSTRINGTEXT = ''
	VPLNOOFREC = RECCOUNT()
	VPLNOOFRECALL = VPLNOOFREC
	VPLNOOFFIELD = FCOUNT()
	VPLFIELDSTRING = ''
	GO TOP
	IF EOF()
		VPLNOOFREC = 0
		RETURN VPLBEGIN + VPLDELIMITER + ALLTRIM(STR(VPLNOOFREC)) + VPLDELIMITER +  ;
			ALLTRIM(STR(VPLNOOFFIELD)) + VPLDELIMITER + ALLTRIM(VSELECTION) + VPLDELIMITER +  ;
			ALLTRIM(STR(VPLNOOFRECALL)) + VPLDELIMITER + VPLEND
	ELSE
		IF  .NOT. EMPTY(FILTER())
			SUM TO VPLNOOFREC 1
			GO TOP
			VPLNOOFREC = INT(VPLNOOFREC)
		ENDIF
	ENDIF
	IF EMPTY(VSELECTION) .OR. ALLTRIM(VSELECTION) = '*'
		FOR GNCOUNT = 1 TO FCOUNT()
			PAULFIELD = FIELD(GNCOUNT)
			VPLFIELDSTRING = VPLFIELDSTRING + ALLTRIM(PAULFIELD) + ','
		ENDFOR
		VSELECTION = VPLFIELDSTRING
	ELSE
		VSELECTION = VSELECTION + ','
	ENDIF
	VPLNOOFFIELD = OCCURS(',',VSELECTION)
	VSTRINGTEXT =  ;
		VPLBEGIN + VPLDELIMITER + ALLTRIM(STR(VPLNOOFREC)) + VPLDELIMITER +  ;
		ALLTRIM(STR(VPLNOOFFIELD)) + VPLDELIMITER + ALLTRIM(VSELECTION) + VPLDELIMITER +  ;
		ALLTRIM(STR(VPLNOOFRECALL)) + VPLDELIMITER + VPLEND
	DO WHILE  .NOT. EOF()
		VSTRINGTEXT = VSTRINGTEXT + VPLBEGIN + VPLDELIMITER
		PAULFIELD = SUBSTR(VSELECTION,1,AT(',',VSELECTION) - 1)
		if vartype(&paulFIELD.)<>"U"
			VFIELD_TYPE=vartype(alltrim(&paulFIELD.))
			VFIELD_VALUE=&paulFIELD.
			VFIELD_VALUE = ITSQLOCHAR(VFIELD_VALUE)
			VSTRINGTEXT = VSTRINGTEXT + VFIELD_VALUE + VPLDELIMITER
		ENDIF
		IF OCCURS(',',VSELECTION) > 1
			FOR GNCOUNT = 1 TO OCCURS(',',VSELECTION) - 1
				if vartype(&paulFIELD.)<>"U"
					PAULFIELD =  ;
						SUBSTR(VSELECTION,AT(',',VSELECTION,GNCOUNT) + 1,AT(',',VSELECTION,GNCOUNT + 1) - AT(',',VSELECTION,GNCOUNT) - 1)
					VFIELD_TYPE=vartype(&paulFIELD.)
					VFIELD_VALUE=&paulFIELD.
					VFIELD_VALUE = ITSQLOCHAR(VFIELD_VALUE)
					VSTRINGTEXT = VSTRINGTEXT + VFIELD_VALUE + VPLDELIMITER
				ENDIF
			ENDFOR
		ENDIF
		VSTRINGTEXT = VSTRINGTEXT + VPLEND
		SKIP
	ENDDO
	RETURN VSTRINGTEXT
ENDPROC
*------
PROCEDURE itsqlvaluetochar
	LPARAMETER SET_SYSPATH , VDATATYPE , VDBF , VFIELD , VVALUE , VCHARTYPE
	_ISERROR = .F.
	ON ERROR _isError=.T.
	SYSWORKAREA = SELECT()
	VUSEDDBF = ALLTRIM(SET_SYSPATH) + 'sysflds'
	VFIELD_TYPE = ''
	IF AT('.',VUSEDDBF) = 0
		IF FILE(VUSEDDBF + '.wsd')
			VUSEDDBF = VUSEDDBF + '.wsd'
		ELSE
			VUSEDDBF = VUSEDDBF + '.dbf'
		ENDIF
	ENDIF
	IF FILE(VUSEDDBF)
		IF  .NOT. USED('itsqlsysflds')
			use &vuseddbf. alias itsqlsysflds order table_name in 0 again
		ENDIF
		SELECT ITSQLSYSFLDS
		GO TOP
		SEEK UPPER(SUBSTR(VDBF + SPACE(10),1,10) + 'FIELD     ' + VFIELD)
		IF FOUND()
			VFIELD_TYPE = ALLTRIM(ITSQLSYSFLDS.FIELD_TYPE)
		ELSE
			IF  .NOT. EMPTY(VCHARTYPE)
				VFIELD_TYPE = VCHARTYPE
			ENDIF
		ENDIF
	ELSE
		IF  .NOT. EMPTY(VCHARTYPE)
			VFIELD_TYPE = VCHARTYPE
		ENDIF
	ENDIF
	SELECT (SYSWORKAREA)
	VFIELD_TYPE = VARTYPE(VVALUE)
	IF SUBSTR(VFIELD_TYPE,1,1) = 'C' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'M' .OR.  ;
			EMPTY(VFIELD_TYPE)
		RETURN VVALUE
	ENDIF
	IF SUBSTR(VFIELD_TYPE,1,1) = 'D' .OR. VARTYPE(VVALUE) = 'D'
		RETURN DTOC(VVALUE)
	ENDIF
	IF SUBSTR(VFIELD_TYPE,1,1) = 'N' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'I' .OR.  ;
			SUBSTR(VFIELD_TYPE,1,1) = 'F' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'Y' .OR. VARTYPE(VVALUE) = 'N' .OR.  ;
			VARTYPE(VVALUE) = 'Y'
		RETURN TRANSFORM(VVALUE)
	ENDIF
	IF SUBSTR(VFIELD_TYPE,1,1) = 'T' .OR. VARTYPE(VVALUE) = 'T'
		RETURN TTOC(VVALUE)
	ENDIF
	IF SUBSTR(VFIELD_TYPE,1,1) = 'L' .OR. VARTYPE(VVALUE) = 'L'
		IF VARTYPE(VVALUE) = 'L'
			RETURN TRANSFORM(VVALUE)
		ELSE
			IF UPPER(VVALUE) = 'TRUE' .OR. UPPER(VVALUE) = '.T.' .OR. UPPER(VVALUE) = 'T' .OR.  ;
					UPPER(VVALUE) = '1'
				RETURN '.T.'
			ENDIF
			IF UPPER(VVALUE) = 'FALSE' .OR. UPPER(VVALUE) = '.F.' .OR. UPPER(VVALUE) = 'F' .OR.  ;
					UPPER(VVALUE) = '0'
				RETURN '.F.'
			ENDIF
		ENDIF
	ENDIF
ENDPROC
*------
PROCEDURE itsqlochar
	LPARAMETER VVALUE
	_ISERROR = .F.
	ON ERROR _isError=.T.
	VFIELD_TYPE = VARTYPE(VVALUE)
	IF SUBSTR(VFIELD_TYPE,1,1) = 'C' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'M' .OR.  ;
			EMPTY(VFIELD_TYPE)
		RETURN RTRIM(VVALUE)
	ENDIF
	IF SUBSTR(VFIELD_TYPE,1,1) = 'D'
		RETURN DTOC(VVALUE)
	ENDIF
	IF SUBSTR(VFIELD_TYPE,1,1) = 'N' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'I' .OR.  ;
			SUBSTR(VFIELD_TYPE,1,1) = 'F'
		RETURN RTRIM(TRANSFORM(VVALUE))
	ENDIF
	IF SUBSTR(VFIELD_TYPE,1,1) = 'T' .OR. VARTYPE(VVALUE) = 'T'
		RETURN TTOC(VVALUE)
	ENDIF
	IF SUBSTR(VFIELD_TYPE,1,1) = 'L'
		RETURN TRANSFORM(VVALUE)
	ENDIF
ENDPROC
*------
PROCEDURE itenc
	LPARAMETER LPASS
	LPASS = ALLTRIM(LPASS)
	IF EMPTY(LPASS)
		RETURN ''
	ENDIF
	IF SUBSTR(LPASS,1,2) = '^^'
		RETURN LPASS
	ENDIF
	LPPRIVATEKEY =  ;
		'143212131221143212131221143212131221143212131221143212131221143212131221143212131221143212131221143212131221'
	LPASS = ALLTRIM(LPASS)
	LOCAL LPASSLEN , LRESULT , LNUM , LTMP
	LPASSLEN = LEN(LPASS)
	LRESULT = ''
	FOR LNUM = 1 TO LPASSLEN
		LTMP = ASC(SUBSTR(LPASS,LNUM,1))
		LRESULT = LRESULT + CHR(LTMP + VAL(SUBSTR(LPPRIVATEKEY,LNUM,1)))
	ENDFOR
	LRESULT = '^^' + LRESULT
	RETURN LRESULT
ENDPROC
*------
PROCEDURE itunenc
	LPARAMETER LPASS
	LPASS = ALLTRIM(LPASS)
	IF EMPTY(LPASS)
		RETURN ''
	ENDIF
	IF SUBSTR(LPASS,1,2) <> '^^'
		RETURN LPASS
	ENDIF
	IF SUBSTR(LPASS,1,2) = '^^'
		LPASS = SUBSTR(LPASS,3,200)
	ENDIF
	LPPRIVATEKEY =  ;
		'143212131221143212131221143212131221143212131221143212131221143212131221143212131221143212131221143212131221'
	LOCAL LPASSLEN , LNUM , LRESULT , LTMP
	LRESULT = ''
	LPASSLEN = LEN(LPASS)
	FOR LNUM = 1 TO LPASSLEN
		LTMP = ASC(SUBSTR(LPASS,LNUM,1))
		LRESULT = LRESULT + CHR(LTMP - VAL(SUBSTR(LPPRIVATEKEY,LNUM,1)))
	ENDFOR
	RETURN LRESULT
ENDPROC
*------
PROCEDURE ITPASSWORD
	LPARAMETER PLNO
	IF PLNO < 1 .OR. PLNO > 18
		RETURN
	ENDIF
	LOCAL PLCOUNTER , PLPASSWORD
	PLPASSWORD = ''
	PLCOUNTER = 1
	SET DECIMALS TO 6
	DO WHILE PLCOUNTER <= PLNO
		VRAND = RAND() * SECONDS()
		VRAND = INT((VRAND - INT(VRAND)) * 26 + 0.3)
		PLPASSWORD = PLPASSWORD + CHR(65 + VRAND)
		PLCOUNTER = PLCOUNTER + 1
	ENDDO
	RETURN UPPER(ALLTRIM(PLPASSWORD))
ENDPROC
*------
PROCEDURE ITCOPYFILES
	LPARAMETER VFROMDIR , VTODIR , VFILENAME , VTOFILENAME
	VERROR = 'OK'
	ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
	VFILENAME = ALLTRIM(CHRTRANC(VFILENAME,"\/:?*<>|;'" + CHR(34),''))
	VTOFILENAME = ALLTRIM(CHRTRANC(VTOFILENAME,"\/:?*<>|;'" + CHR(34),''))
	VFROMFILENAME = VFROMDIR + VFILENAME
	VTOFILENAME = VTODIR + VTOFILENAME
	IF FILE(VFROMFILENAME) AND  .NOT. FILE(VTOFILENAME)
		COPY FILE &VFROMFILENAME. TO &VTOFILENAME.
	ELSE
		IF  .NOT. FILE(VFROMFILENAME)
			VERROR = 'FAIL: FILE DOES NOT EXIST !' + VFROMFILENAME
		ELSE
			VERROR = 'FAIL: FILE ALREADY EXISTS !'
		ENDIF
	ENDIF
	RETURN VERROR
ENDPROC
*------
PROCEDURE ITDATE
	LPARAMETER PLDATE , PLTYPE , PLDATETYPE , PLDEF_LANG , VERROR
	LOCAL PLDATE , PLTYPE , PLMONTH , PLDAY
	VERROR = 'OK'
	ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
	SET EXCLUSIVE OFF
	SET TALK OFF
	IF  .NOT. EMPTY(PLDATETYPE)
		IF  .NOT. EMPTY(PLDATETYPE)
			SET DATE TO &plDATETYPE.
		ENDIF
		IF AT('ON',UPPER(PLDATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(PLDATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
	ENDIF
	IF EMPTY(PLDATE)
		RETURN '  /  / '
	ENDIF
	IF VARTYPE(PLDATE) = 'C'
		PLDATE = CHRTRANC(PLDATE,'{}','')
		PLDATE = CTOD(PLDATE)
	ENDIF
	IF SET('century') = 'ON'
		PLYEAR = ALLTRIM(STR(YEAR(PLDATE)))
	ELSE
		PLYEAR = SUBSTR(ALLTRIM(STR(YEAR(PLDATE))),3,2)
	ENDIF
	IF  .NOT. EMPTY(PLTYPE)
		IF VARTYPE(PLTYPE) = 'C' .OR. VARTYPE(PLTYPE) = 'M'
			PLTYPE = VAL(PLTYPE)
		ENDIF
	ELSE
		PLTYPE = 1
	ENDIF
	IF PLTYPE = 1
		PLMONTH = SUBSTR(CMONTH(PLDATE),1,3)
		PLDAY = ALLTRIM(STR(DAY(PLDATE)))
		RETURN PLDAY + '-' + PLMONTH + '-' + PLYEAR
	ENDIF
	IF PLTYPE = 2
		PLMONTH = CMONTH(PLDATE)
		PLDAY = ALLTRIM(STR(DAY(PLDATE)))
		RETURN PLMONTH + ' ' + PLDAY + ', ' + PLYEAR
	ENDIF
	IF PLTYPE = 3
		PLMONTH = CMONTH(PLDATE)
		PLDAY = ALLTRIM(STR(DAY(PLDATE)))
		RETURN PLDAY + ' ' + PLMONTH + ', ' + PLYEAR
	ENDIF
	IF PLTYPE = 4
		IF EMPTY(PLDEF_LANG)
			PLDEF_LANG = 'CHS'
		ENDIF
		IF PLDEF_LANG = 'CHS'
			PLDATE = DTOS(PLDATE)
			RETURN LEFT(PLDATE,4) + '年' + SUBSTR(PLDATE,5,2) + '月' + RIGHT(PLDATE,2) + '日'
		ELSE
			RETURN DMY(PLDATE)
		ENDIF
	ENDIF
	IF PLTYPE = 5
		IF EMPTY(PLDATE)
			PLDATE = DTOC(DATE())
		ENDIF
		RETURN DTOC(PLDATE - DAY(PLDATE) + 1)
	ENDIF
	IF PLTYPE = 6
		IF EMPTY(PLDATE)
			PLDATE = DATE()
		ENDIF
		VPLLASTDATE = PLDATE
		VPLCOUNTER = 1
		DO WHILE VPLCOUNTER <= 32
			VPLCOUNTER = VPLCOUNTER + 1
			VPLLASTDATE = VPLLASTDATE + 1
			IF MONTH(PLDATE) <> MONTH(VPLLASTDATE)
				EXIT
			ENDIF
		ENDDO
		RETURN DTOC(VPLLASTDATE - 1)
	ENDIF
	RETURN DTOC(PLDATE)
ENDPROC
*------
PROCEDURE itgetinfo
	LPARAMETER VCUSTOMER_ID , VSUBFOLDER , VDOC_ID , VEXT , VMAINFOLDER , VERROR
	VCUSTOMER_ID = ALLTRIM(UPPER(VCUSTOMER_ID))
	IF EMPTY(VCUSTOMER_ID)
		VERROR = 'FAIL - Customer ID is empty!'
		RETURN ''
	ENDIF
	VDOC_ID = ALLTRIM(CHRTRANC(VDOC_ID,"\/:?*<>|;'" + CHR(34),''))
	IF EMPTY(VDOC_ID)
		VERROR = 'FAIL - DOC ID is empty!'
		RETURN ''
	ENDIF
	IF  .NOT. EMPTY(VEXT)
		IF AT('.',VEXT) > 0
			VDOC_ID = VDOC_ID + ALLTRIM(VEXT)
		ELSE
			VDOC_ID = VDOC_ID + '.' + ALLTRIM(VEXT)
		ENDIF
	ENDIF
	SET EXCLUSIVE OFF
	SET TALK OFF
	USER_ID = ALLTRIM(VCUSTOMER_ID)
	IF EMPTY(VMAINFOLDER)
		VCUSTWEB = 'CUSTWEB'
	ELSE
		VCUSTWEB = VMAINFOLDER + ''
	ENDIF
	VDRIVER = UPPER(SUBSTR(VCUSTOMER_ID,1,1))
	IF ASC(VDRIVER) >= 65 AND ASC(VDRIVER) <= 90
		VCUSTWEB = VCUSTWEB + VDRIVER
	ENDIF
	VCUSTWEB = VCUSTWEB + '/' + USER_ID
	IF  .NOT. EMPTY(VSUBFOLDER)
		IF  .NOT. EMPTY(ALLTRIM(CHRTRANC(VSUBFOLDER,"\/:?*<>|;'",'')))
			VCUSTWEB =  ;
				VCUSTWEB + '/' + ALLTRIM(CHRTRANC(VSUBFOLDER,"\/:?*<>|;'" + CHR(34),''))
		ENDIF
	ENDIF
	VCUSTWEB = VCUSTWEB + '/' + VDOC_ID
	VERROR = 'OK'
	ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
	RETURN VCUSTWEB
ENDPROC
*------
PROCEDURE ITRECCOUNT
	LPARAMETER VSTRINGTEXT , VPLBEGIN , VPLEND , VPLDELIMITER
	VLINENO = 1
	IF EMPTY(VPLDELIMITER)
		VPLDELIMITER = '[*|||~]'
	ENDIF
	IF EMPTY(VPLBEGIN)
		VPLBEGIN = '<BR>'
	ENDIF
	IF EMPTY(VPLEND)
		VPLEND = '</BR>'
	ENDIF
	RETURN INT(VAL(SUBSTR(VSTRINGTEXT,AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) + LEN(VPLDELIMITER),AT(VPLDELIMITER,VSTRINGTEXT,VLINENO + 1) - AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) -  ;
		LEN(VPLDELIMITER))))
ENDPROC
*------
PROCEDURE ITRECCOUNTALL
	LPARAMETER VSTRINGTEXT , VPLBEGIN , VPLEND , VPLDELIMITER
	VLINENO = 4
	IF EMPTY(VPLDELIMITER)
		VPLDELIMITER = '[*|||~]'
	ENDIF
	IF EMPTY(VPLBEGIN)
		VPLBEGIN = '<BR>'
	ENDIF
	IF EMPTY(VPLEND)
		VPLEND = '</BR>'
	ENDIF
	RETURN INT(VAL(SUBSTR(VSTRINGTEXT,AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) + LEN(VPLDELIMITER),AT(VPLDELIMITER,VSTRINGTEXT,VLINENO + 1) - AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) -  ;
		LEN(VPLDELIMITER))))
ENDPROC
*------
PROCEDURE ITFIELDCOUNT
	LPARAMETER VSTRINGTEXT , VPLBEGIN , VPLEND , VPLDELIMITER
	VLINENO = 2
	IF EMPTY(VPLDELIMITER)
		VPLDELIMITER = '[*|||~]'
	ENDIF
	IF EMPTY(VPLBEGIN)
		VPLBEGIN = '<BR>'
	ENDIF
	IF EMPTY(VPLEND)
		VPLEND = '</BR>'
	ENDIF
	RETURN INT(VAL(SUBSTR(VSTRINGTEXT,AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) + LEN(VPLDELIMITER),AT(VPLDELIMITER,VSTRINGTEXT,VLINENO + 1) - AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) -  ;
		LEN(VPLDELIMITER))))
ENDPROC
*------
PROCEDURE ITFIELDS
	LPARAMETER VSTRINGTEXT , VPLBEGIN , VPLEND , VPLDELIMITER
	VLINENO = 3
	IF EMPTY(VPLDELIMITER)
		VPLDELIMITER = '[*|||~]'
	ENDIF
	IF EMPTY(VPLBEGIN)
		VPLBEGIN = '<BR>'
	ENDIF
	IF EMPTY(VPLEND)
		VPLEND = '</BR>'
	ENDIF
	RETURN SUBSTR(VSTRINGTEXT,AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) + LEN(VPLDELIMITER),AT(VPLDELIMITER,VSTRINGTEXT,VLINENO + 1) - AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) -  ;
		LEN(VPLDELIMITER))
ENDPROC
*------
PROCEDURE ITPAGECOUNT
	LPARAMETER VSTRINGTEXT , VPLPAGECOUNT , VPLBEGIN , VPLEND , VPLDELIMITER
	VLINENO = 1
	IF EMPTY(VPLPAGECOUNT)
		VPLPAGECOUNT = 20
	ENDIF
	IF EMPTY(VPLDELIMITER)
		VPLDELIMITER = '[*|||~]'
	ENDIF
	IF EMPTY(VPLBEGIN)
		VPLBEGIN = '<BR>'
	ENDIF
	IF EMPTY(VPLEND)
		VPLEND = '</BR>'
	ENDIF
	RETURN INT(CEILING(VAL(SUBSTR(VSTRINGTEXT,AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) + LEN(VPLDELIMITER),AT(VPLDELIMITER,VSTRINGTEXT,VLINENO + 1) - AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) -  ;
		LEN(VPLDELIMITER))) /  ;
		VPLPAGECOUNT))
ENDPROC
*------
PROCEDURE ITFIELDCOLUMN
	LPARAMETER VCLSELECTION , VCLFIELD
	IF EMPTY(VCLFIELD) .OR. EMPTY(VCLSELECTION)
		RETURN 0
	ENDIF
	VCLFIELDCOLUMN = 0
	VCLSELECTION = STRTRAN(UPPER(ITFIELDS(VSTRINGTEXT)),' ')
	VCLFIELD = UPPER(ALLTRIM(VCLFIELD))
	PAULFIELD = SUBSTR(VCLSELECTION,1,AT(',',VCLSELECTION) - 1)
	IF VCLFIELD == PAULFIELD
		VCLFIELDCOLUMN = 1
	ENDIF
	IF OCCURS(',',VCLSELECTION) > 1
		FOR GNCOUNT = 1 TO OCCURS(',',VCLSELECTION) - 1
			PAULFIELD =  ;
				SUBSTR(VCLSELECTION,AT(',',VCLSELECTION,GNCOUNT) + 1,AT(',',VCLSELECTION,GNCOUNT + 1) - AT(',',VCLSELECTION,GNCOUNT) - 1)
			IF VCLFIELD == PAULFIELD
				VCLFIELDCOLUMN = GNCOUNT + 1
			ENDIF
		ENDFOR
	ENDIF
	RETURN VCLFIELDCOLUMN
ENDPROC
*------
PROCEDURE ITRECLINE
	LPARAMETER VSTRINGTEXT , VRECLINO , VPLBEGIN , VPLEND , VPLDELIMITER
	IF EMPTY(VPLDELIMITER)
		VPLDELIMITER = '[*|||~]'
	ENDIF
	IF EMPTY(VPLBEGIN)
		VPLBEGIN = '<BR>'
	ENDIF
	IF EMPTY(VPLEND)
		VPLEND = '</BR>'
	ENDIF
	IF EMPTY(VRECLINO) .OR. VRECLINO = 0
		VRECLINO = 1
	ENDIF
	RETURN SUBSTR(VSTRINGTEXT,AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXT,VRECLINO) + LEN(VPLBEGIN),AT(VPLDELIMITER + VPLEND,VSTRINGTEXT,VRECLINO) -  ;
		AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXT,VRECLINO) +  ;
		3)
ENDPROC
*------
PROCEDURE ITVALUE
	LPARAMETER VSTRINGTEXT , VRECNO , VFIELD , VPLBEGIN , VPLEND , VPLDELIMITER
	LOCAL VSTRINGTEXT2 , VSTRINGTEXT3
	IF EMPTY(VPLDELIMITER)
		VPLDELIMITER = '[*|||~]'
	ENDIF
	IF EMPTY(VPLBEGIN)
		VPLBEGIN = '<BR>'
	ENDIF
	IF EMPTY(VPLEND)
		VPLEND = '</BR>'
	ENDIF
	VFIELD = UPPER(VFIELD)
	VSTRINGTEXT2 =  ;
		SUBSTR(VSTRINGTEXT,AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXT,VRECNO + 1) + LEN(VPLBEGIN),AT(VPLDELIMITER + VPLEND,VSTRINGTEXT,VRECNO + 1) -  ;
		AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXT,VRECNO + 1) +  ;
		3)
	VCLFIELDCOLUMN = 1
	VCLSELECTION =  ;
		SUBSTR(VSTRINGTEXT,AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXT,1) + LEN(VPLBEGIN),AT(VPLDELIMITER + VPLEND,VSTRINGTEXT,1) - AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXT,1) +  ;
		3)
	VCLFIELD = UPPER(ALLTRIM(VFIELD))
	IF EMPTY(VCLFIELD) .OR. EMPTY(VCLSELECTION)
		VCLFIELDCOLUMN = 0
	ENDIF
	PAULFIELD = SUBSTR(VCLSELECTION,1,AT(',',VCLSELECTION) - 1)
	IF UPPER(ALLTRIM(VCLFIELD)) == UPPER(ALLTRIM(PAULFIELD))
		VCLFIELDCOLUMN = 1
	ELSE
		IF OCCURS(',',VCLSELECTION) > 1
			FOR GNCOUNT = 1 TO OCCURS(',',VCLSELECTION) - 1
				PAULFIELD =  ;
					SUBSTR(VCLSELECTION,AT(',',VCLSELECTION,GNCOUNT) + 1,AT(',',VCLSELECTION,GNCOUNT + 1) - AT(',',VCLSELECTION,GNCOUNT) - 1)
				IF UPPER(ALLTRIM(VCLFIELD)) == UPPER(ALLTRIM(PAULFIELD))
					VCLFIELDCOLUMN = GNCOUNT + 1
				ENDIF
			ENDFOR
		ENDIF
	ENDIF
	VCOLUNMNO = VCLFIELDCOLUMN
	VSTRINGTEXT3 =  ;
		SUBSTR(VSTRINGTEXT2,AT(VPLDELIMITER,VSTRINGTEXT2,VCOLUNMNO) + LEN(VPLDELIMITER),AT(VPLDELIMITER,VSTRINGTEXT2,VCOLUNMNO + 1) -  ;
		AT(VPLDELIMITER,VSTRINGTEXT2,VCOLUNMNO) -  ;
		LEN(VPLDELIMITER))
	RETURN VSTRINGTEXT3
ENDPROC
*------
PROCEDURE ITMAX
	LPARAMETER VLIST
	LOCAL VPLCOUNTER , VPLICOUNTER
	IF EMPTY(VLIST)
		RETURN 0
	ENDIF
	VLIST = ALLTRIM(VLIST)
	IF LEFT(VLIST,1) <> ','
		VLIST = ',' + VLIST
	ENDIF
	IF RIGHT(VLIST,1) <> ','
		VLIST = VLIST + ','
	ENDIF
	VPLCOUNTER = OCCURS(',',VLIST)
	VPLICOUNTER = 1
	VITMAX = 0
	DO WHILE VPLICOUNTER <= VPLCOUNTER
		IF VAL(ALLTRIM(SUBSTR(VLIST,AT(',',VLIST,VPLICOUNTER) + 1,AT(',',VLIST,VPLICOUNTER + 1) - AT(',',VLIST,VPLICOUNTER) - 1))) >  ;
				VITMAX
			VITMAX =  ;
				VAL(ALLTRIM(SUBSTR(VLIST,AT(',',VLIST,VPLICOUNTER) + 1,AT(',',VLIST,VPLICOUNTER + 1) - AT(',',VLIST,VPLICOUNTER) - 1)))
		ENDIF
		VPLICOUNTER = VPLICOUNTER + 1
	ENDDO
	RETURN VITMAX
ENDPROC
*------
PROCEDURE PaulInfoLink3EXT
	LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VERROR , VKEY_VALUE ,  ;
		VSTRINGTEXTLOCAL , VSELECTION , VSTRINGLINK
	LOCAL SELECT_WK , ERROR_WK , NEAR_WK , EXACT_WK , _ISERROR , RECNO_WK ,  ;
		VSTRINGTEXTLOCAL
	IF EMPTY(VSTRINGLINK) .OR. ITRECCOUNT(VSTRINGLINK) = 0
		VERROR = 'FAIL - Text is empty!'
		RETURN VSTRINGTEXTLOCAL
	ENDIF
	IF SUBSTR(VSTRINGLINK,1,4) = 'FAIL' .OR. SUBSTR(VSTRINGTEXTLOCAL,1,4) = 'FAIL'
		VERROR = 'FAIL - Text is invalid !' + VSTRINGLINK
		RETURN VSTRINGTEXTLOCAL
	ENDIF
	SET EXCLUSIVE OFF
	SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
	SET_SYSPATH =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
	VDATATYPE =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
	USER_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
	SECURITY_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
	DEPARTMENT =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
	DATETYPE =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
	SET EXCLUSIVE OFF
	SET DELETED ON
	IF EMPTY(DATETYPE)
		SET DATE TO DMY
	ELSE
		SET DATE TO &datetype.
	ENDIF
	IF AT('ON',UPPER(DATETYPE)) > 0
		SET CENTURY ON
	ENDIF
	IF AT('OFF',UPPER(DATETYPE)) > 0
		SET CENTURY OFF
	ENDIF
	DELETEON =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
	IF  .NOT. EMPTY(DELETEON)
		&DELETEON.
	ENDIF
	VPLBEGIN = '<BR>'
	VPLEND = '</BR>'
	VPLDELIMITER = '[*|||~]'
	VRECCOUNTOLD = ITRECCOUNT(VSTRINGTEXTLOCAL)
	VRECCOUNTNEW = ITRECCOUNT(VSTRINGLINK)
	VPLNOOFFIELDOLD = ITFIELDCOUNT(VSTRINGTEXTLOCAL)
	VSTRINGTEXTLOCALOLD = VSTRINGTEXTLOCAL
	VSTRINGTEXTLOCALNEW = VSTRINGLINK
	VPLNOOFFIELD = VPLNOOFFIELDOLD
	VPLNOOFREC = 0
	VSTRINGTEXTLOCAL = ''
	VPLFIELDSTRING = ''
	IF VRECCOUNTNEW = 0
		VERROR = 'FAIL - Text is empty!'
		RETURN VSTRINGTEXTLOCAL
	ENDIF
	IF VARTYPE(VSELECTION) = 'L' .OR. VARTYPE(VSELECTION) = 'U'
		VSELECTION = ''
	ENDIF
	SELECT_WK = SELECT()
	ERROR_WK = ON('error')
	NEAR_WK = SET('near')
	EXACT_WK = SET('exact')
	RECNO_WK = IIF(EOF() .OR. BOF(),0,RECNO())
	_ISERROR = .F.
	SET NEAR ON
	SET EXACT OFF
	SET EXCLUSIVE OFF
	VERROR = 'OK'
	ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
	LCSTRING = ''
	SELECT 0
	LCGLOBALITEMALIAS = 'Global' + ALLTRIM(SUBSTR(VDBF,RAT('\',VDBF) + 1,20))
	IF USED(LCGLOBALITEMALIAS)
		SELECT (LCGLOBALITEMALIAS)
	ELSE
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) > 0
			VFILEDBF = ALLTRIM(SUBSTR(VUSEDDBF,1,AT('.',VUSEDDBF) - 1)) + '.cdx'
		ELSE
			VFILEDBF = VUSEDDBF + '.CDX'
		ENDIF
		IF  .NOT. FILE(VFILEDBF)
			LCSTRING = 'FAIL: Table not found ! ' + VUSEDDBF
			VERROR = 'FAIL: Table not found !' + VUSEDDBF
			LCLASTPAGE = ''
			RETURN VSTRINGTEXTLOCAL
		ENDIF
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ENDIF
		ENDIF
		use &vuseddbf. ALIAS &LcGlobalItemAlias. in 0 again shared
	ENDIF
	IF SUBSTR(VERROR,1,4) = 'FAIL'
		SELECT (SELECT_WK)
		LCSTRING = 'FAIL: Error to open the database table(s)!'
		VERROR = 'FAIL: Error to open the database table(s)!'
		LCLASTPAGE = ''
		RETURN VSTRINGTEXTLOCAL
	ENDIF
	IF  .NOT. EMPTY(VSELECTION) AND  .NOT. RIGHT(ALLTRIM(VSELECTION),1) = ','
		VSELECTION = ALLTRIM(VSELECTION) + ','
	ENDIF
	Set Order To &VSEEK.
	GO TOP
	NCOUNT = 0
	VPLNOOFREC = 0
	VSTRINGTEXTLOCAL = ''
	DO WHILE NCOUNT <= VRECCOUNTNEW
		NCOUNT = NCOUNT + 1
		SELECT (LCGLOBALITEMALIAS)
		GO TOP
		VCUSTOMER_ID = UPPER(ITVALUE(VSTRINGTEXTLOCALNEW,NCOUNT,VSEEK))
		SEEK VCUSTOMER_ID
		IF  .NOT. EOF() AND FOUND() AND  .NOT. EMPTY(VCUSTOMER_ID)
			IF ALLTRIM(&VKEY.) = ALLTRIM(vcustomer_id) .AND. AT(VPLDELIMITER+vcustomer_id+VPLDELIMITER,VSTRINGTEXTLOCALold+VSTRINGTEXTLOCAL)=0
				VPLNOOFREC = VPLNOOFREC + 1
				VSTRINGTEXTLOCAL = VSTRINGTEXTLOCAL + VPLBEGIN + VPLDELIMITER
				PAULFIELD = SUBSTR(VSELECTION,1,AT(',',VSELECTION) - 1)
				if vartype(&paulFIELD.)<>"U"
					VFIELD_TYPE=vartype(alltrim(&paulFIELD.))
					VFIELD_VALUE=&paulFIELD.
					VFIELD_VALUE = ITSQLOCHAR(VFIELD_VALUE)
					VSTRINGTEXTLOCAL = VSTRINGTEXTLOCAL + VFIELD_VALUE + VPLDELIMITER
				ENDIF
				IF OCCURS(',',VSELECTION) > 1
					FOR GNCOUNT = 1 TO OCCURS(',',VSELECTION) - 1
						if vartype(&paulFIELD.)<>"U"
							PAULFIELD =  ;
								SUBSTR(VSELECTION,AT(',',VSELECTION,GNCOUNT) + 1,AT(',',VSELECTION,GNCOUNT + 1) - AT(',',VSELECTION,GNCOUNT) - 1)
							VFIELD_TYPE=vartype(&paulFIELD.)
							VFIELD_VALUE=&paulFIELD.
							VFIELD_VALUE = ITSQLOCHAR(VFIELD_VALUE)
							VSTRINGTEXTLOCAL = VSTRINGTEXTLOCAL + VFIELD_VALUE + VPLDELIMITER
						ENDIF
					ENDFOR
				ENDIF
				VSTRINGTEXTLOCAL = VSTRINGTEXTLOCAL + VPLEND
			ENDIF
		ENDIF
		SELECT (LCGLOBALITEMALIAS)
		SKIP
	ENDDO
	VBEGINSTRING =  ;
		VPLBEGIN + VPLDELIMITER + ALLTRIM(STR(VPLNOOFREC + VRECCOUNTOLD)) + VPLDELIMITER +  ;
		ALLTRIM(STR(VPLNOOFFIELD)) + VPLDELIMITER + ALLTRIM(VSELECTION) +  ;
		VPLDELIMITER + VPLEND
	VBODY =  ;
		SUBSTR(VSTRINGTEXTLOCALOLD,AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXTLOCALOLD,2))
	VSTRINGTEXTLOCAL = VBEGINSTRING + VBODY + VSTRINGTEXTLOCAL
	VERROR = 'OK'
	IF USED(LCGLOBALITEMALIAS)
		USE IN (LCGLOBALITEMALIAS)
	ENDIF
	RETURN VSTRINGTEXTLOCAL
ENDPROC
*------
PROCEDURE PaulQueryInfo
	LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VERROR , VKEY_VALUE ,  ;
		VSTRINGTEXT , VSELECTION , VNOOFCHAR , LCPAGENO , LCNOPERPAGE , LCFIRSTPAGE ,  ;
		LCLASTPAGE
	LOCAL VKEY_VALUE , LNPAGENO , LNNOPERPAGE , LNPAGEGUID
	IF EMPTY(VKEY_VALUE)
		LCSTRING = 'FAIL: Invalid parameters! Please input your query key ! '
		VERROR = 'FAIL: Invalid parameters! Please input your query key ! '
		LCLASTPAGE = ''
		RETURN LCSTRING
	ENDIF
	LOCAL SELECT_WK , ERROR_WK , NEAR_WK , EXACT_WK , _ISERROR , RECNO_WK
	SET EXCLUSIVE OFF
	SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
	SET_SYSPATH =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
	VDATATYPE =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
	USER_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
	SECURITY_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
	DEPARTMENT =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
	DATETYPE =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
	SET EXCLUSIVE OFF
	SET DELETED ON
	IF EMPTY(DATETYPE)
		SET DATE TO DMY
	ELSE
		SET DATE TO &datetype.
	ENDIF
	IF AT('ON',UPPER(DATETYPE)) > 0
		SET CENTURY ON
	ENDIF
	IF AT('OFF',UPPER(DATETYPE)) > 0
		SET CENTURY OFF
	ENDIF
	DELETEON =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
	IF  .NOT. EMPTY(DELETEON)
		&DELETEON.
	ENDIF
	VGENVSTRINGTEXT = 'Y'
	VPLBEGIN = '<BR>'
	VPLEND = '</BR>'
	VPLDELIMITER = '[*|||~]'
	IF VARTYPE(VSELECTION) = 'L' .OR. VARTYPE(VSELECTION) = 'U'
		VSELECTION = ''
	ENDIF
	VSTRINGTEXT = ''
	VPLNOOFREC = 0
	VPLNOOFFIELD = 0
	VPLFIELDSTRING = ''
	VSTRINGTEXT =  ;
		VPLBEGIN + VPLDELIMITER + ALLTRIM(STR(VPLNOOFREC)) + VPLDELIMITER +  ;
		ALLTRIM(STR(VPLNOOFFIELD)) + VPLDELIMITER + ALLTRIM(VSELECTION) + VPLDELIMITER + VPLEND
	SELECT_WK = SELECT()
	ERROR_WK = ON('error')
	NEAR_WK = SET('near')
	EXACT_WK = SET('exact')
	RECNO_WK = IIF(EOF() .OR. BOF(),0,RECNO())
	_ISERROR = .F.
	SET NEAR ON
	SET EXACT OFF
	SET EXCLUSIVE OFF
	VERROR = 'OK'
	ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
	LCSTRING = ''
	LNSTARTRECORD = 0
	LNFIRSTPAGE = 0
	LCFILTER = ''
	IF VARTYPE(VKEY_VALUE) = 'C' .OR. VARTYPE(VKEY_VALUE) = 'M'
		VKEY_VALUE = UPPER(ALLTRIM(VKEY_VALUE))
		VKEY = 'UPPER(' + VKEY + ')'
	ENDIF
	IF EMPTY(LCPAGENO) .OR. VAL(LCPAGENO) <= 0
		LCPAGENO = '1'
		LNPAGENO = 1
	ELSE
		LNPAGENO = VAL(LCPAGENO)
	ENDIF
	IF EMPTY(LCNOPERPAGE)
		LCNOPERPAGE = '20'
		LNNOPERPAGE = 20
	ELSE
		LNNOPERPAGE = VAL(LCNOPERPAGE)
	ENDIF
	IF EMPTY(LCFIRSTPAGE) .OR. LNPAGENO < 20
		LCFIRSTPAGE = '1'
		LNFIRSTPAGE = 1
	ELSE
		LNFIRSTPAGE = VAL(LCFIRSTPAGE)
	ENDIF
	LCGLOBALITEMALIAS = 'Global' + ALLTRIM(SUBSTR(VDBF,RAT('\',VDBF) + 1,20))
	IF USED(LCGLOBALITEMALIAS)
		USE IN (LCGLOBALITEMALIAS)
	ENDIF
	SELECT 0
	IF USED(LCGLOBALITEMALIAS)
		SELECT (LCGLOBALITEMALIAS)
	ELSE
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) > 0
			VFILEDBF = ALLTRIM(SUBSTR(VUSEDDBF,1,AT('.',VUSEDDBF) - 1)) + '.cdx'
		ELSE
			VFILEDBF = VUSEDDBF + '.cdx'
		ENDIF
		IF  .NOT. FILE(VFILEDBF)
			LCSTRING = 'FAIL: Table not found ! ' + VUSEDDBF
			VERROR = 'FAIL: Table not found !' + VUSEDDBF
			LCLASTPAGE = ''
			RETURN LCSTRING
		ENDIF
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ENDIF
		ENDIF
		use &vuseddbf. ALIAS &LcGlobalItemAlias. in 0 again shared
	ENDIF
	IF SUBSTR(VERROR,1,4) = 'FAIL'
		SELECT (SELECT_WK)
		LCSTRING = 'FAIL: Error to open the database table(s)!'
		VERROR = 'FAIL: Error to open the database table(s)!'
		LCLASTPAGE = ''
		RETURN LCSTRING
	ENDIF
	NPAGECOUNT = 0
	LNSTARTRECORD = (LNPAGENO - 1) * LNNOPERPAGE + 1
	SELECT (LCGLOBALITEMALIAS)
	IF VGENVSTRINGTEXT = 'Y'
		VSTRINGTEXT = ''
		VPLNOOFREC = 0
		VPLNOOFFIELD = FCOUNT()
		VPLFIELDSTRING = ''
		IF EMPTY(VSELECTION) .OR. ALLTRIM(VSELECTION) = '*'
			FOR GNCOUNT = 1 TO FCOUNT()
				PAULFIELD = FIELD(GNCOUNT)
				VPLFIELDSTRING = VPLFIELDSTRING + ALLTRIM(PAULFIELD) + ','
			ENDFOR
			VSELECTION = VPLFIELDSTRING
		ELSE
			VSELECTION = VSELECTION + ','
		ENDIF
		VPLNOOFFIELD = OCCURS(',',VSELECTION)
	ENDIF
	VPLNOOFREC = 0
	Set Order To &VSEEK.
	GO TOP
	SEEK VKEY_VALUE
	IF FOUND()
		IF LNPAGENO > 1
			SKIP LNSTARTRECORD - 1
		ENDIF
		If !Like(VKEY_VALUE+"*",&VKEY.)
			LCSTRING = 'FAIL: No more record found !'
			VERROR = 'FAIL: No more record found !'
			SELECT (SELECT_WK)
			LCLASTPAGE = ''
			RETURN LCSTRING
		ENDIF
		NCOUNT = 0
		IF VAL(LCPAGENO) - 1 < LNFIRSTPAGE AND LNFIRSTPAGE > 20
			LCFIRSTPAGE = ALLTRIM(STR(LNFIRSTPAGE - 20))
			LNFIRSTPAGE = LNFIRSTPAGE - 20
		ENDIF
		IF VAL(LCPAGENO) + 1 > LNFIRSTPAGE + 20
			LCFIRSTPAGE = ALLTRIM(STR(LNFIRSTPAGE + 20))
			LNFIRSTPAGE = LNFIRSTPAGE + 20
		ENDIF
		IF LNPAGENO > 1 AND LNPAGENO > LNFIRSTPAGE
			VPAGECOUNTER = 0
			DO WHILE LNFIRSTPAGE + VPAGECOUNTER < LNPAGENO
				VPAGECOUNTER = VPAGECOUNTER + 1
				LCLASTPAGE = ALLTRIM(STR(LNFIRSTPAGE + VPAGECOUNTER))
			ENDDO
		ENDIF
		NPAGECOUNT = 1
		Scan rest while !Eof() and Like(VKEY_VALUE+"*",&VKEY.)
			NCOUNT = NCOUNT + 1
			IF NCOUNT <= LNNOPERPAGE
				IF NCOUNT > 0
					LCSTRING = LCSTRING + PAULADDMEMO(LCDESC)
					VPLNOOFREC = VPLNOOFREC + 1
					IF VGENVSTRINGTEXT = 'Y'
						VSTRINGTEXT = VSTRINGTEXT + VPLBEGIN + VPLDELIMITER
						PAULFIELD = SUBSTR(VSELECTION,1,AT(',',VSELECTION) - 1)
						if vartype(&paulFIELD.)<>"U"
							VFIELD_TYPE=vartype(alltrim(&paulFIELD.))
							VFIELD_VALUE=&paulFIELD.
							VFIELD_VALUE = ITSQLOCHAR(VFIELD_VALUE)
							VSTRINGTEXT = VSTRINGTEXT + VFIELD_VALUE + VPLDELIMITER
						ENDIF
						IF OCCURS(',',VSELECTION) > 1
							FOR GNCOUNT = 1 TO OCCURS(',',VSELECTION) - 1
								if vartype(&paulFIELD.)<>"U"
									PAULFIELD =  ;
										SUBSTR(VSELECTION,AT(',',VSELECTION,GNCOUNT) + 1,AT(',',VSELECTION,GNCOUNT + 1) - AT(',',VSELECTION,GNCOUNT) - 1)
									VFIELD_TYPE=vartype(&paulFIELD.)
									VFIELD_VALUE=&paulFIELD.
									VFIELD_VALUE = ITSQLOCHAR(VFIELD_VALUE)
									VSTRINGTEXT = VSTRINGTEXT + VFIELD_VALUE + VPLDELIMITER
								ENDIF
							ENDFOR
						ENDIF
						VBEGINSTRING =  ;
							VPLBEGIN + VPLDELIMITER + ALLTRIM(STR(VPLNOOFREC)) + VPLDELIMITER +  ;
							ALLTRIM(STR(VPLNOOFFIELD)) + VPLDELIMITER + ALLTRIM(VSELECTION) + VPLDELIMITER + VPLEND
						VSTRINGTEXT = VSTRINGTEXT + VPLEND
					ENDIF
				ENDIF
			ENDIF
			IF nCount>(LnFirstPage+20-LnPageno)*LnNoPerPage .or. !Like(VKEY_VALUE+"*",&VKEY.)
				EXIT
			ELSE
				IF (NCOUNT - 1) / LNNOPERPAGE = INT((NCOUNT - 1) / LNNOPERPAGE)
					VADD20 = LNPAGENO - 1
					IF VADD20 + INT(NCOUNT / LNNOPERPAGE) = LNPAGENO - 1
						LCLASTPAGE = ALLTRIM(STR(VADD20 + INT(NCOUNT / LNNOPERPAGE) + 1))
					ELSE
						LCLASTPAGE = ALLTRIM(STR(VADD20 + INT(NCOUNT / LNNOPERPAGE) + 1))
					ENDIF
					LcPageGuid = LcPageGuid + IIF(!EMPTY(LcPageGuid),"&nbsp;","")+vstring
					NPAGECOUNT = NPAGECOUNT + 1
				ENDIF
			ENDIF
		ENDSCAN
	ELSE
		LCSTRING = 'FAIL: No record found !' + VKEY_VALUE
		VERROR = 'FAIL: No record found !'
		SELECT (SELECT_WK)
	ENDIF
	IF USED(LCGLOBALITEMALIAS)
		USE IN (LCGLOBALITEMALIAS)
	ENDIF
	SELECT (SELECT_WK)
	IF VGENVSTRINGTEXT = 'Y'
		VBEGINSTRING =  ;
			VPLBEGIN + VPLDELIMITER + ALLTRIM(STR(VPLNOOFREC)) + VPLDELIMITER +  ;
			ALLTRIM(STR(VPLNOOFFIELD)) + VPLDELIMITER + ALLTRIM(VSELECTION) + VPLDELIMITER + VPLEND
		VSTRINGTEXT = VBEGINSTRING + VPLDELIMITER + VSTRINGTEXT
	ENDIF
	IF VARTYPE(INFOLINK7) <> 'U'
		IF VNOOFCHAR >= 1 AND VNOOFCHAR <= 7
			INFOLINK7( VNOOFCHAR , 2 ) = LCPAGENO
			INFOLINK7( VNOOFCHAR , 3 ) = LCFIRSTPAGE
			INFOLINK7( VNOOFCHAR , 4 ) = LCLASTPAGE
		ENDIF
	ENDIF
	RETURN VSTRINGTEXT
ENDPROC
*------
PROCEDURE itsepvalue
	LPARAMETER GCSTRING , VVALUE1 , VVALUE2 , VVALUE3 , VVALUE4 , VVALUE5 , VVALUE6 , VVALUE7
	LOCAL GCSTRING
	VERROR = 'OK'
	ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
	VVALUE1 = ''
	VVALUE2 = ''
	VVALUE3 = ''
	VVALUE4 = ''
	VVALUE5 = ''
	VVALUE6 = ''
	VVALUE7 = ''
	ID_VALUE1 = ''
	ID_VALUE2 = ''
	ID_VALUE3 = ''
	ID_VALUE4 = ''
	ID_VALUE5 = ''
	ID_VALUE6 = ''
	ID_VALUE7 = ''
	ID_VALUE21 = ''
	ID_VALUE22 = ''
	ID_VALUE23 = ''
	ID_VALUE24 = ''
	ID_VALUE25 = ''
	ID_VALUE26 = ''
	ID_VALUE27 = ''
	GCSTRING = CHRTRANC(GCSTRING,':,;\/(){}[]<>-=_|~!@#$%^&*|?' + CHR(34),SPACE(29))
	GCSTRING = CHRTRANC(GCSTRING,'+',' ')
	GCSTRING = STRTRAN(GCSTRING,'      ',' ')
	GCSTRING = STRTRAN(GCSTRING,'     ',' ')
	GCSTRING = STRTRAN(GCSTRING,'    ',' ')
	GCSTRING = STRTRAN(GCSTRING,'   ',' ')
	GCSTRING = STRTRAN(GCSTRING,'  ',' ')
	IF OCCURS(' ',GCSTRING) = 0
		VVALUE1 = GCSTRING
		ID_VALUE1 = VVALUE1
		IF VARTYPE(INFOLINK7) <> 'U'
			INFOLINK7( 1 , 1 ) = VVALUE1
		ENDIF
		VERROR = 'OK'
		RETURN VERROR
	ENDIF
	IF OCCURS(' ',GCSTRING) > 0
		I = 1
		VLAST = 0
		VOC = OCCURS(' ',GCSTRING)
		FOR I = 0 TO VOC
			VVAR = 'Vvalue' + ALLTRIM(STR(I + 1))
			IF I = 0
				VSTAR = 1
				VLAST = AT(' ',GCSTRING)
			ELSE
				VSTAR = AT(' ',GCSTRING,I)
				VLAST = AT(' ',GCSTRING,I + 1)
			ENDIF
			IF I = VOC .OR. I >= 6
				&vvar.= alltrim(substr(gcstring,vstar,50))
				EXIT
			ENDIF
			&vvar.= alltrim(substr(gcstring,vstar, vlast-vstar+1))
		ENDFOR
	ENDIF
	ID_VALUE1 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,1)))
	ID_VALUE2 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,2)))
	ID_VALUE3 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,3)))
	ID_VALUE4 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,4)))
	ID_VALUE5 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,5)))
	ID_VALUE6 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,6)))
	ID_VALUE7 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,7)))
	ID_VALUE21 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,1),70))
	ID_VALUE22 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,2),70))
	ID_VALUE23 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,3),70))
	ID_VALUE24 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,4),70))
	ID_VALUE25 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,5),70))
	ID_VALUE26 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,6),70))
	ID_VALUE27 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,7),70))
	IF I + 1 >= 7
		ID_VALUE1 =  ;
			VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' +  ;
			ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6) + ' ' + ALLTRIM(VVALUE7)
		ID_VALUE2 =  ;
			VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' +  ;
			ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6)
		ID_VALUE3 =  ;
			VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' +  ;
			ALLTRIM(VVALUE5)
		ID_VALUE4 =  ;
			VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4)
		ID_VALUE5 = VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3)
		ID_VALUE6 = VVALUE1 + ' ' + VVALUE2
		ID_VALUE7 = VVALUE1
		ID_VALUE22 =  ;
			VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5) +  ;
			' ' + ALLTRIM(VVALUE6) + ' ' + ALLTRIM(VVALUE7)
		ID_VALUE23 =  ;
			ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5) + ' ' +  ;
			ALLTRIM(VVALUE6) + ' ' + ALLTRIM(VVALUE7)
		ID_VALUE24 =  ;
			ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6) + ' ' +  ;
			ALLTRIM(VVALUE7)
		ID_VALUE25 = ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6) + ' ' + ALLTRIM(VVALUE7)
		ID_VALUE26 = VVALUE2 + ' ' + ALLTRIM(VVALUE3)
		ID_VALUE27 = VVALUE2
		ID_VALUE3 = ID_VALUE22
		ID_VALUE4 = ID_VALUE26
		ID_VALUE5 = ID_VALUE27
	ENDIF
	IF I + 1 = 6
		ID_VALUE1 =  ;
			VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' +  ;
			ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6)
		ID_VALUE2 =  ;
			VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' +  ;
			ALLTRIM(VVALUE5)
		ID_VALUE3 =  ;
			VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4)
		ID_VALUE4 = VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3)
		ID_VALUE5 = VVALUE1 + ' ' + VVALUE2
		ID_VALUE6 = VVALUE1
		ID_VALUE22 =  ;
			VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5) +  ;
			' ' + ALLTRIM(VVALUE6)
		ID_VALUE23 =  ;
			ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5) + ' ' +  ;
			ALLTRIM(VVALUE6)
		ID_VALUE24 = ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6)
		ID_VALUE25 = ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6)
		ID_VALUE26 = VVALUE2 + ' ' + ALLTRIM(VVALUE3)
		ID_VALUE27 = VVALUE2
		ID_VALUE3 = ID_VALUE22
		ID_VALUE4 = ID_VALUE23
		ID_VALUE7 = VVALUE2
	ENDIF
	IF I + 1 = 5
		ID_VALUE1 =  ;
			VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' +  ;
			ALLTRIM(VVALUE5)
		ID_VALUE2 =  ;
			VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4)
		ID_VALUE3 = VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3)
		ID_VALUE4 = VVALUE1 + ' ' + VVALUE2
		ID_VALUE5 = VVALUE1
		ID_VALUE22 =  ;
			VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5)
		ID_VALUE23 = ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5)
		ID_VALUE24 = ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5)
		ID_VALUE25 = ALLTRIM(VVALUE5)
		ID_VALUE3 = ID_VALUE22
		ID_VALUE6 = ID_VALUE23
		ID_VALUE7 = ID_VALUE24
	ENDIF
	IF I + 1 = 4
		ID_VALUE1 =  ;
			VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4)
		ID_VALUE2 = VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3)
		ID_VALUE3 = VVALUE1 + ' ' + VVALUE2
		ID_VALUE4 = VVALUE1
		ID_VALUE22 = VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4)
		ID_VALUE23 = ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4)
		ID_VALUE24 = ALLTRIM(VVALUE3)
		ID_VALUE5 = ID_VALUE22
		ID_VALUE6 = ID_VALUE23
		ID_VALUE7 = ID_VALUE24
	ENDIF
	IF I + 1 = 3
		ID_VALUE1 = VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3)
		ID_VALUE2 = VVALUE1 + ' ' + VVALUE2
		ID_VALUE3 = VVALUE1
		ID_VALUE22 = VVALUE2 + ' ' + ALLTRIM(VVALUE3)
		ID_VALUE23 = ALLTRIM(VVALUE3)
		ID_VALUE4 = ID_VALUE22
		ID_VALUE5 = ID_VALUE23
		ID_VALUE6 = VVALUE2
	ENDIF
	IF I + 1 = 2
		ID_VALUE1 = VVALUE1 + ' ' + VVALUE2
		ID_VALUE2 = VVALUE1
		ID_VALUE22 = VVALUE2
		ID_VALUE3 = ID_VALUE22
	ENDIF
	IF UPPER(ID_VALUE7) == UPPER(ID_VALUE6) .OR. UPPER(ID_VALUE7) == UPPER(ID_VALUE5) .OR.  ;
			UPPER(ID_VALUE7) == UPPER(ID_VALUE4) .OR. UPPER(ID_VALUE7) == UPPER(ID_VALUE3) .OR.  ;
			UPPER(ID_VALUE7) == UPPER(ID_VALUE2) .OR.  ;
			UPPER(ID_VALUE7) == UPPER(ID_VALUE1)
		ID_VALUE7 = ''
	ENDIF
	IF UPPER(ID_VALUE6) == UPPER(ID_VALUE5) .OR. UPPER(ID_VALUE6) == UPPER(ID_VALUE4) .OR.  ;
			UPPER(ID_VALUE6) == UPPER(ID_VALUE3) .OR. UPPER(ID_VALUE6) == UPPER(ID_VALUE2) .OR.  ;
			UPPER(ID_VALUE6) == UPPER(ID_VALUE1)
		ID_VALUE6 = ''
	ENDIF
	IF UPPER(ID_VALUE5) == UPPER(ID_VALUE4) .OR. UPPER(ID_VALUE5) == UPPER(ID_VALUE3) .OR.  ;
			UPPER(ID_VALUE5) == UPPER(ID_VALUE2) .OR. UPPER(ID_VALUE5) == UPPER(ID_VALUE1)
		ID_VALUE5 = ''
	ENDIF
	IF UPPER(ID_VALUE4) == UPPER(ID_VALUE3) .OR. UPPER(ID_VALUE4) == UPPER(ID_VALUE2) .OR.  ;
			UPPER(ID_VALUE4) == UPPER(ID_VALUE1)
		ID_VALUE4 = ''
	ENDIF
	IF UPPER(ID_VALUE3) == UPPER(ID_VALUE2) .OR. UPPER(ID_VALUE3) == UPPER(ID_VALUE1)
		ID_VALUE3 = ''
	ENDIF
	IF UPPER(ID_VALUE2) == UPPER(ID_VALUE1)
		ID_VALUE2 = ''
	ENDIF
	VVALUE1 = ID_VALUE1
	VVALUE2 = ID_VALUE2
	VVALUE3 = ID_VALUE3
	VVALUE4 = ID_VALUE4
	VVALUE5 = ID_VALUE5
	VVALUE6 = ID_VALUE6
	VVALUE7 = ID_VALUE7
	IF VARTYPE(INFOLINK7) <> 'U'
		INFOLINK7( 1 , 1 ) = VVALUE1
		INFOLINK7( 2 , 1 ) = VVALUE2
		INFOLINK7( 3 , 1 ) = VVALUE3
		INFOLINK7( 4 , 1 ) = VVALUE4
		INFOLINK7( 5 , 1 ) = VVALUE5
		INFOLINK7( 6 , 1 ) = VVALUE6
		INFOLINK7( 7 , 1 ) = VVALUE7
	ENDIF
	RETURN VERROR
ENDPROC
*------
PROCEDURE itgen_no2
	LPARAMETER SYS_SETTINGS , TSHEADER , TSFORMULA , TSMASTER , TSMASTERKEY
	LOCAL SELECT_WK , TSDOC_NO , GENNO , PLTEMPONE , PLTEMPTWO , TSAUTOGEN , LCOLDEXPR
	NOCOUNTBACK = .T.
	LCOLDEXPR = ''
	IF EMPTY(SYS_SETTINGS)
		RETURN 'FAIL - sys_settings is empty!'
	ENDIF
	SET EXCLUSIVE OFF
	SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
	SET_SYSPATH =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
	VDATATYPE =  ;
		SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
	USER_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
	SECURITY_ID =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
	DEPARTMENT =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
	DATETYPE =  ;
		UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
	IF EMPTY(DATETYPE)
		SET DATE TO DMY
	ELSE
		SET DATE TO &datetype.
	ENDIF
	IF AT('ON',UPPER(DATETYPE)) > 0
		SET CENTURY ON
	ENDIF
	IF AT('OFF',UPPER(DATETYPE)) > 0
		SET CENTURY OFF
	ENDIF
	IF USED('TMPDOCCHECK')
		USE IN TMPDOCCHECK
	ENDIF
	SELECT_WK = SELECT()
	TSDOC_NO = ''
	SELECT 0
	TSMASTER = SET_DATAPATH + ALLTRIM(TSMASTER)
	IF AT('.',TSMASTER) = 0
		IF FILE(TSMASTER + '.wsd')
			TSMASTER = TSMASTER + '.wsd'
		ENDIF
	ENDIF
	USE &tsmaster. alias TMPDOCCHECK order &tsMASTERKEY. in 0 again shared
	SET DECIMALS TO 6
	TSCOUNTER = 1
	TSRANDNO = ALLTRIM(STR(INT(RAND() * SECONDS())))
	TSYEAR = RIGHT(ALLTRIM(STR(YEAR(DATE()))),2)
	TSMONTH = RIGHT('0' + ALLTRIM(STR(MONTH(DATE()))),2)
	TSDAY = RIGHT('0' + ALLTRIM(STR(DAY(DATE()))),2)
	tsDOC_NO=ALLTRIM(tsHeader)+&tsFORMULA.
	DO WHILE SEEK(TSDOC_NO,'TMPDOCCHECK',TSMASTERKEY)
		TSRANDNO = ALLTRIM(STR(INT(RAND() * SECONDS())))
		tsDOC_NO=ALLTRIM(tsHeader)+&tsFORMULA.
		TSCOUNTER = TSCOUNTER + 1
		IF TSCOUNTER > 99999
			EXIT
		ENDIF
	ENDDO
	GO IN TMPDOCCHECK BOTTOM
	IF USED('TMPDOCCHECK')
		USE IN TMPDOCCHECK
	ENDIF
	SET DELETED ON
	SELECT (SELECT_WK)
	RETURN TSDOC_NO
ENDPROC
*------
PROCEDURE ITADDMEMO
	LPARAMETER PLMEMO , PLID_VALUE , PLTYPE , PLSUBITEM , VNAME , VEMAIL , VPASSWORD , VID ,  ;
		USER_NAME , VFIRST_NAME , VLAST_NAME , VMRMS , VEMAIL1 , VEMAIL2 ,  ;
		VNAME2
	LOCAL VPAUL , VCOUNTER , VPLREPL , VPLVAR , VPAULOK
	VPAUL = PLMEMO
	VPAULOK = PLMEMO
	VCOUNTER = AT('[<',VPAUL)
	VLOOPNO = 1
	IF VCOUNTER > 0
		DO WHILE VLOOPNO <= OCCURS('[<',VPAUL)
			VPLVAR =  ;
				SUBSTR(VPAUL,AT('[<',VPAUL,VLOOPNO) + 2,AT('>]',VPAUL,VLOOPNO) - AT('[<',VPAUL,VLOOPNO) - 2)
			VPLREPL =  ;
				SUBSTR(VPAUL,AT('[<',VPAUL,VLOOPNO),AT('>]',VPAUL,VLOOPNO) - AT('[<',VPAUL,VLOOPNO) + 2)
			APPEND_YN = .F.
			IF EMPTY(VPLVAR)
				VPAULOK = STRTRAN(VPAULOK,VPLREPL,'')
			ELSE
				vpaulok=STRTRAN(vpaulok,vplrepl,&vplvar.)
			ENDIF
			VLOOPNO = VLOOPNO + 1
		ENDDO
	ENDIF
	RETURN VPAULOK
ENDPROC
*------
PROCEDURE LcIsString
	LPARAMETER CSTRING , LFORCE
	IF LFORCE
		IF VARTYPE(CSTRING) <> 'C'
			RETURN .F.
		ELSE
			RETURN .T.
		ENDIF
	ELSE
		IF VARTYPE(CSTRING) <> 'C' .OR. EMPTY(ALLTRIM(CSTRING))
			RETURN .F.
		ELSE
			RETURN .T.
		ENDIF
	ENDIF
ENDPROC
*------
PROCEDURE LcSubstr
	LPARAMETER SUBSTR_VALUE , SUBSTR_PLUS , SUBSTR_INDEX , SUBSTR_TRIM
	IF VARTYPE(SUBSTR_VALUE) <> 'C' .OR. EMPTY(SUBSTR_VALUE)
		RETURN ''
	ENDIF
	IF VARTYPE(SUBSTR_TRIM) <> 'L'
		SUBSTR_TRIM = .F.
	ENDIF
	IF VARTYPE(SUBSTR_PLUS) <> 'C' .OR. ASC(SUBSTR_PLUS) = 0
		SUBSTR_PLUS = ','
	ENDIF
	IF VARTYPE(SUBSTR_INDEX) <> 'N'
		SUBSTR_INDEX = 0
	ELSE
		IF SUBSTR_INDEX < 0
			SUBSTR_INDEX = 0
		ENDIF
	ENDIF
	IF  .NOT. (SUBSTR_PLUS $ SUBSTR_VALUE) .OR. SUBSTR_INDEX = 0
		IF SUBSTR_TRIM
			RETURN ALLTRIM(SUBSTR_VALUE)
		ELSE
			RETURN SUBSTR_VALUE
		ENDIF
	ENDIF
	SUBSTR_VALUE = STRTRAN(SUBSTR_VALUE,SUBSTR_PLUS,CHR(13) + CHR(10))
	IF ALINES(SUBSTR_ARRAY,SUBSTR_VALUE) < 2
		IF SUBSTR_TRIM
			RETURN ALLTRIM(SUBSTR_VALUE)
		ELSE
			RETURN SUBSTR_VALUE
		ENDIF
	ELSE
		IF ALEN(SUBSTR_ARRAY) >= SUBSTR_INDEX
			IF SUBSTR_TRIM
				RETURN ALLTRIM(SUBSTR_ARRAY(SUBSTR_INDEX))
			ELSE
				RETURN SUBSTR_ARRAY(SUBSTR_INDEX)
			ENDIF
		ELSE
			IF SUBSTR_TRIM
				RETURN ALLTRIM(SUBSTR_ARRAY(ALEN(SUBSTR_ARRAY)))
			ELSE
				RETURN SUBSTR_ARRAY(ALEN(SUBSTR_ARRAY))
			ENDIF
		ENDIF
	ENDIF
ENDPROC
*------
DEFINE CLASS itDB AS Custom OLEPUBLIC

	PROCEDURE ReadField
		LPARAMETER LCFORMVARS , LCINIFILE , LNRELEASEFLAG , LCFILED
		IF EMPTY(LCFILED)
			RETURN 'Invalid parameters!		'
		ENDIF
		SELECT 0
		LCDBF = ''
		LCALIAS = ''
		LCDBF = READINIFILE('vdllconfig.ini','DBFFILE','FILENAME')
		LCALIAS = READINIFILE('vdllconfig.ini','DBFFILE','FILEALIAS')
		IF EMPTY(LCDBF) .OR.  .NOT. FILE(LCDBF)
			RETURN 'DBF FILE NAME INVALID!'
		ENDIF
		IF EMPTY(LCALIAS)
			LCALIAS = LCDBF
		ENDIF
		LSTRING = ''
		IF USED(LCALIAS)
			SELECT (LCALIAS)
			LSTRING = 'DBF has been opend ' + CHR(13) + CHR(10)
		ELSE
			USE SHARED (LCDBF) AGAIN ALIAS (LCALIAS)
		ENDIF
		GO TOP
		SCAN REST WHILE  .NOT. EOF()
			LSTRING = '<pre>' + LSTRING + ALLTRIM(EVALUATE(LCFILED)) + '</pre><br>'
		ENDSCAN
		RETURN CURDIR() + '<br>' + LSTRING
	ENDPROC
	*------

	PROCEDURE ITSQLSendMail
		LPARAMETER CTO , CCC , CBCC , CSUBJECT , CBODY , CATTACHMENT , CUSERNAME , CPASSWORD ,  ;
			CSMTP , CFROM , CCHARSET , VERROR
		VERROR = 'OK'
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		IF  .NOT. LCISSTRING(CTO) AND  .NOT. LCISSTRING(CCC)
			VERROR = 'FAIL: Please sure the recipient or cc not empty .'
			RETURN VERROR
		ENDIF
		IF  .NOT. LCISSTRING(CUSERNAME)
			VERROR = 'FAIL: Please sure the smtp username not empty.'
			RETURN VERROR
		ENDIF
		IF  .NOT. LCISSTRING(CPASSWORD)
			VERROR = 'FAIL: Please sure the smtp password not empty.'
			RETURN VERROR
		ENDIF
		IF  .NOT. LCISSTRING(CSMTP)
			RETURN 'FAIL: Please sure the smtp is not empty.'
		ENDIF
		IF  .NOT. LCISSTRING(CFROM)
			CFROM = CUSERNAME + '@' + SUBSTR(CSMTP,AT('.',CSMTP) + 1)
		ENDIF
		CCHARSET = UPPER(ALLTRIM(CCHARSET))
		OJMAIL = CREATEOBJECT('Jmail.Message')
		OJMAIL.LOGGING = .T.
		OJMAIL.SILENT = .T.
		OJMAIL.FROM = CFROM
		IF LCISSTRING(CTO)
			FOR NTAG = 1 TO OCCURS(';',CTO) + 1
				IF ',' $ LCSUBSTR(CTO,';',NTAG)
					OJMAIL.ADDRECIPIENT(LCSUBSTR(LCSUBSTR(CTO,';',NTAG),',',1),LCSUBSTR(LCSUBSTR(CTO,';',NTAG),',',2))
				ELSE
					OJMAIL.ADDRECIPIENT(LCSUBSTR(CTO,';',NTAG))
				ENDIF
			ENDFOR
		ENDIF
		IF LCISSTRING(CCC)
			FOR NTAG = 1 TO OCCURS(';',CCC) + 1
				IF ',' $ LCSUBSTR(CTO,';',NTAG)
					OJMAIL.ADDRECIPIENTCC(LCSUBSTR(LCSUBSTR(CCC,';',NTAG),',',1),LCSUBSTR(LCSUBSTR(CCC,';',NTAG),',',2))
				ELSE
					OJMAIL.ADDRECIPIENTCC(LCSUBSTR(CCC,';',NTAG))
				ENDIF
			ENDFOR
		ENDIF
		IF LCISSTRING(CBCC)
			FOR NTAG = 1 TO OCCURS(';',CBCC) + 1
				IF ',' $ LCSUBSTR(CTO,';',NTAG)
					OJMAIL.ADDRECIPIENTBCC(LCSUBSTR(LCSUBSTR(CBCC,';',NTAG),',',1),LCSUBSTR(LCSUBSTR(CBCC,';',NTAG),',',2))
				ELSE
					OJMAIL.ADDRECIPIENTBCC(LCSUBSTR(CBCC,';',NTAG))
				ENDIF
			ENDFOR
		ENDIF
		OJMAIL.SUBJECT = IIF(LCISSTRING(CSUBJECT),CSUBJECT,'')
		OJMAIL.BODY = IIF(LCISSTRING(CBODY),CBODY,'')
		IF LCISSTRING(CATTACHMENT)
			FOR NTAG = 1 TO OCCURS(';',CATTACHMENT) + 1
				OJMAIL.ADDATTACHMENT(LCSUBSTR(CATTACHMENT,';',NTAG))
			ENDFOR
		ENDIF
		OJMAIL.CHARSET = CCHARSET
		IF OJMAIL.SEND(CUSERNAME + ':' + CPASSWORD + '@' + CSMTP)
			RETURN 'OK'
		ELSE
			RETURN 'FAIL: ' + OJMAIL.ERRORMESSAGE
		ENDIF
	ENDPROC
	*------

	PROCEDURE QueryInfo
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VERROR , VKEY_VALUE , LCDESC ,  ;
			LCPAGEGUID , LCPAGENO , LCNOPERPAGE , LCFIRSTPAGE , VSTRINGTEXT ,  ;
			VSELECTION , LCLASTPAGE , LCLANG , LCCOUNTRY , LCBUSINESS , LCMARKET ,  ;
			LCCONTRACT
		LOCAL VKEY_VALUE , LNPAGENO , LNNOPERPAGE , LNPAGEGUID
		IF YEAR(DATE()) > 2013
			IF  .NOT. FILE('\itrader\pauldoc.doc')
				RETURN 'FAIL: File Server configuration problem,pls call iTrader for help !'
			ENDIF
		ENDIF
		IF EMPTY(SYS_SETTINGS)
			LCLASTPAGE = ''
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		IF EMPTY(VKEY_VALUE)
			LCSTRING = 'FAIL: Invalid parameters! Please input your query key ! '
			VERROR = 'FAIL: Invalid parameters! Please input your query key ! '
			LCLASTPAGE = ''
			RETURN LCSTRING
		ENDIF
		LOCAL SELECT_WK , ERROR_WK , NEAR_WK , EXACT_WK , _ISERROR , RECNO_WK
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		SET EXCLUSIVE OFF
		SET DELETED ON
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		IF AT('ON',UPPER(DATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(DATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		IF  .NOT. EMPTY(DELETEON)
			&DELETEON.
		ENDIF
		VGENVSTRINGTEXT = 'N'
		IF VSTRINGTEXT = 'Y' .OR.  .NOT. EMPTY(VSTRINGTEXT)
			VGENVSTRINGTEXT = 'Y'
		ENDIF
		VPLBEGIN = '<BR>'
		VPLEND = '</BR>'
		VPLDELIMITER = '[*|||~]'
		IF VARTYPE(VSELECTION) = 'L' .OR. VARTYPE(VSELECTION) = 'U'
			VSELECTION = ''
		ENDIF
		VSTRINGTEXT = ''
		VPLNOOFREC = 0
		VPLNOOFFIELD = 0
		VPLFIELDSTRING = ''
		VSTRINGTEXT =  ;
			VPLBEGIN + VPLDELIMITER + ALLTRIM(STR(VPLNOOFREC)) + VPLDELIMITER +  ;
			ALLTRIM(STR(VPLNOOFFIELD)) + VPLDELIMITER + ALLTRIM(VSELECTION) + VPLDELIMITER + VPLEND
		SELECT_WK = SELECT()
		ERROR_WK = ON('error')
		NEAR_WK = SET('near')
		EXACT_WK = SET('exact')
		RECNO_WK = IIF(EOF() .OR. BOF(),0,RECNO())
		_ISERROR = .F.
		SET NEAR ON
		SET EXACT OFF
		SET EXCLUSIVE OFF
		VERROR = 'OK'
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		LCSTRING = ''
		IF EMPTY(LCPAGEGUID)
			LNPAGEGUID = 'index.asp?cQueryID='
		ELSE
			LNPAGEGUID = LCPAGEGUID
			LCPAGEGUID = ''
		ENDIF
		LNSTARTRECORD = 0
		LNFIRSTPAGE = 0
		LCFILTER = ''
		IF EMPTY(LCLANG)
			LCLANG = 'ALL'
		ELSE
			LcFilter=LcFilter+"&cLang="+LcLang
		ENDIF
		IF EMPTY(LCCOUNTRY)
			LCCOUNTRY = 'ALL'
		ELSE
			LcFilter=LcFilter+"&cCountry="+Lccountry
		ENDIF
		IF EMPTY(LCBUSINESS)
			LCBUSINESS = 'ALL'
		ELSE
			LcFilter=LcFilter+"&cBusiness="+LcBusiness
		ENDIF
		IF EMPTY(LCMARKET)
			LCMARKET = 'ALL'
		ELSE
			LcFilter=LcFilter+"&cMarket="+LcMarket
		ENDIF
		IF EMPTY(LCCONTRACT)
			LCCONTRACT = 'ALL'
		ELSE
			LcFilter=LcFilter+"&cContract="+LcContract
		ENDIF
		IF VARTYPE(VKEY_VALUE) = 'C' .OR. VARTYPE(VKEY_VALUE) = 'M'
			VKEY_VALUE = UPPER(ALLTRIM(VKEY_VALUE))
			VKEY = 'UPPER(' + VKEY + ')'
		ENDIF
		IF EMPTY(LCPAGENO) .OR. VAL(LCPAGENO) <= 0
			LCPAGENO = '1'
			LNPAGENO = 1
		ELSE
			LNPAGENO = VAL(LCPAGENO)
		ENDIF
		IF EMPTY(LCNOPERPAGE)
			LCNOPERPAGE = '20'
			LNNOPERPAGE = 20
		ELSE
			LNNOPERPAGE = VAL(LCNOPERPAGE)
		ENDIF
		IF EMPTY(LCFIRSTPAGE) .OR. LNPAGENO < 20
			LCFIRSTPAGE = '1'
			LNFIRSTPAGE = 1
		ELSE
			LNFIRSTPAGE = VAL(LCFIRSTPAGE)
		ENDIF
		LCGLOBALITEMALIAS = 'Global' + ALLTRIM(SUBSTR(VDBF,RAT('\',VDBF) + 1,20))
		IF USED(LCGLOBALITEMALIAS)
			USE IN (LCGLOBALITEMALIAS)
		ENDIF
		SELECT 0
		IF USED(LCGLOBALITEMALIAS)
			SELECT (LCGLOBALITEMALIAS)
		ELSE
			VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
			IF AT('.',VUSEDDBF) > 0
				VFILEDBF = ALLTRIM(SUBSTR(VUSEDDBF,1,AT('.',VUSEDDBF) - 1)) + '.cdx'
			ELSE
				VFILEDBF = VUSEDDBF + '.CDX'
			ENDIF
			IF  .NOT. FILE(VFILEDBF)
				LCSTRING = 'FAIL: Table not found ! ' + VUSEDDBF
				VERROR = 'FAIL: Table not found !' + VUSEDDBF
				LCLASTPAGE = ''
				RETURN LCSTRING
			ENDIF
			IF AT('.',VUSEDDBF) = 0
				IF FILE(VUSEDDBF + '.wsd')
					VUSEDDBF = VUSEDDBF + '.wsd'
				ENDIF
			ENDIF
			use &vuseddbf. ALIAS &LcGlobalItemAlias. in 0 again shared
		ENDIF
		IF SUBSTR(VERROR,1,4) = 'FAIL'
			SELECT (SELECT_WK)
			LCSTRING = 'FAIL: Error to open the database table(s)!'
			VERROR = 'FAIL: Error to open the database table(s)!'
			LCLASTPAGE = ''
			RETURN LCSTRING
		ENDIF
		NPAGECOUNT = 0
		LNSTARTRECORD = (LNPAGENO - 1) * LNNOPERPAGE + 1
		SELECT (LCGLOBALITEMALIAS)
		IF VGENVSTRINGTEXT = 'Y'
			VSTRINGTEXT = ''
			VPLNOOFREC = 0
			VPLNOOFFIELD = FCOUNT()
			VPLFIELDSTRING = ''
			IF EMPTY(VSELECTION) .OR. ALLTRIM(VSELECTION) = '*'
				FOR GNCOUNT = 1 TO FCOUNT()
					PAULFIELD = FIELD(GNCOUNT)
					VPLFIELDSTRING = VPLFIELDSTRING + ALLTRIM(PAULFIELD) + ','
				ENDFOR
				VSELECTION = VPLFIELDSTRING
			ELSE
				VSELECTION = VSELECTION + ','
			ENDIF
			VPLNOOFFIELD = OCCURS(',',VSELECTION)
		ENDIF
		VPLNOOFREC = 0
		Set Order To &VSEEK.
		GO TOP
		SEEK VKEY_VALUE
		IF FOUND()
			IF LNPAGENO > 1
				SKIP LNSTARTRECORD - 1
			ENDIF
			If !Like(VKEY_VALUE+"*",&VKEY.)
				LCSTRING = 'FAIL: No more record found !'
				VERROR = 'FAIL: No more record found !'
				SELECT (SELECT_WK)
				LCLASTPAGE = ''
				IF USED(LCGLOBALITEMALIAS)
					USE IN (LCGLOBALITEMALIAS)
				ENDIF
				RETURN LCSTRING
			ENDIF
			NCOUNT = 0
			IF VAL(LCPAGENO) - 1 < LNFIRSTPAGE AND LNFIRSTPAGE > 20
				LCFIRSTPAGE = ALLTRIM(STR(LNFIRSTPAGE - 20))
				LNFIRSTPAGE = LNFIRSTPAGE - 20
			ENDIF
			IF VAL(LCPAGENO) + 1 > LNFIRSTPAGE + 20
				LCFIRSTPAGE = ALLTRIM(STR(LNFIRSTPAGE + 20))
				LNFIRSTPAGE = LNFIRSTPAGE + 20
			ENDIF
			IF (LNFIRSTPAGE >= 20 AND VAL(LCPAGENO) > 1) .OR.  ;
					VAL(LCPAGENO) / 20 = INT(VAL(LCPAGENO) / 20)
				vstring="<a href="+chr(34)+LnPageGuid+VKEY_VALUE+"&cPageNo="+alltrim(str(LnFirstPage-20))+"&cPageRecno="+LcNoPerPage+"&cFirstPage="+alltrim(str(LnFirstPage-20))+LcFilter+chr(34)+"&nbsp;&nbsp;"+"><<</a>"
				LcPageGuid=vstring + "&nbsp;"+ LcPageGuid
			ENDIF
			IF VAL(LCPAGENO) > 1
				vstring="<a href="+chr(34)+LnPageGuid+VKEY_VALUE+"&cPageNo="+alltrim(str(val(LcPageNo)-1))+"&cPageRecno="+LcNoPerPage+"&cFirstPage="+alltrim(str(LnFirstPage))+LcFilter+chr(34)+"&nbsp;&nbsp;"+"><b>Prev</b></a>&nbsp;"
				LcPageGuid = LcPageGuid + "&nbsp;"+vstring
			ENDIF
			IF LNPAGENO > 1 AND LNPAGENO > LNFIRSTPAGE
				VPAGECOUNTER = 0
				DO WHILE LNFIRSTPAGE + VPAGECOUNTER < LNPAGENO
					vstring="<a href="+chr(34)+LnPageGuid+VKEY_VALUE+"&cPageNo="+alltrim(str(LnFirstPage+vpagecounter ) )+"&cPageRecno="+LcNoPerPage+"&cFirstPage="+LcFirstPage+LcFilter+chr(34)+"&nbsp;&nbsp;"+">"+  alltrim(str(LnFirstPage+vpagecounter )) +"</a>"
					LcPageGuid = LcPageGuid + IIF(!EMPTY(LcPageGuid),"&nbsp;","")+vstring
					VPAGECOUNTER = VPAGECOUNTER + 1
					LCLASTPAGE = ALLTRIM(STR(LNFIRSTPAGE + VPAGECOUNTER))
				ENDDO
			ENDIF
			NPAGECOUNT = 1
			Scan rest while !Eof() and Like(VKEY_VALUE+"*",&VKEY.)
				NCOUNT = NCOUNT + 1
				IF NCOUNT <= LNNOPERPAGE
					IF NCOUNT > 0
						LCSTRING = LCSTRING + PAULADDMEMO(LCDESC)
						VPLNOOFREC = VPLNOOFREC + 1
						IF VGENVSTRINGTEXT = 'Y'
							VSTRINGTEXT = VSTRINGTEXT + VPLBEGIN + VPLDELIMITER
							PAULFIELD = SUBSTR(VSELECTION,1,AT(',',VSELECTION) - 1)
							if vartype(&paulFIELD.)<>"U"
								VFIELD_TYPE=vartype(alltrim(&paulFIELD.))
								VFIELD_VALUE=&paulFIELD.
								VFIELD_VALUE = ITSQLOCHAR(VFIELD_VALUE)
								VSTRINGTEXT = VSTRINGTEXT + VFIELD_VALUE + VPLDELIMITER
							ENDIF
							IF OCCURS(',',VSELECTION) > 1
								FOR GNCOUNT = 1 TO OCCURS(',',VSELECTION) - 1
									if vartype(&paulFIELD.)<>"U"
										PAULFIELD =  ;
											SUBSTR(VSELECTION,AT(',',VSELECTION,GNCOUNT) + 1,AT(',',VSELECTION,GNCOUNT + 1) - AT(',',VSELECTION,GNCOUNT) - 1)
										VFIELD_TYPE=vartype(&paulFIELD.)
										VFIELD_VALUE=&paulFIELD.
										VFIELD_VALUE = ITSQLOCHAR(VFIELD_VALUE)
										VSTRINGTEXT = VSTRINGTEXT + VFIELD_VALUE + VPLDELIMITER
									ENDIF
								ENDFOR
							ENDIF
							VBEGINSTRING =  ;
								VPLBEGIN + VPLDELIMITER + ALLTRIM(STR(VPLNOOFREC)) + VPLDELIMITER +  ;
								ALLTRIM(STR(VPLNOOFFIELD)) + VPLDELIMITER + ALLTRIM(VSELECTION) + VPLDELIMITER + VPLEND
							VSTRINGTEXT = VSTRINGTEXT + VPLEND
						ENDIF
					ENDIF
				ENDIF
				IF nCount>(LnFirstPage+20-LnPageno)*LnNoPerPage .or. !Like(VKEY_VALUE+"*",&VKEY.)
					EXIT
				ELSE
					IF (NCOUNT - 1) / LNNOPERPAGE = INT((NCOUNT - 1) / LNNOPERPAGE)
						VADD20 = LNPAGENO - 1
						IF VADD20 + INT(NCOUNT / LNNOPERPAGE) = LNPAGENO - 1
							VSTRING =  ;
								"<font color='#FF0000'><b>" + ALLTRIM(STR(VADD20 + INT(NCOUNT / LNNOPERPAGE) + 1)) +  ;
								'</b></font>'
							LCLASTPAGE = ALLTRIM(STR(VADD20 + INT(NCOUNT / LNNOPERPAGE) + 1))
						ELSE
							vstring="<a href="+chr(34)+LnPageGuid+VKEY_VALUE+"&cPageNo="+alltrim(str(vadd20+INT(nCount/LnNoPerPage)+1))+"&cPageRecno="+LcNoPerPage+"&cFirstPage="+LcFirstPage+LcFilter+chr(34)+"&nbsp;"	+">"+  alltrim(str(vadd20+INT(nCount/LnNoPerPage)+1)) +"</a>"
							LCLASTPAGE = ALLTRIM(STR(VADD20 + INT(NCOUNT / LNNOPERPAGE) + 1))
						ENDIF
						LcPageGuid = LcPageGuid + IIF(!EMPTY(LcPageGuid),"&nbsp;","")+vstring
						NPAGECOUNT = NPAGECOUNT + 1
					ENDIF
				ENDIF
			ENDSCAN
			IF VADD20 + INT(NCOUNT / LNNOPERPAGE) > LNPAGENO .OR.  ;
					VADD20 + INT(NCOUNT / LNNOPERPAGE) + 1 - VAL(LCFIRSTPAGE) + 1 > 20
				vstring="&nbsp;<a href="+chr(34)+LnPageGuid+VKEY_VALUE+"&cPageNo="+alltrim(str(val(LcPageNo)+1))+"&cPageRecno="+LcNoPerPage+"&cFirstPage="+alltrim(str(val(LcFirstPage)))+LcFilter+chr(34)+"><b>Next</b></a>&nbsp;"
				LcPageGuid = LcPageGuid + IIF(!EMPTY(LcPageGuid),"&nbsp;","")+vstring
			ENDIF
			IF VADD20 + INT(NCOUNT / LNNOPERPAGE) + 1 - VAL(LCFIRSTPAGE) + 1 > 20
				vstring="<a href="+chr(34)+LnPageGuid+VKEY_VALUE+"&cPageNo="+alltrim(str(val(LcFirstPage)+20))+"&cPageRecno="+LcNoPerPage+"&cFirstPage="+alltrim(str(val(LcFirstPage)+20))+LcFilter+chr(34)+"&nbsp;&nbsp;"+">>></a>"
				LcPageGuid = LcPageGuid + IIF(!EMPTY(LcPageGuid),"&nbsp;","")+vstring
			ENDIF
		ELSE
			LCSTRING = 'FAIL: No record found !' + VKEY_VALUE
			VERROR = 'FAIL: No record found !'
			IF USED(LCGLOBALITEMALIAS)
				USE IN (LCGLOBALITEMALIAS)
			ENDIF
			SELECT (SELECT_WK)
		ENDIF
		IF USED(LCGLOBALITEMALIAS)
			USE IN (LCGLOBALITEMALIAS)
		ENDIF
		SELECT (SELECT_WK)
		IF VGENVSTRINGTEXT = 'Y'
			VBEGINSTRING =  ;
				VPLBEGIN + VPLDELIMITER + ALLTRIM(STR(VPLNOOFREC)) + VPLDELIMITER +  ;
				ALLTRIM(STR(VPLNOOFFIELD)) + VPLDELIMITER + ALLTRIM(VSELECTION) + VPLDELIMITER + VPLEND
			VSTRINGTEXT = VBEGINSTRING + VPLDELIMITER + VSTRINGTEXT
		ENDIF
		RETURN LCSTRING
	ENDPROC
	*------

	PROCEDURE QueryInfoSQL
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VERROR , VKEY_VALUE , VFILTER ,  ;
			VCONDITION , VDOWHILE , VGENRANDLIST , LCDESC , LCPAGEGUID ,  ;
			LCPAGENO , LCNOPERPAGE , LCFIRSTPAGE , VSTRINGTEXT , VSELECTION , LCLASTPAGE
		LOCAL VKEY_VALUE , LNPAGENO , LNNOPERPAGE , LNPAGEGUID
		IF EMPTY(SYS_SETTINGS)
			LCLASTPAGE = ''
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		IF EMPTY(VKEY_VALUE)
			LCSTRING = 'FAIL: Invalid parameters! Please input your query key ! '
			VERROR = 'FAIL: Invalid parameters! Please input your query key ! '
			LCLASTPAGE = ''
			RETURN LCSTRING
		ENDIF
		LOCAL SELECT_WK , ERROR_WK , NEAR_WK , EXACT_WK , _ISERROR , RECNO_WK
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		SET EXCLUSIVE OFF
		SET DELETED ON
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		IF AT('ON',UPPER(DATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(DATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		IF  .NOT. EMPTY(DELETEON)
			&DELETEON.
		ENDIF
		IF EMPTY(VCONDITION)
			VFILTERING = ' !EOF() '
		ELSE
			VFILTERING = ALLTRIM(VCONDITION)
		ENDIF
		IF EMPTY(VDOWHILE)
			VDOWHILE="Like(VKEY_VALUE+'*',&VKEY.)"
		ENDIF
		VGENVSTRINGTEXT = 'N'
		IF VSTRINGTEXT = 'Y' .OR.  .NOT. EMPTY(VSTRINGTEXT)
			VGENVSTRINGTEXT = 'Y'
		ENDIF
		VPLBEGIN = '<BR>'
		VPLEND = '</BR>'
		VPLDELIMITER = '[*|||~]'
		IF VARTYPE(VSELECTION) = 'L' .OR. VARTYPE(VSELECTION) = 'U'
			VSELECTION = ''
		ENDIF
		VSTRINGTEXT = ''
		VPLNOOFREC = 0
		VPLNOOFFIELD = 0
		VPLFIELDSTRING = ''
		VSTRINGTEXT =  ;
			VPLBEGIN + VPLDELIMITER + ALLTRIM(STR(VPLNOOFREC)) + VPLDELIMITER +  ;
			ALLTRIM(STR(VPLNOOFFIELD)) + VPLDELIMITER + ALLTRIM(VSELECTION) + VPLDELIMITER + VPLEND
		SELECT_WK = SELECT()
		ERROR_WK = ON('error')
		NEAR_WK = SET('near')
		EXACT_WK = SET('exact')
		RECNO_WK = IIF(EOF() .OR. BOF(),0,RECNO())
		_ISERROR = .F.
		SET NEAR ON
		SET EXACT OFF
		SET EXCLUSIVE OFF
		VERROR = 'OK'
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		LCSTRING = ''
		IF EMPTY(LCPAGEGUID)
			LNPAGEGUID = 'index.asp?cQueryID='
		ELSE
			LNPAGEGUID = LCPAGEGUID
			LCPAGEGUID = ''
		ENDIF
		LNSTARTRECORD = 0
		LNFIRSTPAGE = 0
		LCFILTER = ''
		IF  .NOT. EMPTY(VFILTER)
			LCFILTER = VFILTER
		ENDIF
		IF EMPTY(LCPAGENO) .OR. VAL(LCPAGENO) <= 0
			LCPAGENO = '1'
			LNPAGENO = 1
		ELSE
			LNPAGENO = VAL(LCPAGENO)
		ENDIF
		IF EMPTY(LCNOPERPAGE)
			LCNOPERPAGE = '20'
			LNNOPERPAGE = 20
		ELSE
			LNNOPERPAGE = VAL(LCNOPERPAGE)
		ENDIF
		IF EMPTY(LCFIRSTPAGE) .OR. LNPAGENO < 20
			LCFIRSTPAGE = '1'
			LNFIRSTPAGE = 1
		ELSE
			LNFIRSTPAGE = VAL(LCFIRSTPAGE)
		ENDIF
		LCGLOBALITEMALIAS = 'Global' + ALLTRIM(SUBSTR(VDBF,RAT('\',VDBF) + 1,20))
		IF USED(LCGLOBALITEMALIAS)
			USE IN (LCGLOBALITEMALIAS)
		ENDIF
		SELECT 0
		IF USED(LCGLOBALITEMALIAS)
			SELECT (LCGLOBALITEMALIAS)
		ELSE
			VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
			IF AT('.',VUSEDDBF) > 0
				VFILEDBF = ALLTRIM(SUBSTR(VUSEDDBF,1,AT('.',VUSEDDBF) - 1)) + '.cdx'
			ELSE
				VFILEDBF = VUSEDDBF + '.CDX'
			ENDIF
			IF  .NOT. FILE(VFILEDBF)
				LCSTRING = 'FAIL: Table not found ! ' + VUSEDDBF
				VERROR = 'FAIL:  Table not found !' + VUSEDDBF
				LCLASTPAGE = ''
				RETURN LCSTRING
			ENDIF
			IF AT('.',VUSEDDBF) = 0
				IF FILE(VUSEDDBF + '.wsd')
					VUSEDDBF = VUSEDDBF + '.wsd'
				ENDIF
			ENDIF
			use &vuseddbf. ALIAS &LcGlobalItemAlias. in 0 again shared
		ENDIF
		IF SUBSTR(VERROR,1,4) = 'FAIL'
			SELECT (SELECT_WK)
			LCSTRING = 'FAIL: Error to open the database table(s)!'
			VERROR = 'FAIL: Error to open the database table(s)!'
			LCLASTPAGE = ''
			RETURN LCSTRING
		ENDIF
		LNSTARTRECORD = (LNPAGENO - 1) * LNNOPERPAGE + 1
		SELECT (LCGLOBALITEMALIAS)
		IF (VARTYPE(&VKEY.)="C" OR VARTYPE(&VKEY.)="M") .AND. !EMPTY(VKEY)
			VKEY_VALUE = UPPER(ALLTRIM(VKEY_VALUE))
			IF  .NOT. EMPTY(VKEY)
				VKEY = 'UPPER(' + VKEY + ')'
			ENDIF
		ENDIF
		IF EMPTY(VKEY)
			VDOWHILE = '.T.'
			VFILTERING = VCONDITION
			GO TOP
		ENDIF
		NCOUNT = 0
		VADD20 = 0
		NPAGECOUNT = 0
		IF VGENVSTRINGTEXT = 'Y'
			VSTRINGTEXT = ''
			VPLNOOFREC = 0
			VPLNOOFFIELD = FCOUNT()
			VPLFIELDSTRING = ''
			IF EMPTY(VSELECTION) .OR. ALLTRIM(VSELECTION) = '*'
				FOR GNCOUNT = 1 TO FCOUNT()
					PAULFIELD = FIELD(GNCOUNT)
					VPLFIELDSTRING = VPLFIELDSTRING + ALLTRIM(PAULFIELD) + ','
				ENDFOR
				VSELECTION = VPLFIELDSTRING
			ELSE
				VSELECTION = VSELECTION + ','
			ENDIF
			VPLNOOFFIELD = OCCURS(',',VSELECTION)
		ENDIF
		VPLNOOFREC = 0
		Set Order To &VSEEK.
		GO TOP
		IF EMPTY(VKEY)
			VKEY_VALUE = ''
		ELSE
			IF VARTYPE(&VKEY.)="D" OR VARTYPE(&VKEY.)="T"
				SEEK IIF(VARTYPE(VKEY_VALUE) = 'D',VKEY_VALUE,CTOD(VKEY_VALUE))
			ENDIF
			IF VARTYPE(&VKEY.)="N" OR VARTYPE(&VKEY.)="Y"
				SEEK VAL(VKEY_VALUE)
			ENDIF
			IF VARTYPE(&VKEY.)="L"
				Seek &VKEY_VALUE.
			ENDIF
			IF VARTYPE(&VKEY.)="C" OR VARTYPE(&VKEY.)="M"
				SEEK IIF(VARTYPE(VKEY_VALUE) = 'C',VKEY_VALUE,TRANSFORM(VKEY_VALUE))
			ENDIF
		ENDIF
		If Found() .OR. &VDOWHILE.
			IF LNPAGENO > 1 AND EMPTY(VCONDITION)
				SKIP LNSTARTRECORD - 1
			ENDIF
			If !&VDOWHILE.
				LCSTRING = 'FAIL: No more record found !'
				VERROR = 'FAIL: No more record found !'
				SELECT (SELECT_WK)
				LCLASTPAGE = ''
				RETURN LCSTRING
			ENDIF
			IF VAL(LCPAGENO) - 1 < LNFIRSTPAGE AND LNFIRSTPAGE > 20
				LCFIRSTPAGE = ALLTRIM(STR(LNFIRSTPAGE - 20))
				LNFIRSTPAGE = LNFIRSTPAGE - 20
			ENDIF
			IF VAL(LCPAGENO) + 1 > LNFIRSTPAGE + 20
				LCFIRSTPAGE = ALLTRIM(STR(LNFIRSTPAGE + 20))
				LNFIRSTPAGE = LNFIRSTPAGE + 20
			ENDIF
			IF (LNFIRSTPAGE >= 20 AND VAL(LCPAGENO) > 1) .OR.  ;
					VAL(LCPAGENO) / 20 = INT(VAL(LCPAGENO) / 20)
				vstring="<a href="+chr(34)+LnPageGuid+VKEY_VALUE+"&cPageNo="+alltrim(str(LnFirstPage-20))+"&cPageRecno="+LcNoPerPage+"&cFirstPage="+alltrim(str(LnFirstPage-20))+LcFilter+chr(34)+"&nbsp;&nbsp;"+"><<</a>"
				LcPageGuid=vstring + "&nbsp;"+ LcPageGuid
			ENDIF
			IF VAL(LCPAGENO) > 1
				vstring="<a href="+chr(34)+LnPageGuid+VKEY_VALUE+"&cPageNo="+alltrim(str(val(LcPageNo)-1))+"&cPageRecno="+LcNoPerPage+"&cFirstPage="+alltrim(str(LnFirstPage))+LcFilter+chr(34)+"&nbsp;&nbsp;"+"><b>Prev</b></a>&nbsp;"
				LcPageGuid = LcPageGuid + "&nbsp;"+vstring
			ENDIF
			NCOUNT = 0
			IF EMPTY(VCONDITION)
				IF LNPAGENO > 1 AND LNPAGENO > LNFIRSTPAGE
					VPAGECOUNTER = 0
					DO WHILE LNFIRSTPAGE + VPAGECOUNTER < LNPAGENO
						vstring="<a href="+chr(34)+LnPageGuid+VKEY_VALUE+"&cPageNo="+alltrim(str(LnFirstPage+vpagecounter ) )+"&cPageRecno="+LcNoPerPage+"&cFirstPage="+LcFirstPage+LcFilter+chr(34)+"&nbsp;&nbsp;"+">"+  alltrim(str(LnFirstPage+vpagecounter )) +"</a>"
						LcPageGuid = LcPageGuid + IIF(!EMPTY(LcPageGuid),"&nbsp;","")+vstring
						VPAGECOUNTER = VPAGECOUNTER + 1
						LCLASTPAGE = ALLTRIM(STR(LNFIRSTPAGE + VPAGECOUNTER))
					ENDDO
					NCOUNT = (LNPAGENO - 1) * LNNOPERPAGE
				ENDIF
			ENDIF
			IF  .NOT. EMPTY(VGENRANDLIST)
				VGENRANDLIST=&VGENRANDLIST.
				VCOUNTER = OCCURS(',',VGENRANDLIST)
				VDOWHILE = ' nPageCount<=vcounter'
				VFILTERING = '.T.' + IIF( .NOT. EMPTY(VCONDITION),' .and. ' + VCONDITION,'')
				VRECCNO = RECNO()
			ENDIF
			NPAGECOUNT = 1
			Scan rest while !Eof() and &VDOWHILE.
				IF  .NOT. EMPTY(VGENRANDLIST)
					VGOTO =  ;
						VAL(ALLTRIM(SUBSTR(VGENRANDLIST,AT(',',VGENRANDLIST,NPAGECOUNT) + 1,AT(',',VGENRANDLIST,NPAGECOUNT + 1) - AT(',',VGENRANDLIST,NPAGECOUNT) - 1)))
					IF VGOTO <> 0
						GO VRECCNO
						SKIP VGOTO - 1
						IF EOF()
							GO VRECCNO
							VFILTERING = '.F.' + IIF( .NOT. EMPTY(VCONDITION),' .and. ' + VCONDITION,'')
						ELSE
							VFILTERING = '.T.' + IIF( .NOT. EMPTY(VCONDITION),' .and. ' + VCONDITION,'')
							LCLASTPAGE = ALLTRIM(STR(NPAGECOUNT))
						ENDIF
					ELSE
						VFILTERING = '.F.' + IIF( .NOT. EMPTY(VCONDITION),' .and. ' + VCONDITION,'')
					ENDIF
				ENDIF
				IF &VFILTERING.
					NCOUNT = NCOUNT + 1
				ENDIF
				IF INT((nCount-1)/LnNoPerPage)=LnPageno-1 .AND. &VFILTERING.
					IF NCOUNT > 0
						LCSTRING = LCSTRING + PAULADDMEMO(LCDESC)
						VPLNOOFREC = VPLNOOFREC + 1
						IF VGENVSTRINGTEXT = 'Y'
							VSTRINGTEXT = VSTRINGTEXT + VPLBEGIN + VPLDELIMITER
							PAULFIELD = SUBSTR(VSELECTION,1,AT(',',VSELECTION) - 1)
							if vartype(&paulFIELD.)<>"U"
								VFIELD_TYPE=vartype(alltrim(&paulFIELD.))
								VFIELD_VALUE=&paulFIELD.
								VFIELD_VALUE = ITSQLOCHAR(VFIELD_VALUE)
								VSTRINGTEXT = VSTRINGTEXT + VFIELD_VALUE + VPLDELIMITER
							ENDIF
							IF OCCURS(',',VSELECTION) > 1
								FOR GNCOUNT = 1 TO OCCURS(',',VSELECTION) - 1
									if vartype(&paulFIELD.)<>"U"
										PAULFIELD =  ;
											SUBSTR(VSELECTION,AT(',',VSELECTION,GNCOUNT) + 1,AT(',',VSELECTION,GNCOUNT + 1) - AT(',',VSELECTION,GNCOUNT) - 1)
										VFIELD_TYPE=vartype(&paulFIELD.)
										VFIELD_VALUE=&paulFIELD.
										VFIELD_VALUE = ITSQLOCHAR(VFIELD_VALUE)
										VSTRINGTEXT = VSTRINGTEXT + VFIELD_VALUE + VPLDELIMITER
									ENDIF
								ENDFOR
							ENDIF
							VBEGINSTRING =  ;
								VPLBEGIN + VPLDELIMITER + ALLTRIM(STR(VPLNOOFREC)) + VPLDELIMITER +  ;
								ALLTRIM(STR(VPLNOOFFIELD)) + VPLDELIMITER + ALLTRIM(VSELECTION) + VPLDELIMITER + VPLEND
							VSTRINGTEXT = VSTRINGTEXT + VPLEND
						ENDIF
					ENDIF
				ENDIF
				IF INT((nCount-1) /LnNoPerPage)+1>LnFirstPage+20-1 .or. !&VDOWHILE.
					EXIT
				ELSE
					IF &VFILTERING. .AND. INT((nCount-1) /LnNoPerPage)+1>=LnFirstPage .and. INT((nCount-1) /LnNoPerPage)+1<=LnFirstPage +20-1
						IF (NCOUNT - 1) / LNNOPERPAGE = INT((NCOUNT - 1) / LNNOPERPAGE)
							VADD20 = 0
							IF VADD20 + INT(NCOUNT / LNNOPERPAGE) = LNPAGENO - 1
								VSTRING =  ;
									"<font color='#FF0000'><b>" + ALLTRIM(STR(VADD20 + INT(NCOUNT / LNNOPERPAGE) + 1)) +  ;
									'</b></font>'
								LCLASTPAGE = ALLTRIM(STR(VADD20 + INT(NCOUNT / LNNOPERPAGE) + 1))
							ELSE
								vstring="<a href="+chr(34)+LnPageGuid+VKEY_VALUE+"&cPageNo="+alltrim(str(vadd20+INT(nCount/LnNoPerPage)+1))+"&cPageRecno="+LcNoPerPage+"&cFirstPage="+LcFirstPage+LcFilter+chr(34)+"&nbsp;"	+">"+  alltrim(str(vadd20+INT(nCount/LnNoPerPage)+1)) +"</a>"
								LCLASTPAGE = ALLTRIM(STR(VADD20 + INT(NCOUNT / LNNOPERPAGE) + 1))
							ENDIF
							LcPageGuid = LcPageGuid + IIF(!EMPTY(LcPageGuid),"&nbsp;","")+vstring
						ENDIF
					ENDIF
				ENDIF
				NPAGECOUNT = NPAGECOUNT + 1
			ENDSCAN
			IF VADD20 + INT(NCOUNT / LNNOPERPAGE) > LNPAGENO .OR.  ;
					VADD20 + INT(NCOUNT / LNNOPERPAGE) + 1 - VAL(LCFIRSTPAGE) + 1 > 20
				vstring="&nbsp;<a href="+chr(34)+LnPageGuid+VKEY_VALUE+"&cPageNo="+alltrim(str(val(LcPageNo)+1))+"&cPageRecno="+LcNoPerPage+"&cFirstPage="+alltrim(str(val(LcFirstPage)))+LcFilter+chr(34)+"><b>Next</b></a>&nbsp;"
				LcPageGuid = LcPageGuid + IIF(!EMPTY(LcPageGuid),"&nbsp;","")+vstring
			ENDIF
			IF VADD20 + INT(NCOUNT / LNNOPERPAGE) + 1 - VAL(LCFIRSTPAGE) + 1 > 20
				vstring="<a href="+chr(34)+LnPageGuid+VKEY_VALUE+"&cPageNo="+alltrim(str(val(LcFirstPage)+20))+"&cPageRecno="+LcNoPerPage+"&cFirstPage="+alltrim(str(val(LcFirstPage)+20))+LcFilter+chr(34)+"&nbsp;&nbsp;"+">>></a>"
				LcPageGuid = LcPageGuid + IIF(!EMPTY(LcPageGuid),"&nbsp;","")+vstring
			ENDIF
		ELSE
			LCSTRING = 'FAIL: No record found !' + VKEY_VALUE
			VERROR = 'FAIL:  No record found !'
			SELECT (SELECT_WK)
		ENDIF
		IF USED(LCGLOBALITEMALIAS)
			USE IN (LCGLOBALITEMALIAS)
		ENDIF
		SELECT (SELECT_WK)
		IF VGENVSTRINGTEXT = 'Y'
			VBEGINSTRING =  ;
				VPLBEGIN + VPLDELIMITER + ALLTRIM(STR(VPLNOOFREC)) + VPLDELIMITER +  ;
				ALLTRIM(STR(VPLNOOFFIELD)) + VPLDELIMITER + ALLTRIM(VSELECTION) + VPLDELIMITER + VPLEND
			VSTRINGTEXT = VBEGINSTRING + VPLDELIMITER + VSTRINGTEXT
		ENDIF
		RETURN LCSTRING
	ENDPROC
	*------

	PROCEDURE PaulInfoLinkALL
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VERROR , VINFOKEY_VALUE , VDBF , VSEEK , VKEY ,  ;
			VSELECTION1 , VDBF2 , VSEEK2 , VKEY2 , VSELECTION2 , VSTRINGTEXTTARGET ,  ;
			LCPAGENO , LCNOPERPAGE , LCFIRSTPAGE , LCLASTPAGE
		LOCAL VTARGETSTRING , VSTRINGTEXTRETURN , VINFOKEY_VALUE
		VERROR = 'OK'
		VTARGETSTRING = VSTRINGTEXTTARGET
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		IF YEAR(DATE()) > 2013
			IF  .NOT. FILE('\itrader\pauldoc.doc')
				RETURN 'FAIL: File Server configuration problem,pls call iTrader for help !'
			ENDIF
		ENDIF
		IF EMPTY(SYS_SETTINGS)
			LCLASTPAGE = ''
			VERROR = 'FAIL - sys_settings is empty!'
			RETURN VTARGETSTRING
		ENDIF
		IF EMPTY(VINFOKEY_VALUE)
			VERROR = 'FAIL - Query Key is empty!'
			RETURN VTARGETSTRING
		ENDIF
		IF SUBSTR(VSTRINGTEXTTARGET,1,4) = 'FAIL'
			VERROR = 'FAIL - Original Text is invalid !' + VSTRINGTEXTTARGET
			VSTRINGTEXTTARGET = ''
		ENDIF
		DIMENSION INFOLINK7( 7 , 4 )
		INFOLINK7 = ''
		VDB1 = ''
		VDB2 = ''
		VDB3 = ''
		VDB4 = ''
		VDB5 = ''
		VDB6 = ''
		VDB7 = ''
		VSTRINGLK1 = ''
		VSTRINGLK2 = ''
		VSTRINGLK3 = ''
		VSTRINGLK4 = ''
		VSTRINGLK5 = ''
		VSTRINGLK6 = ''
		VSTRINGLK7 = ''
		VSTRINGTEXTRETURN = ''
		VKEYVALUE1 = ''
		VKEYVALUE2 = ''
		VKEYVALUE3 = ''
		VKEYVALUE4 = ''
		VKEYVALUE5 = ''
		VKEYVALUE6 = ''
		VKEYVALUE7 = ''
		VINFOKEY_VALUE = STRTRAN(VINFOKEY_VALUE,'http://www.')
		VINFOKEY_VALUE = STRTRAN(VINFOKEY_VALUE,'www.')
		VINFOKEY_VALUE = STRTRAN(VINFOKEY_VALUE,'http://')
		VINFOKEY_VALUE = STRTRAN(VINFOKEY_VALUE,'HTTP://WWW.')
		VINFOKEY_VALUE = STRTRAN(VINFOKEY_VALUE,'WWW.')
		VINFOKEY_VALUE = STRTRAN(VINFOKEY_VALUE,'HTTP://')
		IF ITSEPVALUE(VINFOKEY_VALUE) = 'OK'
			VKEYVALUE1 = ALLTRIM(INFOLINK7(1,1))
			VKEYVALUE2 = ALLTRIM(INFOLINK7(2,1))
			VKEYVALUE3 = ALLTRIM(INFOLINK7(3,1))
			VKEYVALUE4 = ALLTRIM(INFOLINK7(4,1))
			VKEYVALUE5 = ALLTRIM(INFOLINK7(5,1))
			VKEYVALUE6 = ALLTRIM(INFOLINK7(6,1))
			VKEYVALUE7 = ALLTRIM(INFOLINK7(7,1))
			VDB1 = VDBF2 + ALLTRIM(SUBSTR(VKEYVALUE1,1,2))
			VDB2 = VDBF2 + ALLTRIM(SUBSTR(VKEYVALUE2,1,2))
			VDB3 = VDBF2 + ALLTRIM(SUBSTR(VKEYVALUE3,1,2))
			VDB4 = VDBF2 + ALLTRIM(SUBSTR(VKEYVALUE4,1,2))
			VDB5 = VDBF2 + ALLTRIM(SUBSTR(VKEYVALUE5,1,2))
			VDB6 = VDBF2 + ALLTRIM(SUBSTR(VKEYVALUE6,1,2))
			VDB7 = VDBF2 + ALLTRIM(SUBSTR(VKEYVALUE7,1,2))
		ENDIF
		VCAT2 = ''
		IF RAT('+',VKEY2) > 0
			VCAT2 = ALLTRIM(SUBSTR(VKEY2,1,RAT('+',VKEY2) - 1))
			VCAT2=&VCAT2.
		ENDIF
		VPLLCPAGENO = LCPAGENO
		VPLLCFIRSTPAGE = LCFIRSTPAGE
		VPLLCLASTPAGE = LCLASTPAGE
		IF  .NOT. EMPTY(VKEYVALUE1)
			VSTRINGLK1 =  ;
				PAULQUERYINFO(SYS_SETTINGS,VSCREEN_ID,VDB1,VSEEK2,VKEY2,VERROR,VCAT2 + VKEYVALUE1,VSTRINGTEXTRETURN,VSELECTION2,1,LCPAGENO,LCNOPERPAGE,LCFIRSTPAGE,LCLASTPAGE)
		ENDIF
		IF  .NOT. EMPTY(VKEYVALUE2)
			VSTRINGLK2 =  ;
				PAULQUERYINFO(SYS_SETTINGS,VSCREEN_ID,VDB2,VSEEK2,VKEY2,VERROR,VCAT2 + VKEYVALUE2,VSTRINGTEXTRETURN,VSELECTION2,2,LCPAGENO,LCNOPERPAGE,LCFIRSTPAGE,LCLASTPAGE)
		ENDIF
		IF  .NOT. EMPTY(VKEYVALUE3)
			VSTRINGLK3 =  ;
				PAULQUERYINFO(SYS_SETTINGS,VSCREEN_ID,VDB3,VSEEK2,VKEY2,VERROR,VCAT2 + VKEYVALUE3,VSTRINGTEXTRETURN,VSELECTION2,3,LCPAGENO,LCNOPERPAGE,LCFIRSTPAGE,LCLASTPAGE)
		ENDIF
		IF  .NOT. EMPTY(VKEYVALUE4)
			VSTRINGLK4 =  ;
				PAULQUERYINFO(SYS_SETTINGS,VSCREEN_ID,VDB4,VSEEK2,VKEY2,VERROR,VCAT2 + VKEYVALUE4,VSTRINGTEXTRETURN,VSELECTION2,4,LCPAGENO,LCNOPERPAGE,LCFIRSTPAGE,LCLASTPAGE)
		ENDIF
		IF  .NOT. EMPTY(VKEYVALUE5)
			VSTRINGLK5 =  ;
				PAULQUERYINFO(SYS_SETTINGS,VSCREEN_ID,VDB5,VSEEK2,VKEY2,VERROR,VCAT2 + VKEYVALUE5,VSTRINGTEXTRETURN,VSELECTION2,5,LCPAGENO,LCNOPERPAGE,LCFIRSTPAGE,LCLASTPAGE)
		ENDIF
		IF  .NOT. EMPTY(VKEYVALUE6)
			VSTRINGLK6 =  ;
				PAULQUERYINFO(SYS_SETTINGS,VSCREEN_ID,VDB6,VSEEK2,VKEY2,VERROR,VCAT2 + VKEYVALUE6,VSTRINGTEXTRETURN,VSELECTION2,6,LCPAGENO,LCNOPERPAGE,LCFIRSTPAGE,LCLASTPAGE)
		ENDIF
		IF  .NOT. EMPTY(VKEYVALUE7)
			VSTRINGLK7 =  ;
				PAULQUERYINFO(SYS_SETTINGS,VSCREEN_ID,VDB7,VSEEK2,VKEY2,VERROR,VCAT2 + VKEYVALUE7,VSTRINGTEXTRETURN,VSELECTION2,7,LCPAGENO,LCNOPERPAGE,LCFIRSTPAGE,LCLASTPAGE)
		ENDIF
		IF  .NOT. EMPTY(VSTRINGLK1) .OR. SUBSTR(VSTRINGLK1,1,4) <> 'FAIL'
			VTARGETSTRING =  ;
				PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VINFOKEY_VALUE,VTARGETSTRING,VSELECTION1,VSTRINGLK1)
		ENDIF
		IF  .NOT. EMPTY(VSTRINGLK2) .OR. SUBSTR(VSTRINGLK2,1,4) <> 'FAIL'
			VTARGETSTRING =  ;
				PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VINFOKEY_VALUE,VTARGETSTRING,VSELECTION1,VSTRINGLK2)
		ENDIF
		IF  .NOT. EMPTY(VSTRINGLK3) .OR. SUBSTR(VSTRINGLK3,1,4) <> 'FAIL'
			VTARGETSTRING =  ;
				PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VINFOKEY_VALUE,VTARGETSTRING,VSELECTION1,VSTRINGLK3)
		ENDIF
		IF  .NOT. EMPTY(VSTRINGLK4) .OR. SUBSTR(VSTRINGLK4,1,4) <> 'FAIL'
			VTARGETSTRING =  ;
				PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VINFOKEY_VALUE,VTARGETSTRING,VSELECTION1,VSTRINGLK4)
		ENDIF
		IF  .NOT. EMPTY(VSTRINGLK5) .OR. SUBSTR(VSTRINGLK5,1,4) <> 'FAIL'
			VTARGETSTRING =  ;
				PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VINFOKEY_VALUE,VTARGETSTRING,VSELECTION1,VSTRINGLK5)
		ENDIF
		IF  .NOT. EMPTY(VSTRINGLK6) .OR. SUBSTR(VSTRINGLK6,1,4) <> 'FAIL'
			VTARGETSTRING =  ;
				PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VINFOKEY_VALUE,VTARGETSTRING,VSELECTION1,VSTRINGLK6)
		ENDIF
		IF  .NOT. EMPTY(VSTRINGLK7) .OR. SUBSTR(VSTRINGLK7,1,4) <> 'FAIL'
			VTARGETSTRING =  ;
				PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VINFOKEY_VALUE,VTARGETSTRING,VSELECTION1,VSTRINGLK7)
		ENDIF
		LCPAGENO =  ;
			ALLTRIM(VPLLCPAGENO + ',' +  ;
			STR(ITMAX(INFOLINK7(1,2) + ',' + INFOLINK7(2,2) + ',' + INFOLINK7(3,2) + ',' + INFOLINK7(4,2) +  ;
			',' +  ;
			INFOLINK7(5,2) +  ;
			',' +  ;
			INFOLINK7(6,2) +  ;
			',' +  ;
			INFOLINK7(7,2))))
		LCFIRSTPAGE =  ;
			ALLTRIM(VPLLCFIRSTPAGE + ',' +  ;
			STR(ITMAX(INFOLINK7(1,3) + ',' + INFOLINK7(2,3) + ',' + INFOLINK7(3,3) + ',' + INFOLINK7(4,3) +  ;
			',' +  ;
			INFOLINK7(5,3) +  ;
			',' +  ;
			INFOLINK7(6,3) +  ;
			',' +  ;
			INFOLINK7(7,3))))
		LCLASTPAGE =  ;
			ALLTRIM(VPLLCLASTPAGE + ',' +  ;
			STR(ITMAX(INFOLINK7(1,4) + ',' + INFOLINK7(2,4) + ',' + INFOLINK7(3,4) + ',' + INFOLINK7(4,4) +  ;
			',' +  ;
			INFOLINK7(5,4) +  ;
			',' +  ;
			INFOLINK7(6,4) +  ;
			',' +  ;
			INFOLINK7(7,4))))
		RELEASE INFOLINK7
		RETURN VTARGETSTRING
	ENDPROC
	*------

	PROCEDURE PaulInfoLink
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VERROR , VKEY_VALUE ,  ;
			VSTRINGTEXTTARGET , VSELECTION , VSTRINGLK1 , VSTRINGLK2 , VSTRINGLK3 ,  ;
			VSTRINGLK4 , VSTRINGLK5 , VSTRINGLK6 , VSTRINGLK7
		LOCAL VTARGETSTRING
		VERROR = 'OK'
		VTARGETSTRING = VSTRINGTEXTTARGET
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		IF EMPTY(SYS_SETTINGS)
			LCLASTPAGE = ''
			VERROR = 'FAIL - sys_settings is empty!'
			RETURN VTARGETSTRING
		ENDIF
		IF EMPTY(VSTRINGLK1)
			VERROR = 'FAIL - Text is empty!'
			RETURN VTARGETSTRING
		ENDIF
		IF SUBSTR(VSTRINGLK1,1,4) = 'FAIL' .OR. SUBSTR(VSTRINGTEXTTARGET,1,4) = 'FAIL'
			VERROR = 'FAIL - Text is invalid !' + VSTRINGLINK
			RETURN VTARGETSTRING
		ENDIF
		VTARGETSTRING =  ;
			PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VKEY_VALUE,VTARGETSTRING,VSELECTION,VSTRINGLK1)
		IF  .NOT. EMPTY(VSTRINGLK2) .OR. SUBSTR(VSTRINGLK2,1,4) <> 'FAIL'
			VTARGETSTRING =  ;
				PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VKEY_VALUE,VTARGETSTRING,VSELECTION,VSTRINGLK2)
		ENDIF
		IF  .NOT. EMPTY(VSTRINGLK3) .OR. SUBSTR(VSTRINGLK3,1,4) <> 'FAIL'
			VTARGETSTRING =  ;
				PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VKEY_VALUE,VTARGETSTRING,VSELECTION,VSTRINGLK3)
		ENDIF
		IF  .NOT. EMPTY(VSTRINGLK4) .OR. SUBSTR(VSTRINGLK4,1,4) <> 'FAIL'
			VTARGETSTRING =  ;
				PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VKEY_VALUE,VTARGETSTRING,VSELECTION,VSTRINGLK4)
		ENDIF
		IF  .NOT. EMPTY(VSTRINGLK5) .OR. SUBSTR(VSTRINGLK5,1,4) <> 'FAIL'
			VTARGETSTRING =  ;
				PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VKEY_VALUE,VTARGETSTRING,VSELECTION,VSTRINGLK5)
		ENDIF
		IF  .NOT. EMPTY(VSTRINGLK6) .OR. SUBSTR(VSTRINGLK6,1,4) <> 'FAIL'
			VTARGETSTRING =  ;
				PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VKEY_VALUE,VTARGETSTRING,VSELECTION,VSTRINGLK6)
		ENDIF
		IF  .NOT. EMPTY(VSTRINGLK7) .OR. SUBSTR(VSTRINGLK7,1,4) <> 'FAIL'
			VTARGETSTRING =  ;
				PAULINFOLINK3EXT(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VERROR,VKEY_VALUE,VTARGETSTRING,VSELECTION,VSTRINGLK7)
		ENDIF
		RETURN VTARGETSTRING
	ENDPROC
	*------

	PROCEDURE PaulInfoLink2
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VERROR , VKEY_VALUE ,  ;
			VSTRINGTEXTLOCAL , VSELECTION , VSTRINGLINK
		LOCAL SELECT_WK , ERROR_WK , NEAR_WK , EXACT_WK , _ISERROR , RECNO_WK ,  ;
			VSTRINGTEXTLOCAL
		IF EMPTY(SYS_SETTINGS)
			LCLASTPAGE = ''
			VERROR = 'FAIL - sys_settings is empty!'
			RETURN VSTRINGTEXTLOCAL
		ENDIF
		IF EMPTY(VSTRINGLINK) .OR. ITRECCOUNT(VSTRINGLINK) = 0
			VERROR = 'FAIL - Text is empty!'
			RETURN VSTRINGTEXTLOCAL
		ENDIF
		IF SUBSTR(VSTRINGLINK,1,4) = 'FAIL' .OR. SUBSTR(VSTRINGTEXTLOCAL,1,4) = 'FAIL'
			VERROR = 'FAIL - Text is invalid !' + VSTRINGLINK
			RETURN VSTRINGTEXTLOCAL
		ENDIF
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		SET EXCLUSIVE OFF
		SET DELETED ON
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		IF AT('ON',UPPER(DATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(DATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		IF  .NOT. EMPTY(DELETEON)
			&DELETEON.
		ENDIF
		VPLBEGIN = '<BR>'
		VPLEND = '</BR>'
		VPLDELIMITER = '[*|||~]'
		VRECCOUNTOLD = ITRECCOUNT(VSTRINGTEXTLOCAL)
		VRECCOUNTNEW = ITRECCOUNT(VSTRINGLINK)
		VPLNOOFFIELDOLD = ITFIELDCOUNT(VSTRINGTEXTLOCAL)
		VSTRINGTEXTLOCALOLD = VSTRINGTEXTLOCAL
		VSTRINGTEXTLOCALNEW = VSTRINGLINK
		VPLNOOFFIELD = VPLNOOFFIELDOLD
		VPLNOOFREC = 0
		VSTRINGTEXTLOCAL = ''
		VPLFIELDSTRING = ''
		IF VRECCOUNTNEW = 0
			VERROR = 'FAIL - Text is empty!'
			RETURN VSTRINGTEXTLOCAL
		ENDIF
		IF VARTYPE(VSELECTION) = 'L' .OR. VARTYPE(VSELECTION) = 'U'
			VSELECTION = ''
		ENDIF
		SELECT_WK = SELECT()
		ERROR_WK = ON('error')
		NEAR_WK = SET('near')
		EXACT_WK = SET('exact')
		RECNO_WK = IIF(EOF() .OR. BOF(),0,RECNO())
		_ISERROR = .F.
		SET NEAR ON
		SET EXACT OFF
		SET EXCLUSIVE OFF
		VERROR = 'OK'
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		LCSTRING = ''
		SELECT 0
		LCGLOBALITEMALIAS = 'Global' + ALLTRIM(SUBSTR(VDBF,RAT('\',VDBF) + 1,20))
		IF USED(LCGLOBALITEMALIAS)
			SELECT (LCGLOBALITEMALIAS)
		ELSE
			VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
			IF AT('.',VUSEDDBF) > 0
				VFILEDBF = ALLTRIM(SUBSTR(VUSEDDBF,1,AT('.',VUSEDDBF) - 1)) + '.cdx'
			ELSE
				VFILEDBF = VUSEDDBF + '.CDX'
			ENDIF
			IF  .NOT. FILE(VFILEDBF)
				LCSTRING = 'FAIL: Table not found ! ' + VUSEDDBF
				VERROR = 'FAIL: Table not found !' + VUSEDDBF
				LCLASTPAGE = ''
				RETURN VSTRINGTEXTLOCAL
			ENDIF
			IF AT('.',VUSEDDBF) = 0
				IF FILE(VUSEDDBF + '.wsd')
					VUSEDDBF = VUSEDDBF + '.wsd'
				ENDIF
			ENDIF
			use &vuseddbf. ALIAS &LcGlobalItemAlias. in 0 again shared
		ENDIF
		IF SUBSTR(VERROR,1,4) = 'FAIL'
			SELECT (SELECT_WK)
			LCSTRING = 'FAIL: Error to open the database table(s)!'
			VERROR = 'FAIL: Error to open the database table(s)!'
			LCLASTPAGE = ''
			RETURN VSTRINGTEXTLOCAL
		ENDIF
		Set Order To &VSEEK.
		GO TOP
		NCOUNT = 0
		VPLNOOFREC = 0
		VSTRINGTEXTLOCAL = ''
		DO WHILE NCOUNT <= VRECCOUNTNEW
			NCOUNT = NCOUNT + 1
			SELECT (LCGLOBALITEMALIAS)
			GO TOP
			VCUSTOMER_ID = UPPER(ITVALUE(VSTRINGTEXTLOCALNEW,NCOUNT,VSEEK))
			SEEK VCUSTOMER_ID
			IF  .NOT. EOF() AND FOUND() AND  .NOT. EMPTY(VCUSTOMER_ID)
				IF ALLTRIM(&VKEY.) = ALLTRIM(vcustomer_id) .AND. AT(VPLDELIMITER+vcustomer_id+VPLDELIMITER,VSTRINGTEXTLOCALold+VSTRINGTEXTLOCAL)=0
					VPLNOOFREC = VPLNOOFREC + 1
					VSTRINGTEXTLOCAL = VSTRINGTEXTLOCAL + VPLBEGIN + VPLDELIMITER
					PAULFIELD = SUBSTR(VSELECTION,1,AT(',',VSELECTION) - 1)
					if vartype(&paulFIELD.)<>"U"
						VFIELD_TYPE=vartype(alltrim(&paulFIELD.))
						VFIELD_VALUE=&paulFIELD.
						VFIELD_VALUE = ITSQLOCHAR(VFIELD_VALUE)
						VSTRINGTEXTLOCAL = VSTRINGTEXTLOCAL + VFIELD_VALUE + VPLDELIMITER
					ENDIF
					IF OCCURS(',',VSELECTION) > 1
						FOR GNCOUNT = 1 TO OCCURS(',',VSELECTION) - 1
							if vartype(&paulFIELD.)<>"U"
								PAULFIELD =  ;
									SUBSTR(VSELECTION,AT(',',VSELECTION,GNCOUNT) + 1,AT(',',VSELECTION,GNCOUNT + 1) - AT(',',VSELECTION,GNCOUNT) - 1)
								VFIELD_TYPE=vartype(&paulFIELD.)
								VFIELD_VALUE=&paulFIELD.
								VFIELD_VALUE = ITSQLOCHAR(VFIELD_VALUE)
								VSTRINGTEXTLOCAL = VSTRINGTEXTLOCAL + VFIELD_VALUE + VPLDELIMITER
							ENDIF
						ENDFOR
					ENDIF
					VSTRINGTEXTLOCAL = VSTRINGTEXTLOCAL + VPLEND
				ENDIF
			ENDIF
			SELECT (LCGLOBALITEMALIAS)
			SKIP
		ENDDO
		VBEGINSTRING =  ;
			VPLBEGIN + VPLDELIMITER + ALLTRIM(STR(VPLNOOFREC + VRECCOUNTOLD)) + VPLDELIMITER +  ;
			ALLTRIM(STR(VPLNOOFFIELD)) + VPLDELIMITER + ALLTRIM(VSELECTION) +  ;
			VPLDELIMITER + VPLEND
		VBODY =  ;
			SUBSTR(VSTRINGTEXTLOCALOLD,AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXTLOCALOLD,2))
		VSTRINGTEXTLOCAL = VBEGINSTRING + VBODY + VSTRINGTEXTLOCAL
		VERROR = 'OK'
		RETURN VSTRINGTEXTLOCAL
	ENDPROC
	*------

	PROCEDURE PageGuid
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VERROR , LCPGKEY_VALUE , LCDESC , LCPGPAGEGUID ,  ;
			LCPGPAGENO , LCPGNOPERPAGE , LCPGFIRSTPAGE , LCPGLASTPAGE , LCLANG ,  ;
			LCCOUNTRY , LCBUSINESS , LCMARKET , LCCONTRACT , LCPREBAR , LCPREVIOUS ,  ;
			LCBUTTON , LCNEXT , LCNEXTBAR
		LOCAL VPAGENO
		IF EMPTY(LCPGPAGEGUID)
			LNPAGEGUID = 'index.asp?cQueryID='
		ELSE
			LNPAGEGUID = LCPGPAGEGUID
		ENDIF
		IF EMPTY(LCPREBAR)
			LCPREBAR = '<<'
		ELSE
			LCPREBAR = PAULADDMEMO(LCPREBAR)
		ENDIF
		IF EMPTY(LCPREVIOUS)
			LCPREVIOUS = 'Prev'
		ELSE
			LCPREVIOUS = PAULADDMEMO(LCPREVIOUS)
		ENDIF
		IF EMPTY(LCBUTTON)
			LCBUTTON = 'alltrim(str(vpageno))'
		ENDIF
		IF EMPTY(LCNEXT)
			LCNEXT = 'Next'
		ELSE
			LCNEXT = PAULADDMEMO(LCNEXT)
		ENDIF
		IF EMPTY(LCNEXTBAR)
			LCNEXTBAR = '>>'
		ELSE
			LCNEXTBAR = PAULADDMEMO(LCNEXTBAR)
		ENDIF
		LCPGPAGEGUID = ''
		LNSTARTRECORD = 0
		LNPGFIRSTPAGE = 0
		LNPGLASTPAGE = 0
		LCFILTER = ''
		IF EMPTY(LCLANG)
			LCLANG = 'ALL'
		ELSE
			LcFilter=LcFilter+"&cLang="+LcLang
		ENDIF
		IF EMPTY(LCCOUNTRY)
			LCCOUNTRY = 'ALL'
		ELSE
			LcFilter=LcFilter+"&cCountry="+Lccountry
		ENDIF
		IF EMPTY(LCBUSINESS)
			LCBUSINESS = 'ALL'
		ELSE
			LcFilter=LcFilter+"&cBusiness="+LcBusiness
		ENDIF
		IF EMPTY(LCMARKET)
			LCMARKET = 'ALL'
		ELSE
			LcFilter=LcFilter+"&cMarket="+LcMarket
		ENDIF
		IF EMPTY(LCCONTRACT)
			LCCONTRACT = 'ALL'
		ELSE
			LcFilter=LcFilter+"&cContract="+LcContract
		ENDIF
		IF EMPTY(LCPGPAGENO) .OR. VAL(LCPGPAGENO) <= 0
			LCPGPAGENO = '1'
			LNPGPAGENO = 1
		ELSE
			LNPGPAGENO = ITMAX(LCPGPAGENO)
			LCPGPAGENO = ALLTRIM(STR(LNPGPAGENO))
		ENDIF
		IF EMPTY(LCPGNOPERPAGE)
			LCPGNOPERPAGE = '20'
			LNNOPERPAGE = 20
		ELSE
			LNNOPERPAGE = VAL(LCPGNOPERPAGE)
			LCPGNOPERPAGE = ALLTRIM(STR(LNNOPERPAGE))
		ENDIF
		IF EMPTY(LCPGFIRSTPAGE) .OR. LNPGPAGENO < 20
			LCPGFIRSTPAGE = '1'
			LNPGFIRSTPAGE = 1
		ELSE
			LNPGFIRSTPAGE = ITMAX(LCPGFIRSTPAGE)
			LCPGFIRSTPAGE = ALLTRIM(STR(LNPGFIRSTPAGE))
		ENDIF
		IF EMPTY(LCPGLASTPAGE)
			LCPGLASTPAGE = '1'
			LNPGLASTPAGE = 1
		ELSE
			LNPGLASTPAGE = ITMAX(LCPGLASTPAGE)
			LCPGLASTPAGE = ALLTRIM(STR(LNPGLASTPAGE))
		ENDIF
		IF (LNPGFIRSTPAGE >= 20 AND VAL(LCPGPAGENO) > 1) .OR.  ;
				VAL(LCPGPAGENO) / 20 = INT(VAL(LCPGPAGENO) / 20)
			vstring="<a href="+chr(34)+LnPageGuid+LcpgKEY_VALUE+"&cPageNo="+alltrim(str(LnpgFirstPage-20))+"&cPageRecno="+LcpgNoPerPage+"&cFirstPage="+alltrim(str(LnpgFirstPage-20))+LcFilter+chr(34)+"&nbsp;&nbsp;"+">"+LcPreBar+"</a>"
			LcpgPageGuid=vstring + "&nbsp;"+ LcpgPageGuid
		ENDIF
		IF VAL(LCPGPAGENO) > 1
			IF LNPGPAGENO = LNPGFIRSTPAGE AND LNPGFIRSTPAGE > 20
				vstring="<a href="+chr(34)+LnPageGuid+LcpgKEY_VALUE+"&cPageNo="+alltrim(str(val(LcpgPageNo)-1))+"&cPageRecno="+LcpgNoPerPage+"&cFirstPage="+alltrim(str(LnpgFirstPage-20))+LcFilter+chr(34)+"&nbsp;&nbsp;"+"><b>"+Lcprevious+"</b></a>&nbsp;"
				LcpgPageGuid = LcpgPageGuid + "&nbsp;"+vstring
			ELSE
				vstring="<a href="+chr(34)+LnPageGuid+LcpgKEY_VALUE+"&cPageNo="+alltrim(str(val(LcpgPageNo)-1))+"&cPageRecno="+LcpgNoPerPage+"&cFirstPage="+alltrim(str(LnpgFirstPage))+LcFilter+chr(34)+"&nbsp;&nbsp;"+"><b>"+Lcprevious+"</b></a>&nbsp;"
				LcpgPageGuid = LcpgPageGuid + "&nbsp;"+vstring
			ENDIF
		ENDIF
		VPAGENO = LNPGFIRSTPAGE
		VCOUNTER = 1
		DO WHILE VPAGENO <= LNPGLASTPAGE
			IF VPAGENO = LNPGPAGENO
				VSTRING = "<font color='#FF0000'><b>" + ALLTRIM(STR(VPAGENO)) + '</b></font>'
			ELSE
				vstring="<a href="+chr(34)+LnPageGuid+LcpgKEY_VALUE+"&cPageNo="+alltrim(str(vpageno) )+"&cPageRecno="+LcpgNoPerPage+"&cFirstPage="+LcpgFirstPage+LcFilter+chr(34)+"&nbsp;&nbsp;"+">"+  &lcbutton. +"</a>"
			ENDIF
			LcpgPageGuid = LcpgPageGuid + IIF(!EMPTY(LcpgPageGuid),"&nbsp;","")+vstring
			VPAGENO = VPAGENO + 1
			VCOUNTER = VCOUNTER + 1
		ENDDO
		IF (VAL(LCPGPAGENO) < VPAGENO - 1) .OR. (VAL(LCPGPAGENO) = LNPGFIRSTPAGE + 20 - 1)
			vstring="&nbsp;<a href="+chr(34)+LnPageGuid+LcpgKEY_VALUE+"&cPageNo="+alltrim(str(val(LcpgPageNo)+1))+"&cPageRecno="+LcpgNoPerPage+"&cFirstPage="+alltrim(str(val(LcpgFirstPage)))+LcFilter+chr(34)+"><b>"+LcNext+"</b></a>&nbsp;"
			LcpgPageGuid = LcpgPageGuid + IIF(!EMPTY(LcpgPageGuid),"&nbsp;","")+vstring
		ENDIF
		IF VPAGENO + 1 - LNPGFIRSTPAGE + 1 > 20
			vstring="<a href="+chr(34)+LnPageGuid+LcpgKEY_VALUE+"&cPageNo="+alltrim(str(val(LcpgFirstPage)+20))+"&cPageRecno="+LcpgNoPerPage+"&cFirstPage="+alltrim(str(val(LcpgFirstPage)+20))+LcFilter+chr(34)+"&nbsp;&nbsp;"+">"+LcNextBar+"</a>"
			LcpgPageGuid = LcpgPageGuid + IIF(!EMPTY(LcpgPageGuid),"&nbsp;","")+vstring
		ENDIF
		RETURN LCPGPAGEGUID
	ENDPROC
	*------

	PROCEDURE ITSQLDATE
		LPARAMETER PLDATE , PLTYPE , PLDATETYPE , PLDEF_LANG , VERROR
		LOCAL PLDATE , PLTYPE , PLMONTH , PLDAY
		VERROR = 'OK'
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		SET EXCLUSIVE OFF
		SET TALK OFF
		IF  .NOT. EMPTY(PLDATETYPE)
			IF  .NOT. EMPTY(PLDATETYPE)
				SET DATE TO &plDATETYPE.
			ENDIF
			IF AT('ON',UPPER(PLDATETYPE)) > 0
				SET CENTURY ON
			ENDIF
			IF AT('OFF',UPPER(PLDATETYPE)) > 0
				SET CENTURY OFF
			ENDIF
		ENDIF
		IF EMPTY(PLDATE)
			RETURN '  /  / '
		ENDIF
		IF VARTYPE(PLDATE) = 'C'
			PLDATE = CHRTRANC(PLDATE,'{}','')
			PLDATE = CTOD(PLDATE)
		ENDIF
		IF SET('century') = 'ON'
			PLYEAR = ALLTRIM(STR(YEAR(PLDATE)))
		ELSE
			PLYEAR = SUBSTR(ALLTRIM(STR(YEAR(PLDATE))),3,2)
		ENDIF
		IF  .NOT. EMPTY(PLTYPE)
			IF VARTYPE(PLTYPE) = 'C' .OR. VARTYPE(PLTYPE) = 'M'
				PLTYPE = VAL(PLTYPE)
			ENDIF
		ELSE
			PLTYPE = 1
		ENDIF
		IF PLTYPE = 1
			PLMONTH = SUBSTR(CMONTH(PLDATE),1,3)
			PLDAY = ALLTRIM(STR(DAY(PLDATE)))
			RETURN PLDAY + '-' + PLMONTH + '-' + PLYEAR
		ENDIF
		IF PLTYPE = 2
			PLMONTH = CMONTH(PLDATE)
			PLDAY = ALLTRIM(STR(DAY(PLDATE)))
			RETURN PLMONTH + ' ' + PLDAY + ', ' + PLYEAR
		ENDIF
		IF PLTYPE = 3
			PLMONTH = CMONTH(PLDATE)
			PLDAY = ALLTRIM(STR(DAY(PLDATE)))
			RETURN PLDAY + ' ' + PLMONTH + ', ' + PLYEAR
		ENDIF
		IF PLTYPE = 4
			IF EMPTY(PLDEF_LANG)
				PLDEF_LANG = 'CHS'
			ENDIF
			IF PLDEF_LANG = 'CHS'
				PLDATE = DTOS(PLDATE)
				RETURN LEFT(PLDATE,4) + '年' + SUBSTR(PLDATE,5,2) + '月' + RIGHT(PLDATE,2) + '日'
			ELSE
				RETURN DMY(PLDATE)
			ENDIF
		ENDIF
		IF PLTYPE = 5
			IF EMPTY(PLDATE)
				PLDATE = DTOC(DATE())
			ENDIF
			RETURN DTOC(PLDATE - DAY(PLDATE) + 1)
		ENDIF
		IF PLTYPE = 6
			IF EMPTY(PLDATE)
				PLDATE = DATE()
			ENDIF
			VPLLASTDATE = PLDATE
			VPLCOUNTER = 1
			DO WHILE VPLCOUNTER <= 32
				VPLCOUNTER = VPLCOUNTER + 1
				VPLLASTDATE = VPLLASTDATE + 1
				IF MONTH(PLDATE) <> MONTH(VPLLASTDATE)
					EXIT
				ENDIF
			ENDDO
			RETURN DTOC(VPLLASTDATE - 1)
		ENDIF
		RETURN DTOC(PLDATE)
	ENDPROC
	*------

	PROCEDURE ITSQLFUNCTION
		LPARAMETER SYS_SETTINGS , VERROR , VFUNCTION
		IF EMPTY(SYS_SETTINGS)
			VERROR = 'FAIL - sys_settings is empty!'
			RETURN ''
		ENDIF
		IF EMPTY(VFUNCTION)
			VERROR = 'FAIL - Function is empty!'
			RETURN ''
		ENDIF
		LOCAL SELECT_WK , ERROR_WK , NEAR_WK , EXACT_WK , _ISERROR , RECNO_WK
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		SET EXCLUSIVE OFF
		SET DELETED ON
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		IF AT('ON',UPPER(DATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(DATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		IF  .NOT. EMPTY(DELETEON)
			&DELETEON.
		ENDIF
		VERROR = 'OK'
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		LCSTRING = ''
		LcString=&VFUNCTION.
		RETURN LCSTRING
	ENDPROC
	*------

	PROCEDURE itname
		LPARAMETER SYS_SETTINGS , VDBF , VCARD_ID , VSEEK , VKEY_VALUE , VFIELD , VERROR
		SET EXCLUSIVE OFF
		ON ERROR
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		VFLAG = 'FALSE'
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT ON
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED ON
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		IF  .NOT. EMPTY(DELETEON)
			&DELETEON.
		ENDIF
		VERROR = 'OK'
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		IF EMPTY(VCONDITION2)
			VCONDITION2 = ' .T.'
		ENDIF
		TMPWORKDBF = SELECT()
		IF USED('itsqldisplaytable')
			USE IN ITSQLDISPLAYTABLE
		ENDIF
		IF  .NOT. EMPTY(VCARD_ID)
			VDBF = ALLTRIM(VDBF) + SUBSTR(ALLTRIM(VCARD_ID),1,2)
			VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
			IF AT('.',VUSEDDBF) = 0
				IF FILE(VUSEDDBF + '.wsd')
					VUSEDDBF = VUSEDDBF + '.wsd'
				ELSE
					VUSEDDBF = VUSEDDBF + '.dbf'
				ENDIF
			ENDIF
			IF FILE(VUSEDDBF)
				use &vuseddbf. alias itsqldisplaytable in 0 again
			ELSE
				SELECT (TMPWORKDBF)
				RETURN ''
			ENDIF
		ELSE
			VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
			IF AT('.',VUSEDDBF) = 0
				IF FILE(VUSEDDBF + '.wsd')
					VUSEDDBF = VUSEDDBF + '.wsd'
				ELSE
					VUSEDDBF = VUSEDDBF + '.dbf'
				ENDIF
			ENDIF
			IF FILE(VUSEDDBF)
				use &vuseddbf. alias itsqldisplaytable in 0 again
			ELSE
				SELECT (TMPWORKDBF)
				RETURN ''
			ENDIF
		ENDIF
		SELECT ITSQLDISPLAYTABLE
		set order to &VSEEK.
		GO TOP
		SEEK VKEY_VALUE
		VFIELD_VALUE = ''
		VFIELD_VALUE = ''
		IF FOUND() AND  .NOT. EOF()
			IF  .NOT. EMPTY(VFIELD)
				VFIELD_VALUE=&VFIELD.
				VFIELD_VALUE = ITSQLOCHAR(VFIELD_VALUE)
			ENDIF
		ENDIF
		SELECT ITSQLDISPLAYTABLE
		IF  .NOT. EOF()
			SKIP
		ENDIF
		IF USED('itsqldisplaytable')
			USE IN ITSQLDISPLAYTABLE
		ENDIF
		SELECT (TMPWORKDBF)
		SET DELETED ON
		SET EXACT OFF
		RETURN VFIELD_VALUE
	ENDPROC
	*------

	PROCEDURE vDispItem
		LPARAMETER LCFORMVARS , LCINIFILE , LNRELEASEFLAG , LCQUERYID , LCPRODUCT_ID , LCPRODUCT_NA ,  ;
			LCQUANTITY , LCUNIT_PRICE , LCDESC
		LOCAL LCSTRING , SELECT_WK , ERROR_WK , NEAR_WK , EXACT_WK , _ISERROR , RECNO_WK
		LCPRODUCT_ID = ''
		LCPRODUCT_NA = ''
		LCQUANTITY = ''
		LCUNIT_PRICE = ''
		LCDESC = ''
		SELECT_WK = SELECT()
		ERROR_WK = ON('error')
		NEAR_WK = SET('near')
		EXACT_WK = SET('exact')
		RECNO_WK = IIF(EOF() .OR. BOF(),0,RECNO())
		_ISERROR = .F.
		LCSTRING = ''
		SET NEAR ON
		SET EXACT OFF
		LCGLOBALITEM = READINIFILE('vdllconfig.ini','DBFFILE','GlobalItem')
		LCGLOBALITEMALIAS = READINIFILE('vdllconfig.ini','DBFFILE','GlobalItemAlias')
		IF EMPTY(LCGLOBALITEM) .OR.  .NOT. FILE(LCGLOBALITEM)
			SELECT (SELECT_WK)
			LCSTRING = 'Error, We can not open the system table!		' + CHR(13) + CHR(10)
			RETURN LCSTRING
		ENDIF
		IF EMPTY(LCGLOBALITEMALIAS)
			LCGLOBALITEMALIAS = LCGLOBALITEM
		ENDIF
		ON ERROR _isError=.T.
		SELECT 0
		IF USED(LCGLOBALITEMALIAS)
			SELECT (LCGLOBALITEMALIAS)
		ELSE
			USE IN 0 SHARED (LCGLOBALITEM) AGAIN ALIAS (LCGLOBALITEMALIAS)
		ENDIF
		IF _ISERROR
			SELECT (SELECT_WK)
			On error &Error_Wk.
			LCSTRING = 'Eror to open the database table!		' + CHR(13) + CHR(10)
			RETURN LCSTRING
		ENDIF
		On Error &Error_WK.
		SELECT (LCGLOBALITEMALIAS)
		SET ORDER TO product_id
		GO TOP
		SEEK LCQUERYID
		IF FOUND()
			LCPRODUCT_ID = PRODUCT_ID
			LCPRODUCT_NA = PRODUCT_NA
			LCQUANTITY = STR(QUANTITY,8,2)
			LCUNIT_PRICE = STR(UNIT_PRICE,8,2)
			LCDESC = DESC
		ELSE
		ENDIF
		LCQUOT = CHR(34)
		LCSTRING =  ;
			LCSTRING + 'Lcproduct_id=' + LCQUOT + LCPRODUCT_ID + LCQUOT + CHR(13) + CHR(10)
		LCSTRING =  ;
			LCSTRING + 'Lcproduct_na=' + LCQUOT + LCPRODUCT_NA + LCQUOT + CHR(13) + CHR(10)
		LCSTRING =  ;
			LCSTRING + 'Lcquantity=' + LCQUOT + LCQUANTITY + LCQUOT + CHR(13) + CHR(10)
		LCSTRING =  ;
			LCSTRING + 'Lcunit_price=' + LCQUOT + LCUNIT_PRICE + LCQUOT + CHR(13) + CHR(10)
		LCSTRING =  ;
			LCSTRING + 'Lcquantity=' + LCQUOT + LCQUANTITY + LCQUOT + CHR(13) + CHR(10)
		LCSTRING = LCSTRING + 'Lcdesc=' + LCQUOT + LCDESC + LCQUOT + CHR(13) + CHR(10)
		SELECT (SELECT_WK)
		RETURN LCSTRING
	ENDPROC
	*------

	PROCEDURE errhand3
		PARAMETER MERROR , MESS , MESS1 , MPROG , MLINENO
		ERROR_YN = .T.
		RETURN 'Error number: ' + LTRIM(STR(MERROR)) + ' Error message: ' + MESS +  ;
			' Line of code with error: ' + MESS1 + ' Line number of error: ' + LTRIM(STR(MLINENO)) +  ;
			' Program with error: ' + MPROG
	ENDPROC
	*------

	PROCEDURE itsqldelete
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VKEY_VALUE
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		VFLAG = 'FALSE'
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT ON
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED ON
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		TMPWORKDBF = SELECT()
		IF USED('itsqldeletetable')
			USE IN ITSQLDELETETABLE
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ELSE
				VUSEDDBF = VUSEDDBF + '.dbf'
			ENDIF
		ENDIF
		use &vuseddbf. alias itsqldeletetable in 0 again
		SELECT ITSQLDELETETABLE
		set order to &VSEEK.
		GO TOP
		SEEK VKEY_VALUE
		IF VARTYPE(VKEY_VALUE) = 'C' .OR. VARTYPE(VKEY_VALUE) = 'M'
			vcondition=" !eof() .and. found()  .and. rtrim(&vkey.)==rtrim(VKEY_VALUE) "
		ELSE
			VCONDITION = ' found()  .and. !eof() '
		ENDIF
		if &vcondition.
			REPLACE ADATETIME WITH DATETIME()
			IF VARTYPE(DDATE) <> 'U'
				REPLACE DDATE WITH 'Y ' + TTOC(DATETIME()) + ' ' + USER_ID
			ENDIF
			DELETE IN ITSQLDELETETABLE
			VERRORASPPDFREPORT = 'OK'
		ELSE
			VERRORASPPDFREPORT = 'FAIL - DELETION FAILED - CONDTION FAILURE'
		ENDIF
		IF USED('itsqldeletetable')
			USE IN ITSQLDELETETABLE
		ENDIF
		SELECT (TMPWORKDBF)
		SET DELETED ON
		SET EXACT OFF
		RETURN VERRORASPPDFREPORT
	ENDPROC
	*------

	PROCEDURE itsqldisplay
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VKEY_VALUE , VFIELD1 , VVALUE1 ,  ;
			VFIELD2 , VVALUE2 , VFIELD3 , VVALUE3 , VFIELD4 , VVALUE4 , VFIELD5 ,  ;
			VVALUE5 , VFIELD6 , VVALUE6 , VFIELD7 , VVALUE7 , VFIELD8 , VVALUE8 ,  ;
			VFIELD9 , VVALUE9 , VFIELD10 , VVALUE10
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		VFLAG = 'FALSE'
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT ON
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED ON
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		IF  .NOT. EMPTY(DELETEON)
			&DELETEON.
		ENDIF
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		TMPWORKDBF = SELECT()
		IF USED('itsqldisplaytable')
			USE IN ITSQLDISPLAYTABLE
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ELSE
				VUSEDDBF = VUSEDDBF + '.dbf'
			ENDIF
		ENDIF
		use &vuseddbf. alias itsqldisplaytable in 0 again
		SELECT ITSQLDISPLAYTABLE
		set order to &VSEEK.
		GO TOP
		SEEK VKEY_VALUE
		IF VARTYPE(VKEY_VALUE) = 'C' .OR. VARTYPE(VKEY_VALUE) = 'M'
			vcondition=" !eof() .and. found()  .and. rtrim(&vkey.)==rtrim(VKEY_VALUE) "
		ELSE
			VCONDITION = ' found()  .and. !eof() '
		ENDIF
		if &vcondition.
			VERRORASPPDFREPORT = 'OK'
			VPLCOUNTER = 1
			DO WHILE VPLCOUNTER <= 10
				VPLFIELD = 'vfield' + ALLTRIM(STR(VPLCOUNTER))
				VPLVALUE = 'vvalue' + ALLTRIM(STR(VPLCOUNTER))
				IF !EMPTY(&vplfield.)
					vplfield=&vplfield.
					&vplvalue.=&vplfield.
				ENDIF
				VPLCOUNTER = VPLCOUNTER + 1
			ENDDO
		ELSE
			VERRORASPPDFREPORT = 'FAIL - CONDITION FAILURE'
		ENDIF
		IF USED('itsqldisplaytable')
			USE IN ITSQLDISPLAYTABLE
		ENDIF
		SELECT (TMPWORKDBF)
		SET DELETED ON
		SET EXACT OFF
		RETURN VERRORASPPDFREPORT
	ENDPROC
	*------

	PROCEDURE itsqlseek
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VKEY_VALUE , VCONDITION2 ,  ;
			VNOOFREC , VFIELD1 , VVALUE1 , VFIELD2 , VVALUE2 , VFIELD3 , VVALUE3 ,  ;
			VFIELD4 , VVALUE4 , VFIELD5 , VVALUE5
		SET EXCLUSIVE OFF
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		VFLAG = 'FALSE'
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT ON
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED ON
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		IF  .NOT. EMPTY(DELETEON)
			&DELETEON.
		ENDIF
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		IF EMPTY(VCONDITION2)
			VCONDITION2 = ' .T.'
		ENDIF
		VNOOFREC = 0
		TMPWORKDBF = SELECT()
		IF USED('itsqldisplaytable')
			USE IN ITSQLDISPLAYTABLE
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ENDIF
		ENDIF
		use &vuseddbf. alias itsqldisplaytable in 0 again
		SELECT ITSQLDISPLAYTABLE
		set order to &VSEEK.
		GO TOP
		SEEK VKEY_VALUE
		IF VARTYPE(VKEY_VALUE) = 'C' .OR. VARTYPE(VKEY_VALUE) = 'M'
			vcondition=" found() .and. !eof() .and. rtrim(UPPER(&vkey.))==rtrim(UPPER(VKEY_VALUE)) "
		ELSE
			vcondition=" found()  .and. !eof() .and. &vkey. = VKEY_VALUE"
		ENDIF
		VERRORASPPDFREPORT = 'FAIL'
		DO WHILE MACROS  ???FUN[CA] ('&vcondition.')
			if &vcondition. .and. &VCONDITION2.
				VERRORASPPDFREPORT = 'OK'
				VNOOFREC = VNOOFREC + 1
				VPLCOUNTER = 1
				DO WHILE VPLCOUNTER <= 5
					VPLFIELD = 'vfield' + ALLTRIM(STR(VPLCOUNTER))
					VPLVALUE = 'vvalue' + ALLTRIM(STR(VPLCOUNTER))
					IF !EMPTY(&vplfield.)
						vplfield=&vplfield.
						&vplvalue.=&vplfield.
					ENDIF
					VPLCOUNTER = VPLCOUNTER + 1
				ENDDO
			ENDIF
			SELECT ITSQLDISPLAYTABLE
			IF  .NOT. EOF()
				SKIP
			ENDIF
		ENDDO
		IF USED('itsqldisplaytable')
			USE IN ITSQLDISPLAYTABLE
		ENDIF
		SELECT (TMPWORKDBF)
		SET DELETED ON
		SET EXACT OFF
		RETURN VERRORASPPDFREPORT
	ENDPROC
	*------

	PROCEDURE itsqlupdatefield
		LPARAMETER SYS_SETTINGS , VTYPE , VSCREEN_ID , VUSER_ID , VSECURITY_ID , VDBF , VSEEK ,  ;
			VKEY , VKEY_VALUE , VFIELD1 , VVALUE1 , VFIELD2 , VVALUE2 , VFIELD3 ,  ;
			VVALUE3
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID = VUSER_ID
		SECURITY_ID = VSECURITY_ID
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		_ISERROR = .F.
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT OFF
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED OFF
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		VUSEDDBF = ALLTRIM(SET_SYSPATH) + 'sysflds'
		TMPWORKDBF = SELECT()
		IF USED('itsqlupdatetable')
			USE IN ITSQLUPDATETABLE
		ENDIF
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ELSE
				VUSEDDBF = VUSEDDBF + '.dbf'
			ENDIF
		ENDIF
		IF FILE(VUSEDDBF)
			IF  .NOT. USED('itsqlsysflds')
				use &vuseddbf. alias itsqlsysflds order table_name in 0 again
			ENDIF
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ELSE
				VUSEDDBF = VUSEDDBF + '.dbf'
			ENDIF
		ENDIF
		SET MULTILOCKS ON
		use &vuseddbf. alias itsqlupdatetable in 0 again SHARED
		SELECT ITSQLUPDATETABLE
		= CURSORSETPROP('buffering',3)
		GO TOP
		IF  .NOT. EMPTY(VSEEK)
			set order to &VSEEK.
			GO TOP
			SEEK VKEY_VALUE
		ENDIF
		DO WHILE  .NOT. EOF()
			IF &VKEY. = VKEY_VALUE
				VPLCOUNTER = 1
				DO WHILE VPLCOUNTER <= 3
					VPLFIELD = 'vfield' + ALLTRIM(STR(VPLCOUNTER))
					VPLVALUE = 'vvalue' + ALLTRIM(STR(VPLCOUNTER))
					IF !EMPTY(&vplfield.)
						vplfield=&vplfield.
						vplvalue=&vplvalue.
						VFIELD_TYPE=vartype(&vplfield.)
						VVALUE = VPLVALUE
						IF SUBSTR(VFIELD_TYPE,1,1) = 'C' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'M' .OR.  ;
								EMPTY(VFIELD_TYPE)
							VPLVALUE = VVALUE
						ENDIF
						IF SUBSTR(VFIELD_TYPE,1,1) = 'D'
							IF VARTYPE(VVALUE) = 'D'
								VPLVALUE = VVALUE
							ELSE
								VPLVALUE = CTOD(VVALUE)
							ENDIF
						ENDIF
						IF SUBSTR(VFIELD_TYPE,1,1) = 'N' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'I' .OR.  ;
								SUBSTR(VFIELD_TYPE,1,1) = 'F' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'Y'
							IF VARTYPE(VVALUE) = 'N' .OR. VARTYPE(VVALUE) = 'Y'
								VPLVALUE = VVALUE
							ELSE
								VPLVALUE = VAL(STRTRAN(VVALUE,',',''))
							ENDIF
						ENDIF
						IF SUBSTR(VFIELD_TYPE,1,1) = 'T'
							IF VARTYPE(VVALUE) = 'T'
								VPLVALUE = VVALUE
							ELSE
								VPLVALUE = CTOT(VVALUE)
							ENDIF
						ENDIF
						IF SUBSTR(VFIELD_TYPE,1,1) = 'L'
							IF VARTYPE(VVALUE) = 'L'
								VPLVALUE = VVALUE
							ELSE
								IF UPPER(VVALUE) = 'TRUE' .OR. UPPER(VVALUE) = '.T.' .OR. UPPER(VVALUE) = 'T' .OR.  ;
										UPPER(VVALUE) = '1'
									VPLVALUE = .T.
								ENDIF
								IF UPPER(VVALUE) = 'FALSE' .OR. UPPER(VVALUE) = '.F.' .OR. UPPER(VVALUE) = 'F' .OR.  ;
										UPPER(VVALUE) = '0'
									VPLVALUE = .F.
								ENDIF
							ENDIF
						ENDIF
						replace  &vplfield. with vplvalue
					ENDIF
					VPLCOUNTER = VPLCOUNTER + 1
				ENDDO
				REPLACE ADATETIME WITH DATETIME()
				IF VARTYPE(ADATE) <> 'U'
					REPLACE ADATE WITH TTOC(DATETIME()) + ' ' + USER_ID
				ENDIF
			ENDIF
			SELECT ITSQLUPDATETABLE
			IF  .NOT. EMPTY(VSEEK)
				GO TOP
				SEEK VKEY_VALUE
			ELSE
				SKIP
			ENDIF
			IF EOF()
				EXIT
			ENDIF
		ENDDO
		IF USED('itsqlupdatetable')
			SELECT ITSQLUPDATETABLE
			= TABLEUPDATE(.T.)
			USE IN ITSQLUPDATETABLE
		ENDIF
		IF USED('itsqlsysflds')
			USE IN ITSQLSYSFLDS
		ENDIF
		SELECT (TMPWORKDBF)
		SET DELETED ON
		RETURN VERRORASPPDFREPORT
	ENDPROC
	*------

	PROCEDURE itsqlreturn
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSTATUS , VSEEK , VKEY , VKEY_VALUE ,  ;
			VFIELDRETURN
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		VFLAG = 'FALSE'
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT ON
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED ON
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		IF  .NOT. EMPTY(DELETEON)
			&DELETEON.
		ENDIF
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		TMPWORKDBF = SELECT()
		IF USED('itsqlreturntable')
			USE IN ITSQLRETURNTABLE
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ELSE
				VUSEDDBF = VUSEDDBF + '.dbf'
			ENDIF
		ENDIF
		use &vuseddbf. alias itsqlreturntable in 0 again
		VRETURNVALUE = ''
		SELECT ITSQLRETURNTABLE
		set order to &VSEEK.
		GO TOP
		SEEK VKEY_VALUE
		IF VARTYPE(VKEY_VALUE) = 'C' .OR. VARTYPE(VKEY_VALUE) = 'M'
			vcondition=" found() .and. !eof() .and. rtrim(UPPER(&vkey.))==rtrim(UPPER(VKEY_VALUE)) "
		ELSE
			vcondition=" found()  .and. !eof() .and. &vkey. = VKEY_VALUE"
		ENDIF
		VERRORASPPDFREPORT = 'FAIL'
		if &vcondition.
			VERRORASPPDFREPORT = 'OK'
			vreturnvalue=&vfieldreturn.
		ENDIF
		IF USED('itsqlreturntable')
			USE IN ITSQLRETURNTABLE
		ENDIF
		SELECT (TMPWORKDBF)
		SET DELETED ON
		SET EXACT OFF
		VSTATUS = VERRORASPPDFREPORT
		RETURN VRETURNVALUE
	ENDPROC
	*------

	PROCEDURE itsqlIsACCESS
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VSECURITY_ID , TCFIELD , TCDBF , TCKEY , TCVALUE
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		VFLAG = 'N'
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT ON
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED ON
		ON ERROR VFLAG='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		TMPWORKDBF = SELECT()
		IF USED('SECURITY_check')
			USE IN SECURITY_CHECK
		ENDIF
		VICON_ACCESS = .F.
		VSEEKVALUE = UPPER(VSECURITY_ID + VSCREEN_ID)
		IF EMPTY(TCDBF)
			TCDBF = 'security'
			TCKEY = 'id'
		ELSE
			VSEEKVALUE = UPPER(VSECURITY_ID + VSCREEN_ID + TCVALUE)
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(TCDBF)
		USE IN 0 (VUSEDDBF) AGAIN ALIAS SECURITY_CHECK ORDER (TCKEY)
		SELECT SECURITY_CHECK
		GO TOP
		IF SEEK(VSEEKVALUE)
			VICON_ACCESS = ICON_ACCESS
			IF  .NOT. EMPTY(TCFIELD)
				Vicon_access=&tcfield.
			ENDIF
			USE IN SECURITY_CHECK
		ELSE
			VFLAG = 'N - NOT FOUND'
			VICON_ACCESS = .F.
		ENDIF
		IF VICON_ACCESS
			VFLAG = 'Y'
		ENDIF
		SELECT (TMPWORKDBF)
		SET DELETED ON
		SET EXACT OFF
		RETURN VFLAG
	ENDPROC
	*------

	PROCEDURE itsqlgetvalue
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VKEY_VALUE , VFIELD1
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		VFLAG = 'FALSE'
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT ON
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED ON
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		IF  .NOT. EMPTY(DELETEON)
			&DELETEON.
		ENDIF
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		TMPWORKDBF = SELECT()
		IF USED('itsqldisplaytable')
			USE IN ITSQLDISPLAYTABLE
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ELSE
				VUSEDDBF = VUSEDDBF + '.dbf'
			ENDIF
		ENDIF
		use &vuseddbf. alias itsqldisplaytable in 0 again
		SELECT ITSQLDISPLAYTABLE
		set order to &VSEEK.
		GO TOP
		SEEK VKEY_VALUE
		IF VARTYPE(VKEY_VALUE) = 'C' .OR. VARTYPE(VKEY_VALUE) = 'M'
			vcondition=" !eof() .and. found()  .and. rtrim(&vkey.)==rtrim(VKEY_VALUE) "
		ELSE
			VCONDITION = ' found()  .and. !eof() '
		ENDIF
		if &vcondition.
			VFLAG= itsqlochar(&vfield1.)
		ELSE
			VFLAG = ''
		ENDIF
		IF USED('itsqldisplaytable')
			USE IN ITSQLDISPLAYTABLE
		ENDIF
		SELECT (TMPWORKDBF)
		SET DELETED ON
		SET EXACT OFF
		RETURN VFLAG
	ENDPROC
	*------

	PROCEDURE itsqlstatement
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSELECT , VCURSOR
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		VFLAG = 'FALSE'
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT ON
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED ON
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		TMPWORKDBF = SELECT()
		IF USED(VCURSOR)
			USE IN (VCURSOR)
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		OPEN DATABASE (VUSEDDBF)
		VSQLSTATEMENT = ALLTRIM(VSELECT) + ' into cursor ' + VCURSOR
		&VSQLSTATEMENT.
		SELECT (TMPWORKDBF)
		SELECT (VCURSOR)
		SET DELETED ON
		SET EXACT OFF
		RETURN (VCURSOR)
	ENDPROC
	*------

	PROCEDURE itsqlselect
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VKEY_VALUE , VCONDITION ,  ;
			VSELECTION , VCURSOR , VSTRINGTEXT , VITEMPERPAGE , VPAGENO , VPLTYPE
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		IF AT('ON',UPPER(DATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(DATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT ON
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED ON
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		IF  .NOT. EMPTY(DELETEON)
			&DELETEON.
		ENDIF
		VFLAG = 'FALSE'
		VPLBEGIN = '<BR>'
		VPLEND = '</BR>'
		VPLDELIMITER = '[*|||~]'
		IF EMPTY(VITEMPERPAGE)
			VITEMPERPAGE = 0
		ELSE
			IF UPPER(VARTYPE(VITEMPERPAGE)) <> 'N'
				VITEMPERPAGE = VAL(VITEMPERPAGE)
			ENDIF
		ENDIF
		IF EMPTY(VPAGENO)
			VPAGENO = 0
		ELSE
			IF UPPER(VARTYPE(VPAGENO)) <> 'N'
				VPAGENO = VAL(VPAGENO)
			ENDIF
		ENDIF
		TMPWORKDBF = SELECT()
		IF USED('VCURSOR')
			USE IN VCURSOR
		ENDIF
		IF USED(VCURSOR)
			USE IN (VCURSOR)
		ENDIF
		IF VARTYPE(VKEY_VALUE) = 'C' .OR. VARTYPE(VKEY_VALUE) = 'M'
			VCONDITION2=" !eof() .and. found()  .and. rtrim(&vkey.)==rtrim(VKEY_VALUE) "  + IIF(!EMPTY(VCONDITION)," .AND. "+VCONDITION,"")
		ELSE
			VCONDITION2 =  ;
				' found()  .and. !eof() ' + IIF( .NOT. EMPTY(VCONDITION),' .AND. ' + VCONDITION,'')
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) > 0
			VFILEDBF = ALLTRIM(SUBSTR(VUSEDDBF,1,AT('.',VUSEDDBF) - 1)) + '.cdx'
		ELSE
			VFILEDBF = VUSEDDBF + '.CDX'
		ENDIF
		IF  .NOT. FILE(VFILEDBF)
			VERRORASPPDFREPORT = 'FAIL - Table not found !' + VUSEDDBF
			RETURN VERRORASPPDFREPORT
		ENDIF
		IF AT('from',LOWER(VSELECTION)) > 0
			VSELECTDBF = ALLTRIM(SUBSTR(VSELECTION,AT('from',LOWER(VSELECTION)) + 5,100))
			VSELECTDBF = STRTRAN(VSELECTDBF,',',' ')
			VSELECTDBF = ALLTRIM(SUBSTR(VSELECTDBF,1,AT(' ',VSELECTDBF)))
			IF AT('.',VSELECTDBF) > 0
				IF  .NOT. FILE(ALLTRIM(SET_DATAPATH) + VSELECTDBF)
					VERRORASPPDFREPORT = 'FAIL: Table ' + VSELECTDBF + ' not found !'
					RETURN VERRORASPPDFREPORT
				ENDIF
			ELSE
				VSELECTDBF = VSELECTDBF + '.dbf'
				IF  .NOT. FILE(ALLTRIM(SET_DATAPATH) + VSELECTDBF)
					VERRORASPPDFREPORT =  ;
						'FAIL: Table ' + SUBSTR(VSELECTDBF,1,AT('.',VSELECTDBF) - 1) + ' not found !'
					RETURN VERRORASPPDFREPORT
				ENDIF
			ENDIF
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('SELECT ',UPPER(VSELECTION)) > 0
			VSTRINGTEXT = ''
			VSYSSET_PATH = SET('PATH')
			VSYSSELECTWK = SELECT()
			SET PATH TO (SET_DATAPATH)
			ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
			IF  .NOT. EMPTY(ALLTRIM(VCONDITION)) AND AT('WHERE',UPPER(VSELECTION)) = 0
				VCONDITION = STRTRAN(UPPER(VCONDITION),'WHERE')
				VSYSSELECTION = VSELECTION + ' WHERE ' + ALLTRIM(VCONDITION)
			ELSE
				VSYSSELECTION = ALLTRIM(VSELECTION)
			ENDIF
			&VSYSSELECTION.
			SELECT (VCURSOR)
			IF VITEMPERPAGE <> 0 AND VPAGENO <> 0
				GO TOP
				VSETFILTERTO =  ;
					'SET FILTER TO RECNO()>=' + STR(VITEMPERPAGE * (VPAGENO - 1) + 1) +  ;
					' .AND. RECNO()<=' + STR(VITEMPERPAGE * VPAGENO)
				&VSETFILTERTO.
			ENDIF
			SELECT 0
			VSTRINGTEXT = ITSQLTEXT(SYS_SETTINGS,VCURSOR,'',VPLBEGIN,VPLEND,VPLDELIMITER)
			SET PATH TO (VSYSSET_PATH)
			SELECT (VSYSSELECTWK)
		ELSE
			= ITSQLCREATECURSOR(SYS_SETTINGS,'',VDBF,VCURSOR)
			= ITSQLLOADDATA(SYS_SETTINGS,UPPER(ALLTRIM(VKEY_VALUE)),VSEEK,VKEY,VDBF,VCURSOR,'','',VCONDITION2)
			SELECT (VCURSOR)
			GO TOP
			IF VITEMPERPAGE <> 0 AND VPAGENO <> 0
				GO TOP
				VSETFILTERTO =  ;
					'SET FILTER TO RECNO()>=' + STR(VITEMPERPAGE * (VPAGENO - 1) + 1) +  ;
					' .AND. RECNO()<=' + STR(VITEMPERPAGE * VPAGENO)
				&VSETFILTERTO.
			ENDIF
			VSTRINGTEXT = ''
			VSTRINGTEXT =  ;
				ITSQLTEXT(SYS_SETTINGS,VCURSOR,VSELECTION,VPLBEGIN,VPLEND,VPLDELIMITER)
		ENDIF
		SELECT (VCURSOR)
		GO TOP
		IF EOF()
			VERRORASPPDFREPORT = 'FAIL - EOF'
		ELSE
			VERRORASPPDFREPORT = 'OK'
		ENDIF
		SELECT (TMPWORKDBF)
		SET DELETED ON
		SET EXACT OFF
		RETURN VERRORASPPDFREPORT
	ENDPROC
	*------

	PROCEDURE itsqlselection
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VKEY_VALUE , VCONDITION ,  ;
			VSELECTION , VCURSOR , VSTRINGTEXT , VPLBEGIN , VPLEND , VPLDELIMITER
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		SET EXCLUSIVE OFF
		SET DELETED ON
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		IF AT('ON',UPPER(DATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(DATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		IF  .NOT. EMPTY(DELETEON)
			&DELETEON.
		ENDIF
		IF AT('from',LOWER(VSELECTION)) > 0
			VSELECTDBF = ALLTRIM(SUBSTR(VSELECTION,AT('from',LOWER(VSELECTION)) + 5,100))
			VSELECTDBF = STRTRAN(VSELECTDBF,',',' ')
			VSELECTDBF = ALLTRIM(SUBSTR(VSELECTDBF,1,AT(' ',VSELECTDBF)))
			IF AT('.',VSELECTDBF) > 0
				IF  .NOT. FILE(ALLTRIM(SET_DATAPATH) + VSELECTDBF)
					VERRORASPPDFREPORT = 'FAIL: Table ' + VSELECTDBF + ' not found !'
					RETURN VERRORASPPDFREPORT
				ENDIF
			ELSE
				VSELECTDBF = VSELECTDBF + '.dbf'
				IF  .NOT. FILE(ALLTRIM(SET_DATAPATH) + VSELECTDBF)
					VERRORASPPDFREPORT =  ;
						'FAIL: Table ' + SUBSTR(VSELECTDBF,1,AT('.',VSELECTDBF) - 1) + ' not found !'
					RETURN VERRORASPPDFREPORT
				ENDIF
			ENDIF
		ENDIF
		VSYSSET_PATH = SET('PATH')
		VSYSSELECTWK = SELECT()
		SET PATH TO (SET_DATAPATH)
		VCONDITION2 = ''
		IF  .NOT. EMPTY(VCONDITION)
			VCONDITION2 = ' WHERE ' + VCONDITION
		ENDIF
		VSYSSELECTION = ALLTRIM(VSELECTION + VCONDITION2)
		&VSYSSELECTION.
		SELECT 0
		VSTRINGTEXT = ITSQLTEXT(SYS_SETTINGS,VCURSOR,'',VPLBEGIN,VPLEND,VPLDELIMITER)
		SET PATH TO (VSYSSET_PATH)
		SELECT (VSYSSELECTWK)
		RETURN VERRORASPPDFREPORT
	ENDPROC
	*------

	PROCEDURE ITSQLUPDATEPOST
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VCUSTOMER_ID , VCUSTSEEK , VCUSTKEY , VSECURITY_ID ,  ;
			PAULINDEX , PAULKEY , PAULOLDDBF , PAULNEWDBF , PAULCONDITION ,  ;
			VBANWORD
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		VCUSTOMER_ID = ALLTRIM(UPPER(VCUSTOMER_ID))
		IF EMPTY(VCUSTOMER_ID)
			RETURN 'FAIL - Customer ID is empty!'
		ENDIF
		VUPDATEPOSTSELECT = SELECT()
		SET EXCLUSIVE OFF
		SET TALK OFF
		SET MULTILOCKS ON
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID = ALLTRIM(VCUSTOMER_ID)
		SECURITY_ID = VSECURITY_ID
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		VWEBLOGFILE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,8) + 1,AT(';',SYS_SETTINGS,9) - AT(';',SYS_SETTINGS,8) - 1))
		VCUSTDB =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,9) + 1,AT(';',SYS_SETTINGS,10) - AT(';',SYS_SETTINGS,9) - 1))
		VCUSTWEB =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,10) + 1,AT(';',SYS_SETTINGS,11) - AT(';',SYS_SETTINGS,10) - 1))
		IF EMPTY(VCUSTWEB)
			VCUSTWEB = SUBSTR(SET_DATAPATH,1,RAT('\',SET_DATAPATH,2)) + 'CUSTWEB\'
		ENDIF
		IF EMPTY(VCUSTDB)
			VCUSTDB = SUBSTR(SET_DATAPATH,1,RAT('\',SET_DATAPATH,2)) + 'CUSTDB\'
		ENDIF
		IF RIGHT(VCUSTDB,1) = '\'
			VCUSTDB = SUBSTR(VCUSTDB,1,RAT('\',VCUSTDB) - 1)
		ENDIF
		VDRIVER = UPPER(SUBSTR(VCUSTOMER_ID,1,1))
		IF ASC(VDRIVER) >= 65 AND ASC(VDRIVER) <= 90
			VCUSTDB = VCUSTDB + VDRIVER + '\'
		ELSE
			VCUSTDB = VCUSTDB + '' + '\'
		ENDIF
		IF RIGHT(VCUSTWEB,1) = '\'
			VCUSTWEB = SUBSTR(VCUSTWEB,1,RAT('\',VCUSTWEB) - 1)
		ENDIF
		VDRIVER = UPPER(SUBSTR(VCUSTOMER_ID,1,1))
		IF ASC(VDRIVER) >= 65 AND ASC(VDRIVER) <= 90
			VCUSTWEB = VCUSTWEB + VDRIVER + '\'
		ELSE
			VCUSTWEB = VCUSTWEB + '' + '\'
		ENDIF
		VFROMDBF = ALLTRIM(VCUSTDB) + USER_ID + '\MESSAGE\' + PAULNEWDBF
		IF FILE(VFROMDBF + '.DBF')
			VFROMDBF = VFROMDBF + '.DBF'
		ELSE
			VFROMDBF = VFROMDBF + '.WSD'
		ENDIF
		VTODBF = ALLTRIM(SET_DATAPATH) + '\' + PAULOLDDBF + 'ALL'
		VBANDBF = ALLTRIM(SET_DATAPATH) + '\BANWORD'
		IF FILE(VTODBF + '.DBF')
			VTODBF = VTODBF + '.DBF'
		ELSE
			VTODBF = VTODBF + '.WSD'
		ENDIF
		IF FILE(VBANDBF + '.DBF')
			VBANDBF = VBANDBF + '.DBF'
		ELSE
			VBANDBF = VBANDBF + '.WSD'
		ENDIF
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		IF EMPTY(VWEBLOGFILE)
			VWEBLOGFILE = SET_DATAPATH
		ENDIF
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		IF AT('ON',UPPER(DATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(DATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
		IF EMPTY(USER_ID)
			RETURN 'FAIL: CUSTOMER ID CAN NOT BE EMPTY !'
			RETURN
		ENDIF
		SET EXACT ON
		SET DELETED OFF
		IF EMPTY(PAULCONDITION)
			PAULCONDITION = '.T.'
		ENDIF
		IF USED('paulOLD')
			USE IN PAULOLD
		ENDIF
		PAULOLD = 'paulOLD'
		PAULNEW = PAULNEWDBF
		IF  .NOT. FILE(VBANDBF)
			VERRORASPPDFREPORT = 'FAIL: ' + VBANDBF + ' NOT FOUND !'
			IF USED(PAULOLD)
				USE IN (PAULOLD)
			ENDIF
			IF USED(PAULNEW)
				USE IN (PAULNEW)
			ENDIF
			SELECT (VUPDATEPOSTSELECT)
			RETURN VERRORASPPDFREPORT
		ENDIF
		IF  .NOT. FILE(VFROMDBF)
			VERRORASPPDFREPORT = 'FAIL: ' + VFROMDBF + ' NOT FOUND !'
			IF USED(PAULOLD)
				USE IN (PAULOLD)
			ENDIF
			IF USED(PAULNEW)
				USE IN (PAULNEW)
			ENDIF
			IF USED('BANWORDSCHECKING')
				USE IN BANWORDSCHECKING
			ENDIF
			SELECT (VUPDATEPOSTSELECT)
			RETURN VERRORASPPDFREPORT
		ENDIF
		IF  .NOT. FILE(VTODBF)
			VERRORASPPDFREPORT = 'FAIL: ' + VTODBF + ' NOT FOUND !'
			IF USED(PAULOLD)
				USE IN (PAULOLD)
			ENDIF
			IF USED(PAULNEW)
				USE IN (PAULNEW)
			ENDIF
			IF USED('BANWORDSCHECKING')
				USE IN BANWORDSCHECKING
			ENDIF
			SELECT (VUPDATEPOSTSELECT)
			RETURN VERRORASPPDFREPORT
		ENDIF
		use &VBANDBF. order keyword in 0 alias BANWORDSCHECKING again
		use &vfromdbf. order &paulindex. in 0 alias (paulNEW) again
		use &vtoDBF. order &paulindex. in 0 alias (paulOLD) again
		SELECT (PAULOLD)
		= CURSORSETPROP('Buffering',3)
		PAULKEY_VALUE = ''
		CONTINUE_YN = 0
		PAULDELETED = .F.
		FPAULOLDADATETIME = ALLTRIM(PAULOLD) + '.' + 'ADATETIME'
		FPAULNEWADATETIME = ALLTRIM(PAULNEW) + '.' + 'ADATETIME'
		SELECT (PAULNEW)
		GO TOP
		IF EOF()
			IF USED(PAULOLD)
				USE IN (PAULOLD)
			ENDIF
			IF USED(PAULNEW)
				USE IN (PAULNEW)
			ENDIF
			IF USED('BANWORDSCHECKING')
				USE IN BANWORDSCHECKING
			ENDIF
			SET EXACT OFF
			SET DELETED ON
			SELECT (VUPDATEPOSTSELECT)
			VERRORASPPDFREPORT = 'OK: ' + PAULNEWDBF + ' EOF !'
			RETURN VERRORASPPDFREPORT
		ENDIF
		LOCAL PAULFIELD , PAULFIELD_VALUE
		SELECT (PAULNEW)
		paulKEY_VALUE=&paulKEY.
		PAULDELETED = DELETED()
		PAULNOREC = 0
		PAULSELECT = .T.
		SET EXACT OFF
		SET NEAR ON
		PAULCONDITION2 = ' .AND. .T.'
		IF  .NOT. EMPTY(VCUSTSEEK) AND  .NOT. EMPTY(VCUSTKEY) AND  .NOT. EMPTY(VCUSTOMER_ID)
			SET ORDER TO &VCUSTSEEK.
			GO TOP
			SEEK VCUSTOMER_ID
			PAULCONDITION2 = VCUSTKEY + "='" + VCUSTOMER_ID + "'"
		ENDIF
		DO WHILE MACROS  ???FUN[CA] ('.NOT. EOF(PAULNEW) .AND. &paulcondition2.')
			VSELECTED = .T.
			IF  .NOT. EMPTY(VBANWORD)
				VBANNAME=ALLTRIM(UPPER(&VBANWORD.))
				SELECT BANWORDSCHECKING
				GO TOP
				SEEK VBANNAME
				IF FOUND() AND VBANNAME == ALLTRIM(UPPER(KEYWORD))
					VSELECTED = .F.
					SELECT (PAULNEW)
					REPLACE PDATE WITH TTOC(DATETIME())
					REPLACE REASON WITH 'FAIL: simple/banned !'
					REPLACE POSTED WITH 'Y'
				ENDIF
			ENDIF
			SELECT (PAULNEW)
			VCARD_ID = CARD_ID
			if &paulcondition. .and. VSELECTED
				SELECT (PAULNEW)
				PAULDELETED = DELETED()
				paulKEY_VALUE=&paulKEY.
				SELECT (PAULOLD)
				GO TOP
				SEEK PAULKEY_VALUE
				IF FOUND(PAULOLD)
					CONTINUE_YN = 1
					IF PAULDELETED
						DELETE
					ELSE
						IF DELETED('PAULOLD')
							RECALL
						ENDIF
					ENDIF
				ELSE
					IF  .NOT. PAULDELETED
						CONTINUE_YN = 0
						SELECT (PAULOLD)
						APPEND BLANK
					ELSE
						SELECT (PAULNEW)
						SKIP
						LOOP
					ENDIF
				ENDIF
				ON ERROR
				SELECT (PAULOLD)
				PAULNOREC = PAULNOREC + 1
				FOR GNCOUNT = 1 TO FCOUNT()
					PAULFIELD = FIELD(GNCOUNT)
					FPAULOLD = ALLTRIM(PAULOLD) + '.' + ALLTRIM(PAULFIELD)
					FPAULNEW = ALLTRIM(PAULNEW) + '.' + ALLTRIM(PAULFIELD)
					PAULFIELDSELECT = .T.
					SELECT (PAULNEW)
					IF VARTYPE(&PAULFIELD.)="U"
						PAULFIELDSELECT = .F.
					ENDIF
					SELECT (PAULOLD)
					IF VARTYPE(&PAULFIELD.)="U"
						PAULFIELDSELECT = .F.
					ENDIF
					SELECT (PAULOLD)
					IF PAULSELECT AND PAULFIELDSELECT
						SELECT (PAULOLD)
						REPLACE &FpaulOLD. WITH &FpaulNEW.
					ENDIF
				ENDFOR
				VTOSUBDBF =  ;
					ALLTRIM(SET_DATAPATH) + '\' + PAULOLDDBF + ALLTRIM(SUBSTR(VCARD_ID,1,2))
				IF FILE(VTOSUBDBF + '.DBF')
					VTOSUBDBF = VTOSUBDBF + '.DBF'
				ELSE
					VTOSUBDBF = VTOSUBDBF + '.WSD'
				ENDIF
				IF FILE(VTOSUBDBF)
					IF USED('SQLSUBTABLEUPDATE')
						USE IN SQLSUBTABLEUPDATE
					ENDIF
					use &VTOSUBDBF. order &paulindex. in 0 alias SQLSUBTABLEUPDATE again
					SELECT SQLSUBTABLEUPDATE
					GO TOP
					SEEK PAULKEY_VALUE
					IF FOUND('SQLSUBTABLEUPDATE')
						CONTINUE_YN = 1
						IF PAULDELETED
							DELETE
						ELSE
							IF DELETED('SQLSUBTABLEUPDATE')
								RECALL
							ENDIF
						ENDIF
					ELSE
						IF  .NOT. PAULDELETED
							CONTINUE_YN = 0
							SELECT SQLSUBTABLEUPDATE
							APPEND BLANK
						ELSE
							SELECT (PAULNEW)
							SKIP
							LOOP
						ENDIF
					ENDIF
					SELECT SQLSUBTABLEUPDATE
					PAULNOREC = PAULNOREC + 1
					FOR GNCOUNT = 1 TO FCOUNT()
						PAULFIELD = FIELD(GNCOUNT)
						FPAULOLD = 'SQLSUBTABLEUPDATE' + '.' + ALLTRIM(PAULFIELD)
						FPAULNEW = ALLTRIM(PAULNEW) + '.' + ALLTRIM(PAULFIELD)
						VPAULFIELDSELECT = .F.
						SELECT (PAULNEW)
						VPAULFIELDSELECT=VARTYPE(&PAULFIELD.)<>"U"
						SELECT SQLSUBTABLEUPDATE
						IF PAULSELECT .AND. VPAULFIELDSELECT .AND. VARTYPE(&PAULFIELD.)<>"U"
							REPLACE &FpaulOLD. WITH &FpaulNEW.
						ENDIF
					ENDFOR
					IF USED('SQLSUBTABLEUPDATE')
						USE IN SQLSUBTABLEUPDATE
					ENDIF
				ENDIF
			ENDIF
			SELECT (PAULNEW)
			SKIP
			PAULDELETED = DELETED()
			paulKEY_VALUE=&paulKEY.
		ENDDO
		SELECT (PAULOLD)
		VPLUPDATEOK = TABLEUPDATE(.T.)
		IF  .NOT. VPLUPDATEOK
			= TABLEREVERT(.T.)
			VERRORASPPDFREPORT = 'FAIL: ' + PAULOLDDBF + ' UPDATE FAILED !'
		ENDIF
		IF USED(PAULOLD)
			USE IN (PAULOLD)
		ENDIF
		IF USED(PAULNEW)
			USE IN (PAULNEW)
		ENDIF
		IF USED('BANWORDSCHECKING')
			USE IN BANWORDSCHECKING
		ENDIF
		SET EXACT OFF
		SET DELETED ON
		SELECT (VUPDATEPOSTSELECT)
		RETURN VERRORASPPDFREPORT
	ENDPROC
	*------

	PROCEDURE itsqlupdate
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VKEY_VALUE , VFIELD1 , VVALUE1 ,  ;
			VFIELD2 , VVALUE2 , VFIELD3 , VVALUE3 , VFIELD4 , VVALUE4 , VFIELD5 ,  ;
			VVALUE5 , VFIELD6 , VVALUE6 , VFIELD7 , VVALUE7 , VFIELD8 , VVALUE8 ,  ;
			VFIELD9 , VVALUE9 , VFIELD10 , VVALUE10
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		IF AT('ON',UPPER(DATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(DATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
		_ISERROR = .F.
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT OFF
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED OFF
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		VUSEDDBF = ALLTRIM(SET_SYSPATH) + 'sysflds'
		TMPWORKDBF = SELECT()
		IF USED('itsqlupdatetable')
			USE IN ITSQLUPDATETABLE
		ENDIF
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ELSE
				VUSEDDBF = VUSEDDBF + '.dbf'
			ENDIF
		ENDIF
		IF FILE(VUSEDDBF)
			IF  .NOT. USED('itsqlsysflds')
				use &vuseddbf. alias itsqlsysflds order table_name in 0 again
			ENDIF
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ELSE
				VUSEDDBF = VUSEDDBF + '.dbf'
			ENDIF
		ENDIF
		SET MULTILOCKS ON
		use &vuseddbf. alias itsqlupdatetable in 0 again SHARED
		SELECT ITSQLUPDATETABLE
		= CURSORSETPROP('buffering',3)
		GO TOP
		set order to &VSEEK.
		GO TOP
		SEEK VKEY_VALUE
		IF FOUND()
			IF DELETED()
				RECALL
				IF VARTYPE(DDATE) <> 'U'
					REPLACE DDATE WITH ''
				ENDIF
			ENDIF
			= ITSQLRECUPDATE(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VKEY_VALUE,VFIELD1,VVALUE1,VFIELD2,VVALUE2,VFIELD3,VVALUE3,VFIELD4,VVALUE4,VFIELD5,VVALUE5,VFIELD6,VVALUE6,VFIELD7,VVALUE7,VFIELD8,VVALUE8,VFIELD9,VVALUE9,VFIELD10,VVALUE10)
		ELSE
			APPEND BLANK
			= ITSQLRECADD(SYS_SETTINGS,VSCREEN_ID,VDBF,VSEEK,VKEY,VKEY_VALUE,VFIELD1,VVALUE1,VFIELD2,VVALUE2,VFIELD3,VVALUE3,VFIELD4,VVALUE4,VFIELD5,VVALUE5,VFIELD6,VVALUE6,VFIELD7,VVALUE7,VFIELD8,VVALUE8,VFIELD9,VVALUE9,VFIELD10,VVALUE10)
		ENDIF
		IF USED('itsqlupdatetable')
			SELECT ITSQLUPDATETABLE
			= TABLEUPDATE(.T.)
			USE IN ITSQLUPDATETABLE
		ENDIF
		IF USED('itsqlsysflds')
			USE IN ITSQLSYSFLDS
		ENDIF
		IF USED('itsqlupdatetable')
			USE IN ITSQLUPDATETABLE
		ENDIF
		SELECT (TMPWORKDBF)
		SET DELETED ON
		RETURN VERRORASPPDFREPORT
	ENDPROC
	*------

	PROCEDURE itsqlupdate2
		LPARAMETER SYS_SETTINGS , VTYPE , VSCREEN_ID , VUSER_ID , VSECURITY_ID , VDBF , VSEEK ,  ;
			VKEY , VKEY_VALUE , VFIELD1 , VVALUE1 , VFIELD2 , VVALUE2 , VFIELD3 ,  ;
			VVALUE3 , VFIELD4 , VVALUE4 , VFIELD5 , VVALUE5 , VFIELD6 , VVALUE6 ,  ;
			VFIELD7 , VVALUE7 , VFIELD8 , VVALUE8
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID = VUSER_ID
		SECURITY_ID = VSECURITY_ID
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		IF AT('ON',UPPER(DATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(DATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
		VERROR2 = 'OK'
		_ISERROR = .F.
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT OFF
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED OFF
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		VUSEDDBF = ALLTRIM(SET_SYSPATH) + 'sysflds'
		TMPWORKDBF = SELECT()
		IF USED('itsqlupdatetable')
			USE IN ITSQLUPDATETABLE
		ENDIF
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ELSE
				VUSEDDBF = VUSEDDBF + '.dbf'
			ENDIF
		ENDIF
		IF FILE(VUSEDDBF)
			IF  .NOT. USED('itsqlsysflds')
				use &vuseddbf. alias itsqlsysflds order table_name in 0 again
			ENDIF
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ELSE
				VUSEDDBF = VUSEDDBF + '.dbf'
			ENDIF
		ENDIF
		SET MULTILOCKS ON
		use &vuseddbf. alias itsqlupdatetable in 0 again SHARED
		SELECT ITSQLUPDATETABLE
		= CURSORSETPROP('buffering',3)
		GO TOP
		set order to &VSEEK.
		GO TOP
		SEEK VKEY_VALUE
		IF FOUND()
			IF UPPER(VTYPE) <> 'ADD'
				IF DELETED()
					RECALL
					IF VARTYPE(DDATE) <> 'U'
						REPLACE DDATE WITH ''
					ENDIF
				ENDIF
				VERROR2 =  ;
					ITSQLRECUPDATE2(SYS_SETTINGS,VTYPE,VSCREEN_ID,VUSER_ID,VSECURITY_ID,VDBF,VSEEK,VKEY,VKEY_VALUE,VFIELD1,VVALUE1,VFIELD2,VVALUE2,VFIELD3,VVALUE3,VFIELD4,VVALUE4,VFIELD5,VVALUE5,VFIELD6,VVALUE6,VFIELD7,VVALUE7,VFIELD8,VVALUE8)
			ELSE
				VERRORASPPDFREPORT = 'FAIL:EXISTS!'
			ENDIF
		ELSE
			APPEND BLANK
			VERROR2 =  ;
				ITSQLRECADD2(SYS_SETTINGS,VTYPE,VSCREEN_ID,VUSER_ID,VSECURITY_ID,VDBF,VSEEK,VKEY,VKEY_VALUE,VFIELD1,VVALUE1,VFIELD2,VVALUE2,VFIELD3,VVALUE3,VFIELD4,VVALUE4,VFIELD5,VVALUE5,VFIELD6,VVALUE6,VFIELD7,VVALUE7,VFIELD8,VVALUE8)
		ENDIF
		IF USED('itsqlupdatetable')
			SELECT ITSQLUPDATETABLE
			= TABLEUPDATE(.T.)
			USE IN ITSQLUPDATETABLE
		ENDIF
		IF USED('itsqlsysflds')
			USE IN ITSQLSYSFLDS
		ENDIF
		IF USED('itsqlupdatetable')
			USE IN ITSQLUPDATETABLE
		ENDIF
		SELECT (TMPWORKDBF)
		SET DELETED ON
		IF SUBSTR(VERROR2,1,4) = 'FAIL'
			RETURN VERROR2
		ELSE
			RETURN VERRORASPPDFREPORT
		ENDIF
	ENDPROC
	*------

	PROCEDURE itinitdirs
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VCUSTOMER_ID , VSECURITY_ID
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		VCUSTOMER_ID = ALLTRIM(UPPER(VCUSTOMER_ID))
		IF EMPTY(VCUSTOMER_ID)
			RETURN 'FAIL - Customer ID is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET TALK OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID = ALLTRIM(VCUSTOMER_ID)
		SECURITY_ID = VSECURITY_ID
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		VWEBLOGFILE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,8) + 1,AT(';',SYS_SETTINGS,9) - AT(';',SYS_SETTINGS,8) - 1))
		VCUSTDB =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,9) + 1,AT(';',SYS_SETTINGS,10) - AT(';',SYS_SETTINGS,9) - 1))
		VCUSTWEB =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,10) + 1,AT(';',SYS_SETTINGS,11) - AT(';',SYS_SETTINGS,10) - 1))
		IF EMPTY(VCUSTWEB)
			VCUSTWEB = SUBSTR(SET_DATAPATH,1,RAT('\',SET_DATAPATH,2)) + 'CUSTWEB\'
		ENDIF
		IF EMPTY(VCUSTDB)
			VCUSTDB = SUBSTR(SET_DATAPATH,1,RAT('\',SET_DATAPATH,2)) + 'CUSTDB\'
		ENDIF
		IF RIGHT(VCUSTDB,1) = '\'
			VCUSTDB = SUBSTR(VCUSTDB,1,RAT('\',VCUSTDB) - 1)
		ENDIF
		VDRIVER = UPPER(SUBSTR(VCUSTOMER_ID,1,1))
		IF ASC(VDRIVER) >= 65 AND ASC(VDRIVER) <= 90
			VCUSTDB = VCUSTDB + VDRIVER + '\'
		ELSE
			VCUSTDB = VCUSTDB + '' + '\'
		ENDIF
		IF RIGHT(VCUSTWEB,1) = '\'
			VCUSTWEB = SUBSTR(VCUSTWEB,1,RAT('\',VCUSTWEB) - 1)
		ENDIF
		VDRIVER = UPPER(SUBSTR(VCUSTOMER_ID,1,1))
		IF ASC(VDRIVER) >= 65 AND ASC(VDRIVER) <= 90
			VCUSTWEB = VCUSTWEB + VDRIVER + '\'
		ELSE
			VCUSTWEB = VCUSTWEB + '' + '\'
		ENDIF
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		IF EMPTY(VWEBLOGFILE)
			VWEBLOGFILE = SET_DATAPATH
		ENDIF
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		IF AT('ON',UPPER(DATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(DATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
		IF EMPTY(USER_ID)
			RETURN 'FAIL: CUSTOMER ID CAN NOT BE EMPTY !'
			RETURN
		ENDIF
		VTEMPDIR = VCUSTDB + USER_ID + '\MESSAGE\'
		IF  .NOT. DIRECTORY(VTEMPDIR)
			MD &VTEMPDIR.
		ENDIF
		VTEMPDIR = VCUSTDB + USER_ID + '\ORDERS\'
		IF  .NOT. DIRECTORY(VTEMPDIR)
			MD &VTEMPDIR.
		ENDIF
		VTEMPDIR = VCUSTWEB + USER_ID + '\PROFILE\'
		IF  .NOT. DIRECTORY(VTEMPDIR)
			MD &VTEMPDIR.
		ENDIF
		VTEMPDIR = VCUSTWEB + USER_ID + '\PRODUCT\'
		IF  .NOT. DIRECTORY(VTEMPDIR)
			MD &VTEMPDIR.
		ENDIF
		VTEMPDIR = VCUSTWEB + USER_ID + '\BUYING\'
		IF  .NOT. DIRECTORY(VTEMPDIR)
			MD &VTEMPDIR.
		ENDIF
		VTEMPDIR = VCUSTWEB + USER_ID + '\SELLING\'
		IF  .NOT. DIRECTORY(VTEMPDIR)
			MD &VTEMPDIR.
		ENDIF
		VTEMPDIR = VCUSTWEB + USER_ID + '\STORY\'
		IF  .NOT. DIRECTORY(VTEMPDIR)
			MD &VTEMPDIR.
		ENDIF
		VFROMDIR = ALLTRIM(SET_DATAPATH) + '\tempdb\message\'
		VTODIR = ALLTRIM(VCUSTDB) + USER_ID + '\MESSAGE\'
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Deleted.CDX','Deleted.CDX')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Deleted.WSD','Deleted.WSD')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Deleted.FPT','Deleted.FPT')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Drafts.CDX','Drafts.CDX')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Drafts.WSD','Drafts.WSD')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Drafts.FPT','Drafts.FPT')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Folder.CDX','Folder.CDX')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Folder.WSD','Folder.WSD')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'folder.FPT','Folder.FPT')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Inbox.CDX','Inbox.CDX')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Inbox.WSD','Inbox.WSD')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'inbox.FPT','Inbox.FPT')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Outbox.CDX','Outbox.CDX')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Outbox.WSD','Outbox.WSD')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Outbox.FPT','Outbox.FPT')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Sent.CDX','Sent.CDX')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Sent.WSD','Sent.WSD')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Sent.FPT','Sent.FPT')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Prodmast.WSD','Prodmast.WSD')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Prodmast.cdx','Prodmast.CDX')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Prodmast.fpt','Prodmast.FPT')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Sellmast.WSD','Sellmast.WSD')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Sellmast.cdx','Sellmast.CDX')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Sellmast.fpt','Sellmast.FPT')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Buymast.WSD','Buymast.WSD')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Buymast.cdx','Buymast.CDX')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Buymast.fpt','Buymast.FPT')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Prodcat.WSD','Prodcat.WSD')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'Prodcat.cdx','Prodcat.CDX')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'custdocs.WSD','Custdocs.WSD')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'custdocs.cdx','Custdocs.CDX')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'custdocs.fpt','Custdocs.FPT')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'custdocs.WSD','Custfold.WSD')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'custdocs.cdx','Custfold.CDX')
		VERRORASPPDFREPORT = ITCOPYFILES(VFROMDIR,VTODIR,'custdocs.fpt','Custfold.FPT')
		RETURN VERRORASPPDFREPORT
	ENDPROC
	*------

	PROCEDURE itsqlgetinfo
		LPARAMETER VCUSTOMER_ID , VSUBFOLDER , VDOC_ID , VEXT , VMAINFOLDER , VERROR
		VCUSTOMER_ID = ALLTRIM(UPPER(VCUSTOMER_ID))
		VDOC_ID = ALLTRIM(CHRTRANC(VDOC_ID,"\/:?*<>|;'" + CHR(34),''))
		IF EMPTY(VDOC_ID)
			VERROR = 'FAIL - DOC ID is empty!'
			RETURN ''
		ENDIF
		IF  .NOT. EMPTY(VEXT)
			IF AT('.',VEXT) > 0
				VDOC_ID = VDOC_ID + ALLTRIM(VEXT)
			ELSE
				VDOC_ID = VDOC_ID + '.' + ALLTRIM(VEXT)
			ENDIF
		ENDIF
		SET EXCLUSIVE OFF
		SET TALK OFF
		USER_ID = ALLTRIM(VCUSTOMER_ID)
		IF EMPTY(VMAINFOLDER)
			VCUSTWEB = 'CUSTWEB'
		ELSE
			VCUSTWEB = VMAINFOLDER + ''
		ENDIF
		VDRIVER = UPPER(SUBSTR(VCUSTOMER_ID,1,1))
		IF ASC(VDRIVER) >= 65 AND ASC(VDRIVER) <= 90
			VCUSTWEB = VCUSTWEB + VDRIVER
		ENDIF
		IF  .NOT. EMPTY(USER_ID)
			VCUSTWEB = VCUSTWEB + '/' + USER_ID
		ENDIF
		IF  .NOT. EMPTY(VSUBFOLDER)
			IF  .NOT. EMPTY(ALLTRIM(CHRTRANC(VSUBFOLDER,"\/:?*<>|;'",'')))
				VCUSTWEB =  ;
					VCUSTWEB + '/' + ALLTRIM(CHRTRANC(VSUBFOLDER,"\/:?*<>|;'" + CHR(34),''))
			ENDIF
		ENDIF
		VCUSTWEB = VCUSTWEB + '/' + VDOC_ID
		VERROR = 'OK'
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		RETURN VCUSTWEB
	ENDPROC
	*------

	PROCEDURE ITSQLcustsetting
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VCUSTOMER_ID , VSUBFOLDER , VSECURITY_ID , VERROR
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		VCUSTOMER_ID = ALLTRIM(CHRTRANC(VCUSTOMER_ID,'\/:?*<>|' + CHR(34),''))
		IF EMPTY(VCUSTOMER_ID)
			RETURN 'FAIL - Customer ID is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET TALK OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID = ALLTRIM(VCUSTOMER_ID)
		SECURITY_ID = VSECURITY_ID
		VCUSTDB =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,9) + 1,AT(';',SYS_SETTINGS,10) - AT(';',SYS_SETTINGS,9) - 1))
		IF EMPTY(VCUSTDB)
			VCUSTDB = SUBSTR(SET_DATAPATH,1,RAT('\',SET_DATAPATH,2)) + 'CUSTDB\'
		ENDIF
		IF RIGHT(VCUSTDB,1) = '\'
			VCUSTDB = SUBSTR(VCUSTDB,1,RAT('\',VCUSTDB) - 1)
		ENDIF
		VDRIVER = UPPER(SUBSTR(VCUSTOMER_ID,1,1))
		IF ASC(VDRIVER) >= 65 AND ASC(VDRIVER) <= 90
			VCUSTDB = VCUSTDB + VDRIVER + '\' + VCUSTOMER_ID + '\'
		ELSE
			VCUSTDB = VCUSTDB + '' + '\' + VCUSTOMER_ID + '\'
		ENDIF
		IF  .NOT. EMPTY(VSUBFOLDER)
			IF AT('\',VSUBFOLDER) = 0
				VCUSTDB = VCUSTDB + ALLTRIM(VSUBFOLDER) + '\'
			ELSE
				VCUSTDB = VCUSTDB + ALLTRIM(VSUBFOLDER)
			ENDIF
		ENDIF
		VCUSTDB = VCUSTDB + SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1))
		VERROR = 'OK'
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		RETURN VCUSTDB
	ENDPROC
	*------

	PROCEDURE ITSQLCOPYFILES
		LPARAMETER VFROMDIR , VTODIR , VFILENAME , VTOFILENAME
		VERROR = 'OK'
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		VFILENAME = ALLTRIM(CHRTRANC(VFILENAME,"\/:?*<>|;'" + CHR(34),''))
		VTOFILENAME = ALLTRIM(CHRTRANC(VTOFILENAME,"\/:?*<>|;'" + CHR(34),''))
		VFROMFILENAME = VFROMDIR + VFILENAME
		VTOFILENAME = VTODIR + VTOFILENAME
		IF FILE(VFROMFILENAME) AND  .NOT. FILE(VTOFILENAME)
			COPY FILE &VFROMFILENAME. TO &VTOFILENAME.
		ELSE
			IF  .NOT. FILE(VFROMFILENAME)
				VERROR = 'FAIL: FILE DOES NOT EXIST !' + VFROMFILENAME
			ELSE
				VERROR = 'FAIL: FILE ALREADY EXISTS !'
			ENDIF
		ENDIF
		RETURN VERROR
	ENDPROC
	*------

	PROCEDURE itweblog
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VUSER_ID , VSECURITY_ID , VFILENAME , VDAYWEEKMONTH ,  ;
			VPAGETYPE , VPAGENAME , VCAT_ID , VID , VKEYWORD , VREGION ,  ;
			VCOUNTRY , VMODE , VIEFORMAT , VIPADDRESS_FROM , VLINK_REDIR_FROM ,  ;
			VLOCAL_WEB , VLOCAL_PORT , VLOCAL_LINK
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET TALK OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID = VUSER_ID
		SECURITY_ID = VSECURITY_ID
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		VWEBLOGFILE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,8) + 1,AT(';',SYS_SETTINGS,9) - AT(';',SYS_SETTINGS,8) - 1))
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		IF EMPTY(VWEBLOGFILE)
			VWEBLOGFILE = SET_DATAPATH
		ENDIF
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		IF AT('ON',UPPER(DATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(DATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
		IF EMPTY(VFILENAME)
			VFILENAME = 'WEBLOG'
		ELSE
			VFILENAME = ALLTRIM(VFILENAME)
		ENDIF
		IF RIGHT(VWEBLOGFILE,1) = '\'
			VFILENAME = ALLTRIM(VWEBLOGFILE) + VFILENAME
		ELSE
			VFILENAME = ALLTRIM(VWEBLOGFILE) + '\' + VFILENAME
		ENDIF
		IF EMPTY(VDAYWEEKMONTH)
			VDAYWEEKMONTH = 'D'
		ELSE
			VDAYWEEKMONTH = ALLTRIM(VDAYWEEKMONTH)
		ENDIF
		IF VDAYWEEKMONTH = 'W'
			VFILENAME =  ;
				VFILENAME + ALLTRIM(STR(YEAR(DATE())) + RIGHT('0' + ALLTRIM(STR(WEEK(DATE()))),2))
		ELSE
			IF VDAYWEEKMONTH = 'M'
				VFILENAME =  ;
					VFILENAME + ALLTRIM(STR(YEAR(DATE())) + RIGHT('0' + ALLTRIM(STR(MONTH(DATE()))),2))
			ELSE
				IF VDAYWEEKMONTH = 'D'
					VFILENAME = VFILENAME + ALLTRIM(DTOC(DATE(),1))
				ENDIF
			ENDIF
		ENDIF
		IF USED('ITGLOBALWEBLOG')
			USE IN ITGLOBALWEBLOG
		ENDIF
		VFILENAME = LOWER(VFILENAME + '.WSD')
		VSYSSELECTWK = SELECT()
		IF FILE(VFILENAME)
			IF  .NOT. USED('ITGLOBALWEBLOG')
				USE &VFILENAME. ALIAS ITGLOBALWEBLOG IN 0 AGAIN
			ELSE
				SELECT ITGLOBALWEBLOG
			ENDIF
		ELSE
			IF  .NOT. USED('WEBLOG')
				IF FILE('WEBLOG.WSD')
					USE IN 0 WEBLOG.WSD AGAIN
				ELSE
					VUSEWEBLOG = SET_DATAPATH + '\WEBLOG.WSD'
					USE &VUSEWEBLOG. AGAIN IN 0
				ENDIF
			ENDIF
			SELECT WEBLOG
			COPY STRUCTURE TO &VFILENAME. WITH CDX
			USE IN WEBLOG
			IF  .NOT. USED('ITGLOBALWEBLOG')
				USE &VFILENAME. ALIAS ITGLOBALWEBLOG IN 0 AGAIN
			ELSE
				SELECT ITGLOBALWEBLOG
			ENDIF
		ENDIF
		SELECT ITGLOBALWEBLOG
		IF UPPER(ALIAS()) = 'ITGLOBALWEBLOG'
			APPEND BLANK
			REPLACE USER_ID WITH VUSER_ID
			REPLACE SEC_ID WITH VSECURITY_ID
			REPLACE PAGETYPE WITH VPAGETYPE
			REPLACE PAGENAME WITH VPAGENAME
			REPLACE CAT_ID WITH VCAT_ID
			REPLACE ITEM_ID WITH VID
			REPLACE QUERYMODE WITH VMODE
			REPLACE IEFORMAT WITH VIEFORMAT
			REPLACE IP_FROM WITH VIPADDRESS_FROM
			REPLACE REDIR_FROM WITH VLINK_REDIR_FROM
			REPLACE LOCAL_SERV WITH VLOCAL_WEB
			REPLACE LOCAL_PORT WITH VLOCAL_PORT
			REPLACE LOCAL_LINK WITH VLOCAL_LINK
			REPLACE ADATETIME WITH DATETIME()
			REPLACE REGION WITH VREGION
			REPLACE COUNTRY WITH VCOUNTRY
			REPLACE KEYWORD WITH VKEYWORD
			USE IN ITGLOBALWEBLOG
		ENDIF
		SELECT (VSYSSELECTWK)
		RETURN VERRORASPPDFREPORT
	ENDPROC
	*------

	PROCEDURE itsqlupdatetest2
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VKEY_VALUE , VFIELD1 , VVALUE1 ,  ;
			VFIELD2 , VVALUE2 , VFIELD3 , VVALUE3 , VFIELD4 , VVALUE4 , VFIELD5 ,  ;
			VVALUE5 , VFIELD6 , VVALUE6 , VFIELD7 , VVALUE7 , VFIELD8 , VVALUE8 ,  ;
			VFIELD9 , VVALUE9 , VFIELD10 , VVALUE10
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		_ISERROR = .F.
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT OFF
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED OFF
		ON ERROR _isError=.T.
		VUSEDDBF = ALLTRIM(SET_SYSPATH) + 'sysflds'
		TMPWORKDBF = SELECT()
		IF USED('itsqlupdatetable')
			USE IN ITSQLUPDATETABLE
		ENDIF
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ELSE
				VUSEDDBF = VUSEDDBF + '.dbf'
			ENDIF
		ENDIF
		IF FILE(VUSEDDBF)
			IF  .NOT. USED('itsqlsysflds')
				use &vuseddbf. alias itsqlsysflds order table_name in 0 again
			ENDIF
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ELSE
				VUSEDDBF = VUSEDDBF + '.dbf'
			ENDIF
		ENDIF
		use &vuseddbf. alias itsqlupdatetable in 0 again
		SELECT ITSQLUPDATETABLE
		set order to &VSEEK.
		GO TOP
		SEEK VKEY_VALUE
		IF FOUND()
			IF DELETED()
				RECALL
				IF VARTYPE(DDATE) <> 'U'
					REPLACE DDATE WITH ''
				ENDIF
			ENDIF
			VPLCOUNTER = 1
			DO WHILE VPLCOUNTER <= 10
				VPLFIELD = 'vfield' + ALLTRIM(STR(VPLCOUNTER))
				VPLVALUE = 'vvalue' + ALLTRIM(STR(VPLCOUNTER))
				IF !EMPTY(&vplfield.)
					vplfield=&vplfield.
					vplvalue=&vplvalue.
					VFIELD_TYPE=vartype(&vplfield.)
					VVALUE = VPLVALUE
					IF SUBSTR(VFIELD_TYPE,1,1) = 'C' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'M' .OR.  ;
							EMPTY(VFIELD_TYPE)
						VPLVALUE = VVALUE
					ENDIF
					IF SUBSTR(VFIELD_TYPE,1,1) = 'D'
						IF VARTYPE(VVALUE) = 'D'
							VPLVALUE = VVALUE
						ELSE
							VPLVALUE = CTOD(VVALUE)
						ENDIF
					ENDIF
					IF SUBSTR(VFIELD_TYPE,1,1) = 'N' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'I' .OR.  ;
							SUBSTR(VFIELD_TYPE,1,1) = 'F' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'Y'
						IF VARTYPE(VVALUE) = 'N' .OR. VARTYPE(VVALUE) = 'Y'
							VPLVALUE = VVALUE
						ELSE
							VPLVALUE = VAL(STRTRAN(VVALUE,',',''))
						ENDIF
					ENDIF
					IF SUBSTR(VFIELD_TYPE,1,1) = 'T'
						IF VARTYPE(VVALUE) = 'T'
							VPLVALUE = VVALUE
						ELSE
							VPLVALUE = CTOT(VVALUE)
						ENDIF
					ENDIF
					IF SUBSTR(VFIELD_TYPE,1,1) = 'L'
						IF VARTYPE(VVALUE) = 'L'
							VPLVALUE = VVALUE
						ELSE
							IF UPPER(VVALUE) = 'TRUE' .OR. UPPER(VVALUE) = '.T.' .OR. UPPER(VVALUE) = 'T' .OR.  ;
									UPPER(VVALUE) = '1'
								VPLVALUE = .T.
							ENDIF
							IF UPPER(VVALUE) = 'FALSE' .OR. UPPER(VVALUE) = '.F.' .OR. UPPER(VVALUE) = 'F' .OR.  ;
									UPPER(VVALUE) = '0'
								VPLVALUE = .F.
							ENDIF
						ENDIF
					ENDIF
					replace  &vplfield. with vplvalue
				ENDIF
				VPLCOUNTER = VPLCOUNTER + 1
			ENDDO
			REPLACE ADATETIME WITH DATETIME()
			IF VARTYPE(ADATE) <> 'U'
				REPLACE ADATE WITH TTOC(DATETIME()) + ' ' + USER_ID
			ENDIF
		ELSE
			IF  .NOT. EMPTY(VKEY)
				replace &VKEY. with VKEY_VALUE
			ENDIF
			VPLCOUNTER = 1
			DO WHILE VPLCOUNTER <= 10
				VPLFIELD = 'vfield' + ALLTRIM(STR(VPLCOUNTER))
				VPLVALUE = 'vvalue' + ALLTRIM(STR(VPLCOUNTER))
				IF !EMPTY(&vplfield.)
					vplfield=&vplfield.
					vplvalue=&vplvalue.
					VFIELD_TYPE=vartype(&vplfield.)
					VVALUE = VPLVALUE
					IF SUBSTR(VFIELD_TYPE,1,1) = 'C' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'M' .OR.  ;
							EMPTY(VFIELD_TYPE)
						VPLVALUE = VVALUE
					ENDIF
					IF SUBSTR(VFIELD_TYPE,1,1) = 'D'
						IF VARTYPE(VVALUE) = 'D'
							VPLVALUE = VVALUE
						ELSE
							VPLVALUE = CTOD(VVALUE)
						ENDIF
					ENDIF
					IF SUBSTR(VFIELD_TYPE,1,1) = 'N' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'I' .OR.  ;
							SUBSTR(VFIELD_TYPE,1,1) = 'F' .OR. SUBSTR(VFIELD_TYPE,1,1) = 'Y'
						IF VARTYPE(VVALUE) = 'N' .OR. VARTYPE(VVALUE) = 'Y'
							VPLVALUE = VVALUE
						ELSE
							VPLVALUE = VAL(STRTRAN(VVALUE,',',''))
						ENDIF
					ENDIF
					IF SUBSTR(VFIELD_TYPE,1,1) = 'T'
						IF VARTYPE(VVALUE) = 'T'
							VPLVALUE = VVALUE
						ELSE
							VPLVALUE = CTOT(VVALUE)
						ENDIF
					ENDIF
					IF SUBSTR(VFIELD_TYPE,1,1) = 'L'
						IF VARTYPE(VVALUE) = 'L'
							VPLVALUE = VVALUE
						ELSE
							IF UPPER(VVALUE) = 'TRUE' .OR. UPPER(VVALUE) = '.T.' .OR. UPPER(VVALUE) = 'T' .OR.  ;
									UPPER(VVALUE) = '1'
								VPLVALUE = .T.
							ENDIF
							IF UPPER(VVALUE) = 'FALSE' .OR. UPPER(VVALUE) = '.F.' .OR. UPPER(VVALUE) = 'F' .OR.  ;
									UPPER(VVALUE) = '0'
								VPLVALUE = .F.
							ENDIF
						ENDIF
					ENDIF
					replace  &vplfield. with vplvalue
				ENDIF
				VPLCOUNTER = VPLCOUNTER + 1
			ENDDO
			REPLACE ADATETIME WITH DATETIME()
			IF VARTYPE(ADATE) <> 'U'
				REPLACE ADATE WITH TTOC(DATETIME()) + ' ' + USER_ID
			ENDIF
		ENDIF
		IF USED('itsqlupdatetable')
			USE IN ITSQLUPDATETABLE
		ENDIF
		IF USED('itsqlsysflds')
			USE IN ITSQLSYSFLDS
		ENDIF
		SELECT (TMPWORKDBF)
		SET DELETED ON
		IF _ISERROR
			RETURN 'FAIL'
		ELSE
			RETURN 'OK'
		ENDIF
	ENDPROC
	*------

	PROCEDURE itsqlcrmmessage
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VUSER_ID , VUSER_NAME , VKEY_VALUE , VCUSTOMER_I ,  ;
			VEMAIL , VPASSWORD , VMRMS , VCONTACT_NAME , VFIRST_NAME , VLAST_NAME ,  ;
			VSUBJECT , VMESSAGE , VFILENAME , VFILENAME2 , VLOG
		SET EXCLUSIVE OFF
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		VDBF = 'DEFMEMO'
		VSEEK = 'CODE'
		VKEY = 'CODE'
		VFIELD1 = 'CODE'
		VVALUE1 = ''
		VFIELD2 = 'NAME'
		VVALUE2 = ''
		VFIELD3 = 'REMARKS'
		VVALUE3 = ''
		VEMAIL = VEMAIL
		VEMAIL1 = ''
		VEMAIL2 = ''
		VNAME = VCONTACT_NAME
		USER_NAME = VUSER_NAME
		VNAME2 = ''
		VID = ''
		VID = VCUSTOMER_I
		VFIRST_NAME = ALLTRIM(VFIRST_NAME)
		VLAST_NAME = ALLTRIM(VLAST_NAME)
		VMRMS = ALLTRIM(VMRMS)
		VEMAIL = CHRTRAN(VEMAIL,'/\:?<>|!#$%()*&^~`+= ' + CHR(24),'')
		VEMAIL = STRTRAN(VEMAIL,'...','.')
		VEMAIL = STRTRAN(VEMAIL,'..','.')
		VEMAIL = STRTRAN(VEMAIL,'@@@','@')
		VEMAIL = STRTRAN(VEMAIL,'@@','@')
		VEMAIL = STRTRAN(VEMAIL,',,',';')
		VEMAIL = STRTRAN(VEMAIL,';;;',';')
		VEMAIL = STRTRAN(VEMAIL,';;',';')
		IF EMPTY(VNAME)
			VNAME = SUBSTR(VEMAIL,1,AT('@',VEMAIL) - 1)
		ENDIF
		IF AT(';',VEMAIL) > 0
			VEMAIL1 = SUBSTR(VEMAIL,1,AT(';',VEMAIL) - 1)
			VEMAIL2 = SUBSTR(VEMAIL,AT(';',VEMAIL) + 1,100)
			VNAME2 = SUBSTR(VEMAIL2,1,AT('@',VEMAIL2) - 1)
		ENDIF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		IF  .NOT. EMPTY(VUSER_ID)
			USER_ID = VUSER_ID
		ENDIF
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		VFLAG = 'FALSE'
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT ON
		SET NEAR OFF
		SET EXCLUSIVE OFF
		SET DELETED ON
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		IF  .NOT. EMPTY(DELETEON)
			&DELETEON.
		ENDIF
		VERRORASPPDFREPORT = 'OK'
		ON ERROR verrorAspPDFReport='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		VNOOFREC = 0
		TMPWORKDBF = SELECT()
		IF USED('itsqldisplaytable')
			USE IN ITSQLDISPLAYTABLE
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ENDIF
		ENDIF
		use &vuseddbf. alias itsqldisplaytable in 0 again
		SELECT ITSQLDISPLAYTABLE
		set order to &VSEEK.
		GO TOP
		SEEK VKEY_VALUE
		VERRORASPPDFREPORT = 'FAIL'
		if FOUND() .and. rtrim(UPPER(&vkey.))==rtrim(UPPER(VKEY_VALUE))
			VERRORASPPDFREPORT = 'OK'
			VPLCOUNTER = 1
			DO WHILE VPLCOUNTER <= 3
				VPLFIELD = 'vfield' + ALLTRIM(STR(VPLCOUNTER))
				VPLVALUE = 'vvalue' + ALLTRIM(STR(VPLCOUNTER))
				IF !EMPTY(&vplfield.)
					vplfield=&vplfield.
					&vplvalue.=&vplfield.
				ENDIF
				VPLCOUNTER = VPLCOUNTER + 1
			ENDDO
		ENDIF
		SELECT ITSQLDISPLAYTABLE
		IF USED('itsqldisplaytable')
			USE IN ITSQLDISPLAYTABLE
		ENDIF
		SELECT (TMPWORKDBF)
		VSUBJECT =  ;
			ITADDMEMO(VVALUE2,'','','',VNAME,VEMAIL,VPASSWORD,VID,USER_NAME,VFIRST_NAME,VLAST_NAME,VMRMS,VEMAIL1,VEMAIL2,VNAME2)
		VMESSAGE =  ;
			ITADDMEMO(VVALUE3,'','','',VNAME,VEMAIL,VPASSWORD,VID,USER_NAME,VFIRST_NAME,VLAST_NAME,VMRMS,VEMAIL1,VEMAIL2,VNAME2)
		IF UPPER(VLOG) = 'Y'
			IF USED('itsqlcrmlog')
				USE IN ITSQLCRMLOG
			ENDIF
			VUSEDDBF = ALLTRIM(SET_DATAPATH) + 'CRMOUTBX'
			IF AT('.',VUSEDDBF) = 0
				IF FILE(VUSEDDBF + '.wsd')
					VUSEDDBF = VUSEDDBF + '.wsd'
				ENDIF
			ENDIF
			use &vuseddbf. alias itsqlcrmlog in 0 again
			SELECT ITSQLCRMLOG
			VBS_ID =  ;
				ITGEN_NO2(SYS_SETTINGS,VCUSTOMER_I + '_',"tsyear+tsmonth+RIGHT('00000'+tsRandNo,5)",'CRMOUTBX','BS_ID')
			SELECT ITSQLCRMLOG
			IF LOWER(ALIAS()) = 'itsqlcrmlog'
				APPEND BLANK
				REPLACE FILENAME WITH VFILENAME
				REPLACE FILENAME2 WITH VFILENAME2
				REPLACE ADATETIME WITH DATETIME()
				REPLACE DOCTYPE WITH 'SENT'
				REPLACE BS_ID WITH VBS_ID
				REPLACE SUBJECT WITH VSUBJECT
				REPLACE VERSION WITH 'V2.2'
				REPLACE STATUS WITH '2'
				REPLACE CUSTOMER_I WITH VID
				REPLACE RECEIVER WITH VNAME
				REPLACE SENDER WITH VID
				REPLACE MESSAGE WITH VMESSAGE
				REPLACE TOEMAIL WITH VEMAIL
				REPLACE CDATE WITH  ;
					SUBSTR(DTOS(DATE()),1,4) + '/' + SUBSTR(DTOS(DATE()),5,2) + '/' +  ;
					SUBSTR(DTOS(DATE()),7,2) + ' ' + LEFT(TIME(),5) + ' ' + VUSER_ID
				REPLACE SEC_GRP WITH VSCREEN_ID
				REPLACE CREATOR WITH VUSER_ID
				REPLACE AGENT_ID WITH VUSER_ID
			ENDIF
			IF USED('itsqlcrmlog')
				USE IN ITSQLCRMLOG
			ENDIF
		ENDIF
		SET DELETED ON
		SET EXACT OFF
		RETURN VERRORASPPDFREPORT
	ENDPROC
	*------

	PROCEDURE itsqlgen_no2
		LPARAMETER SYS_SETTINGS , TSHEADER , TSFORMULA , TSMASTER , TSMASTERKEY
		LOCAL SELECT_WK , TSDOC_NO , GENNO , PLTEMPONE , PLTEMPTWO , TSAUTOGEN , LCOLDEXPR
		NOCOUNTBACK = .T.
		LCOLDEXPR = ''
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		IF AT('ON',UPPER(DATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(DATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
		IF USED('TMPDOCCHECK')
			USE IN TMPDOCCHECK
		ENDIF
		SELECT_WK = SELECT()
		TSDOC_NO = ''
		SELECT 0
		TSMASTER = SET_DATAPATH + ALLTRIM(TSMASTER)
		IF AT('.',TSMASTER) = 0
			IF FILE(TSMASTER + '.wsd')
				TSMASTER = TSMASTER + '.wsd'
			ENDIF
		ENDIF
		USE &tsmaster. alias TMPDOCCHECK order &tsMASTERKEY. in 0 again shared
		SET DECIMALS TO 6
		TSCOUNTER = 1
		TSRANDNO = ALLTRIM(STR(INT(RAND() * SECONDS())))
		TSYEAR = RIGHT(ALLTRIM(STR(YEAR(DATE()))),2)
		TSMONTH = RIGHT('0' + ALLTRIM(STR(MONTH(DATE()))),2)
		TSDAY = RIGHT('0' + ALLTRIM(STR(DAY(DATE()))),2)
		tsDOC_NO=ALLTRIM(tsHeader)+&tsFORMULA.
		DO WHILE SEEK(TSDOC_NO,'TMPDOCCHECK',TSMASTERKEY)
			TSRANDNO = ALLTRIM(STR(INT(RAND() * SECONDS())))
			tsDOC_NO=ALLTRIM(tsHeader)+&tsFORMULA.
			TSCOUNTER = TSCOUNTER + 1
			IF TSCOUNTER > 99999
				EXIT
			ENDIF
		ENDDO
		GO IN TMPDOCCHECK BOTTOM
		IF USED('TMPDOCCHECK')
			USE IN TMPDOCCHECK
		ENDIF
		SET DELETED ON
		SELECT (SELECT_WK)
		RETURN TSDOC_NO
	ENDPROC
	*------

	PROCEDURE itsqlgen_no
		LPARAMETER SYS_SETTINGS , TSDBF , TSSEEK_VALUE , TSKEY , TSGEN_NO , TSPLUSONE , TSFORMULA ,  ;
			TSMASTER , TSMASTERKEY , TSRECEXIST_LOC , TSPLUSTWO , TSDBF2 ,  ;
			TSAUTOGEN , TSDOC_RUNNINGNO , TSDOC_RUNNINGFROM
		LOCAL SELECT_WK , TSDOC_NO , GENNO , PLTEMPONE , PLTEMPTWO , TSAUTOGEN , LCOLDEXPR
		NOCOUNTBACK = .T.
		LCOLDEXPR = ''
		IF EMPTY(SYS_SETTINGS)
			RETURN 'FAIL - sys_settings is empty!'
		ENDIF
		IF EMPTY(TSAUTOGEN)
			TSAUTOGEN = 'N'
		ENDIF
		SET EXCLUSIVE OFF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		IF AT('ON',UPPER(DATETYPE)) > 0
			SET CENTURY ON
		ENDIF
		IF AT('OFF',UPPER(DATETYPE)) > 0
			SET CENTURY OFF
		ENDIF
		IF  .NOT. EMPTY(TSDOC_RUNNINGNO)
			IF  .NOT. EMPTY(TSDOC_RUNNINGFROM)
				&tsDOC_RUNNINGNO.=tsDOC_RUNNINGFROM
			ELSE
				&tsDOC_RUNNINGNO.=1
			ENDIF
		ENDIF
		IF USED('TMPDOCCHECK')
			USE IN TMPDOCCHECK
		ENDIF
		IF USED('TMPPARAMETECHECK')
			USE IN TMPPARAMETECHECK
		ENDIF
		SELECT_WK = SELECT()
		SELECT 0
		TSMASTER = SET_DATAPATH + ALLTRIM(TSMASTER)
		TSDBF = SET_DATAPATH + ALLTRIM(TSDBF)
		IF AT('.',TSMASTER) = 0
			IF FILE(TSMASTER + '.wsd')
				TSMASTER = TSMASTER + '.wsd'
			ENDIF
		ENDIF
		IF AT('.',TSDBF) = 0
			IF FILE(TSDBF + '.wsd')
				TSDBF = TSDBF + '.wsd'
			ENDIF
		ENDIF
		USE &tsmaster. alias TMPDOCCHECK order &tsMASTERKEY. in 0 again shared
		USE &tsDBF. alias TMPPARAMETECHECK order &tsKEY. in 0 again shared
		SELECT TMPPARAMETECHECK
		SET DELETED OFF
		set order to &tsKEY.
		GO TOP
		SEEK TSSEEK_VALUE
		IF FOUND()
			IF &tsGEN_NO.
				IF  .NOT. NOCOUNTBACK .OR. TSAUTOGEN = 'Y'
					pltempone=&tsPLUSONE.
					IF  .NOT. EMPTY(TSPLUSTWO)
						pltemptwo=&tsPLUSTWO.
						IF PLTEMPTWO - 2 > 0
							REPLACE &tsPLUSTWO. WITH &tsPLUSTWO. - 2
						ELSE
							REPLACE &tsPLUSTWO. WITH 1
						ENDIF
					ENDIF
					IF PLTEMPONE - 2 > 0
						REPLACE &tsPLUSONE. WITH &tsPLUSONE. - 2
					ELSE
						REPLACE &tsPLUSONE. WITH 1
					ENDIF
				ENDIF
				GENNO=&tsFORMULA.
				tsDOC_NO=&GENNO.
				IF  .NOT. EMPTY(TSPLUSTWO)
					REPLACE &tsPLUSTWO. WITH &tsPLUSTWO.+ 1
				ENDIF
				REPLACE &tsPLUSONE. WITH &tsPLUSONE. + 1
				IF  .NOT. EMPTY(TSDOC_RUNNINGNO)
					&tsDOC_RUNNINGNO.=&tsDOC_RUNNINGNO. +1
				ENDIF
				TSDOCGEN_COUNTER = 1
				DO WHILE SEEK(TSDOC_NO,'TMPDOCCHECK',TSMASTERKEY)
					SELECT TMPPARAMETECHECK
					GENNO=&tsFORMULA.
					tsDOC_NO=&GENNO.
					REPLACE &tsPLUSONE. WITH &tsPLUSONE.+ 1
					IF  .NOT. EMPTY(TSPLUSTWO)
						SELECT (TSDBF2)
						REPLACE &tsPLUSTWO. WITH &tsPLUSTWO.+ 1
					ENDIF
					IF  .NOT. EMPTY(TSDOC_RUNNINGNO)
						&tsDOC_RUNNINGNO.=&tsDOC_RUNNINGNO. +1
					ENDIF
					TSDOCGEN_COUNTER = TSDOCGEN_COUNTER + 1
					IF TSDOCGEN_COUNTER > 9999
						EXIT
					ENDIF
					SELECT TMPPARAMETECHECK
				ENDDO
				IF  .NOT. NOCOUNTBACK .OR. TSAUTOGEN = 'Y'
					IF  .NOT. EMPTY(TSPLUSTWO)
						if pltemptwo > &tsPLUSTWO.
							REPLACE &tsPLUSTWO. WITH pltemptwo
						ENDIF
					ENDIF
					IF pltempone > &tsPLUSONE.
						REPLACE &tsPLUSONE. WITH pltempone
					ENDIF
				ENDIF
				IF  .NOT. EMPTY(TSPLUSTWO)
				ENDIF
				GO IN TMPDOCCHECK BOTTOM
			ELSE
				TSDOC_NO = ''
			ENDIF
		ELSE
			TSDOC_NO = ''
		ENDIF
		IF USED('TMPDOCCHECK')
			USE IN TMPDOCCHECK
		ENDIF
		IF USED('TMPPARAMETECHECK')
			USE IN TMPPARAMETECHECK
		ENDIF
		SET DELETED ON
		SELECT (SELECT_WK)
		RETURN TSDOC_NO
	ENDPROC
	*------

	PROCEDURE ITSQLVALUE
		LPARAMETER VSTRINGTEXT , VRECNO , VFIELD , VPLBEGIN , VPLEND , VPLDELIMITER
		LOCAL VSTRINGTEXT2 , VSTRINGTEXT3
		IF EMPTY(VPLDELIMITER)
			VPLDELIMITER = '[*|||~]'
		ENDIF
		IF EMPTY(VPLBEGIN)
			VPLBEGIN = '<BR>'
		ENDIF
		IF EMPTY(VPLEND)
			VPLEND = '</BR>'
		ENDIF
		VFIELD = UPPER(VFIELD)
		VSTRINGTEXT2 =  ;
			SUBSTR(VSTRINGTEXT,AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXT,VRECNO + 1) + LEN(VPLBEGIN),AT(VPLDELIMITER + VPLEND,VSTRINGTEXT,VRECNO + 1) -  ;
			AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXT,VRECNO + 1) +  ;
			3)
		VCLFIELDCOLUMN = 1
		VCLSELECTION =  ;
			SUBSTR(VSTRINGTEXT,AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXT,1) + LEN(VPLBEGIN),AT(VPLDELIMITER + VPLEND,VSTRINGTEXT,1) - AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXT,1) +  ;
			3)
		VCLFIELD = UPPER(ALLTRIM(VFIELD))
		IF EMPTY(VCLFIELD) .OR. EMPTY(VCLSELECTION)
			VCLFIELDCOLUMN = 0
		ENDIF
		PAULFIELD = SUBSTR(VCLSELECTION,1,AT(',',VCLSELECTION) - 1)
		IF UPPER(ALLTRIM(VCLFIELD)) == UPPER(ALLTRIM(PAULFIELD))
			VCLFIELDCOLUMN = 1
		ELSE
			IF OCCURS(',',VCLSELECTION) > 1
				FOR GNCOUNT = 1 TO OCCURS(',',VCLSELECTION) - 1
					PAULFIELD =  ;
						SUBSTR(VCLSELECTION,AT(',',VCLSELECTION,GNCOUNT) + 1,AT(',',VCLSELECTION,GNCOUNT + 1) - AT(',',VCLSELECTION,GNCOUNT) - 1)
					IF UPPER(ALLTRIM(VCLFIELD)) == UPPER(ALLTRIM(PAULFIELD))
						VCLFIELDCOLUMN = GNCOUNT + 1
					ENDIF
				ENDFOR
			ENDIF
		ENDIF
		VCOLUNMNO = VCLFIELDCOLUMN
		VSTRINGTEXT3 =  ;
			SUBSTR(VSTRINGTEXT2,AT(VPLDELIMITER,VSTRINGTEXT2,VCOLUNMNO) + LEN(VPLDELIMITER),AT(VPLDELIMITER,VSTRINGTEXT2,VCOLUNMNO + 1) -  ;
			AT(VPLDELIMITER,VSTRINGTEXT2,VCOLUNMNO) -  ;
			LEN(VPLDELIMITER))
		RETURN VSTRINGTEXT3
	ENDPROC
	*------

	PROCEDURE itsqlnoofrec
		LPARAMETER SYS_SETTINGS , VSCREEN_ID , VDBF , VSEEK , VKEY , VKEY_VALUE , VCONDITION2 ,  ;
			VERROR
		SET EXCLUSIVE OFF
		IF EMPTY(SYS_SETTINGS)
			VERROR = 'FAIL - sys_settings is empty!'
			RETURN '0'
		ENDIF
		SET_DATAPATH = SUBSTR(SYS_SETTINGS,1,AT(';',SYS_SETTINGS,1) - 1)
		SET_SYSPATH =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,1) + 1,AT(';',SYS_SETTINGS,2) - AT(';',SYS_SETTINGS,1) - 1)
		VDATATYPE =  ;
			SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,2) + 1,AT(';',SYS_SETTINGS,3) - AT(';',SYS_SETTINGS,2) - 1)
		USER_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,3) + 1,AT(';',SYS_SETTINGS,4) - AT(';',SYS_SETTINGS,3) - 1))
		SECURITY_ID =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,4) + 1,AT(';',SYS_SETTINGS,5) - AT(';',SYS_SETTINGS,4) - 1))
		DEPARTMENT =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,5) + 1,AT(';',SYS_SETTINGS,6) - AT(';',SYS_SETTINGS,5) - 1))
		DATETYPE =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,6) + 1,AT(';',SYS_SETTINGS,7) - AT(';',SYS_SETTINGS,6) - 1))
		IF EMPTY(DATETYPE)
			SET DATE TO DMY
		ELSE
			SET DATE TO &datetype.
		ENDIF
		VFLAG = 'FALSE'
		SET SAFETY OFF
		SET TALK OFF
		SET EXACT OFF
		SET NEAR ON
		SET EXCLUSIVE OFF
		SET DELETED ON
		DELETEON =  ;
			UPPER(SUBSTR(SYS_SETTINGS,AT(';',SYS_SETTINGS,7) + 1,AT(';',SYS_SETTINGS,8) - AT(';',SYS_SETTINGS,7) - 1))
		IF  .NOT. EMPTY(DELETEON)
			&DELETEON.
		ENDIF
		VERROR = 'OK'
		VNOOFREC = 0
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		TMPWORKDBF = SELECT()
		IF USED('itsqldisplaytable')
			USE IN ITSQLDISPLAYTABLE
		ENDIF
		VUSEDDBF = ALLTRIM(SET_DATAPATH) + ALLTRIM(VDBF)
		IF AT('.',VUSEDDBF) = 0
			IF FILE(VUSEDDBF + '.wsd')
				VUSEDDBF = VUSEDDBF + '.wsd'
			ENDIF
		ENDIF
		use &vuseddbf. alias itsqldisplaytable in 0 again
		SELECT ITSQLDISPLAYTABLE
		VNOOFREC = 0
		IF  .NOT. EMPTY(VSEEK)
			set order to &VSEEK.
			GO TOP
			SEEK VKEY_VALUE
			IF VARTYPE(VKEY_VALUE) = 'C' .OR. VARTYPE(VKEY_VALUE) = 'M'
				vcondition=" found() .and. !eof() .and. rtrim(UPPER(&vkey.))==rtrim(UPPER(VKEY_VALUE)) "
			ELSE
				vcondition=" found()  .and. !eof() .and. &vkey. = VKEY_VALUE"
			ENDIF
			VERROR = 'FAIL'
			IF EMPTY(VCONDITION2)
				COUNT  WHILE &vcondition. TO VNOOFREC
			ELSE
				SUM  IIF(&vcondition. .and. &VCONDITION2.,1,0)  WHILE &vcondition. TO VNOOFREC
			ENDIF
		ELSE
			VNOOFREC = RECCOUNT()
		ENDIF
		IF USED('itsqldisplaytable')
			USE IN ITSQLDISPLAYTABLE
		ENDIF
		SELECT (TMPWORKDBF)
		SET DELETED ON
		SET EXACT OFF
		RETURN ALLTRIM(TRANSFORM(VNOOFREC))
	ENDPROC
	*------

	PROCEDURE ITSQLRECCOUNT
		LPARAMETER VSTRINGTEXT , VPLBEGIN , VPLEND , VPLDELIMITER
		VLINENO = 1
		IF EMPTY(VPLDELIMITER)
			VPLDELIMITER = '[*|||~]'
		ENDIF
		IF EMPTY(VPLBEGIN)
			VPLBEGIN = '<BR>'
		ENDIF
		IF EMPTY(VPLEND)
			VPLEND = '</BR>'
		ENDIF
		RETURN INT(VAL(SUBSTR(VSTRINGTEXT,AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) + LEN(VPLDELIMITER),AT(VPLDELIMITER,VSTRINGTEXT,VLINENO + 1) - AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) -  ;
			LEN(VPLDELIMITER))))
	ENDPROC
	*------

	PROCEDURE ITSQLRECCOUNTALL
		LPARAMETER VSTRINGTEXT , VPLBEGIN , VPLEND , VPLDELIMITER
		VLINENO = 4
		IF EMPTY(VPLDELIMITER)
			VPLDELIMITER = '[*|||~]'
		ENDIF
		IF EMPTY(VPLBEGIN)
			VPLBEGIN = '<BR>'
		ENDIF
		IF EMPTY(VPLEND)
			VPLEND = '</BR>'
		ENDIF
		RETURN INT(VAL(SUBSTR(VSTRINGTEXT,AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) + LEN(VPLDELIMITER),AT(VPLDELIMITER,VSTRINGTEXT,VLINENO + 1) - AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) -  ;
			LEN(VPLDELIMITER))))
	ENDPROC
	*------

	PROCEDURE ITSQLFIELDCOUNT
		LPARAMETER VSTRINGTEXT , VPLBEGIN , VPLEND , VPLDELIMITER
		VLINENO = 2
		IF EMPTY(VPLDELIMITER)
			VPLDELIMITER = '[*|||~]'
		ENDIF
		IF EMPTY(VPLBEGIN)
			VPLBEGIN = '<BR>'
		ENDIF
		IF EMPTY(VPLEND)
			VPLEND = '</BR>'
		ENDIF
		RETURN INT(VAL(SUBSTR(VSTRINGTEXT,AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) + LEN(VPLDELIMITER),AT(VPLDELIMITER,VSTRINGTEXT,VLINENO + 1) - AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) -  ;
			LEN(VPLDELIMITER))))
	ENDPROC
	*------

	PROCEDURE ITSQLFIELDS
		LPARAMETER VSTRINGTEXT , VPLBEGIN , VPLEND , VPLDELIMITER
		VLINENO = 3
		IF EMPTY(VPLDELIMITER)
			VPLDELIMITER = '[*|||~]'
		ENDIF
		IF EMPTY(VPLBEGIN)
			VPLBEGIN = '<BR>'
		ENDIF
		IF EMPTY(VPLEND)
			VPLEND = '</BR>'
		ENDIF
		RETURN SUBSTR(VSTRINGTEXT,AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) + LEN(VPLDELIMITER),AT(VPLDELIMITER,VSTRINGTEXT,VLINENO + 1) - AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) -  ;
			LEN(VPLDELIMITER))
	ENDPROC
	*------

	PROCEDURE ITSQLPAGECOUNT
		LPARAMETER VSTRINGTEXT , VPLPAGECOUNT , VPLBEGIN , VPLEND , VPLDELIMITER
		VLINENO = 1
		IF EMPTY(VPLPAGECOUNT)
			VPLPAGECOUNT = 20
		ENDIF
		IF EMPTY(VPLDELIMITER)
			VPLDELIMITER = '[*|||~]'
		ENDIF
		IF EMPTY(VPLBEGIN)
			VPLBEGIN = '<BR>'
		ENDIF
		IF EMPTY(VPLEND)
			VPLEND = '</BR>'
		ENDIF
		RETURN INT(CEILING(VAL(SUBSTR(VSTRINGTEXT,AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) + LEN(VPLDELIMITER),AT(VPLDELIMITER,VSTRINGTEXT,VLINENO + 1) - AT(VPLDELIMITER,VSTRINGTEXT,VLINENO) -  ;
			LEN(VPLDELIMITER))) /  ;
			VPLPAGECOUNT))
	ENDPROC
	*------

	PROCEDURE ITSQLFIELDCOLUMN
		LPARAMETER VCLSELECTION , VCLFIELD
		IF EMPTY(VCLFIELD) .OR. EMPTY(VCLSELECTION)
			RETURN 0
		ENDIF
		VCLFIELDCOLUMN = 0
		VCLSELECTION = STRTRAN(UPPER(ITSQLFIELDS(VSTRINGTEXT)),' ')
		VCLFIELD = UPPER(ALLTRIM(VCLFIELD))
		PAULFIELD = SUBSTR(VCLSELECTION,1,AT(',',VCLSELECTION) - 1)
		IF VCLFIELD == PAULFIELD
			VCLFIELDCOLUMN = 1
		ENDIF
		IF OCCURS(',',VCLSELECTION) > 1
			FOR GNCOUNT = 1 TO OCCURS(',',VCLSELECTION) - 1
				PAULFIELD =  ;
					SUBSTR(VCLSELECTION,AT(',',VCLSELECTION,GNCOUNT) + 1,AT(',',VCLSELECTION,GNCOUNT + 1) - AT(',',VCLSELECTION,GNCOUNT) - 1)
				IF VCLFIELD == PAULFIELD
					VCLFIELDCOLUMN = GNCOUNT + 1
				ENDIF
			ENDFOR
		ENDIF
		RETURN VCLFIELDCOLUMN
	ENDPROC
	*------

	PROCEDURE ITSQLRECLINE
		LPARAMETER VSTRINGTEXT , VRECLINO , VPLBEGIN , VPLEND , VPLDELIMITER
		IF EMPTY(VPLDELIMITER)
			VPLDELIMITER = '[*|||~]'
		ENDIF
		IF EMPTY(VPLBEGIN)
			VPLBEGIN = '<BR>'
		ENDIF
		IF EMPTY(VPLEND)
			VPLEND = '</BR>'
		ENDIF
		IF EMPTY(VRECLINO) .OR. VRECLINO = 0
			VRECLINO = 1
		ENDIF
		RETURN SUBSTR(VSTRINGTEXT,AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXT,VRECLINO) + LEN(VPLBEGIN),AT(VPLDELIMITER + VPLEND,VSTRINGTEXT,VRECLINO) -  ;
			AT(VPLBEGIN + VPLDELIMITER,VSTRINGTEXT,VRECLINO) +  ;
			3)
	ENDPROC
	*------

	PROCEDURE itSQLsepvalue
		LPARAMETER GCSTRING , VVALUE1 , VVALUE2 , VVALUE3 , VVALUE4 , VVALUE5 , VVALUE6 , VVALUE7
		VERROR = 'OK'
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		VVALUE1 = ''
		VVALUE2 = ''
		VVALUE3 = ''
		VVALUE4 = ''
		VVALUE5 = ''
		VVALUE6 = ''
		VVALUE7 = ''
		ID_VALUE1 = ''
		ID_VALUE2 = ''
		ID_VALUE3 = ''
		ID_VALUE4 = ''
		ID_VALUE5 = ''
		ID_VALUE6 = ''
		ID_VALUE7 = ''
		ID_VALUE21 = ''
		ID_VALUE22 = ''
		ID_VALUE23 = ''
		ID_VALUE24 = ''
		ID_VALUE25 = ''
		ID_VALUE26 = ''
		ID_VALUE27 = ''
		GCSTRING = CHRTRANC(GCSTRING,':,;\/(){}[]<>-=_|~!@#$%^&*|?' + CHR(34),SPACE(29))
		GCSTRING = CHRTRANC(GCSTRING,'+',' ')
		GCSTRING = STRTRAN(GCSTRING,'      ',' ')
		GCSTRING = STRTRAN(GCSTRING,'     ',' ')
		GCSTRING = STRTRAN(GCSTRING,'    ',' ')
		GCSTRING = STRTRAN(GCSTRING,'   ',' ')
		GCSTRING = STRTRAN(GCSTRING,'  ',' ')
		IF OCCURS(' ',GCSTRING) = 0 .OR. EMPTY(GCSTRING)
			VVALUE1 = GCSTRING
			ID_VALUE1 = VVALUE1
			VERROR = 'OK'
			RETURN VERROR
		ENDIF
		IF OCCURS(' ',GCSTRING) > 0
			I = 1
			VLAST = 0
			VOC = OCCURS(' ',GCSTRING)
			FOR I = 0 TO VOC
				VVAR = 'Vvalue' + ALLTRIM(STR(I + 1))
				IF I = 0
					VSTAR = 1
					VLAST = AT(' ',GCSTRING)
				ELSE
					VSTAR = AT(' ',GCSTRING,I)
					VLAST = AT(' ',GCSTRING,I + 1)
				ENDIF
				IF I = VOC .OR. I >= 6
					&vvar.= alltrim(substr(gcstring,vstar,50))
					EXIT
				ENDIF
				&vvar.= alltrim(substr(gcstring,vstar, vlast-vstar+1))
			ENDFOR
		ENDIF
		ID_VALUE1 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,1)))
		ID_VALUE2 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,2)))
		ID_VALUE3 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,3)))
		ID_VALUE4 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,4)))
		ID_VALUE5 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,5)))
		ID_VALUE6 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,6)))
		ID_VALUE7 = ALLTRIM(SUBSTR(GCSTRING,1,AT(' ',GCSTRING,7)))
		ID_VALUE21 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,1),70))
		ID_VALUE22 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,2),70))
		ID_VALUE23 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,3),70))
		ID_VALUE24 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,4),70))
		ID_VALUE25 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,5),70))
		ID_VALUE26 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,6),70))
		ID_VALUE27 = ALLTRIM(SUBSTR(GCSTRING,AT(' ',GCSTRING,7),70))
		IF I + 1 >= 7
			ID_VALUE1 =  ;
				VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' +  ;
				ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6) + ' ' + ALLTRIM(VVALUE7)
			ID_VALUE2 =  ;
				VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' +  ;
				ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6)
			ID_VALUE3 =  ;
				VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' +  ;
				ALLTRIM(VVALUE5)
			ID_VALUE4 =  ;
				VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4)
			ID_VALUE5 = VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3)
			ID_VALUE6 = VVALUE1 + ' ' + VVALUE2
			ID_VALUE7 = VVALUE1
			ID_VALUE22 =  ;
				VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5) +  ;
				' ' + ALLTRIM(VVALUE6) + ' ' + ALLTRIM(VVALUE7)
			ID_VALUE23 =  ;
				ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5) + ' ' +  ;
				ALLTRIM(VVALUE6) + ' ' + ALLTRIM(VVALUE7)
			ID_VALUE24 =  ;
				ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6) + ' ' +  ;
				ALLTRIM(VVALUE7)
			ID_VALUE25 = ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6) + ' ' + ALLTRIM(VVALUE7)
			ID_VALUE26 = VVALUE2 + ' ' + ALLTRIM(VVALUE3)
			ID_VALUE27 = VVALUE2
			ID_VALUE3 = ID_VALUE22
			ID_VALUE4 = ID_VALUE26
			ID_VALUE5 = ID_VALUE27
		ENDIF
		IF I + 1 = 6
			ID_VALUE1 =  ;
				VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' +  ;
				ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6)
			ID_VALUE2 =  ;
				VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' +  ;
				ALLTRIM(VVALUE5)
			ID_VALUE3 =  ;
				VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4)
			ID_VALUE4 = VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3)
			ID_VALUE5 = VVALUE1 + ' ' + VVALUE2
			ID_VALUE6 = VVALUE1
			ID_VALUE22 =  ;
				VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5) +  ;
				' ' + ALLTRIM(VVALUE6)
			ID_VALUE23 =  ;
				ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5) + ' ' +  ;
				ALLTRIM(VVALUE6)
			ID_VALUE24 = ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6)
			ID_VALUE25 = ALLTRIM(VVALUE5) + ' ' + ALLTRIM(VVALUE6)
			ID_VALUE26 = VVALUE2 + ' ' + ALLTRIM(VVALUE3)
			ID_VALUE27 = VVALUE2
			ID_VALUE3 = ID_VALUE22
			ID_VALUE4 = ID_VALUE23
		ENDIF
		IF I + 1 = 5
			ID_VALUE1 =  ;
				VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' +  ;
				ALLTRIM(VVALUE5)
			ID_VALUE2 =  ;
				VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4)
			ID_VALUE3 = VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3)
			ID_VALUE4 = VVALUE1 + ' ' + VVALUE2
			ID_VALUE5 = VVALUE1
			ID_VALUE22 =  ;
				VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5)
			ID_VALUE23 = ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5)
			ID_VALUE24 = ALLTRIM(VVALUE4) + ' ' + ALLTRIM(VVALUE5)
			ID_VALUE25 = ALLTRIM(VVALUE5)
			ID_VALUE3 = ID_VALUE22
			ID_VALUE6 = ID_VALUE23
			ID_VALUE7 = ID_VALUE24
		ENDIF
		IF I + 1 = 4
			ID_VALUE1 =  ;
				VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4)
			ID_VALUE2 = VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3)
			ID_VALUE3 = VVALUE1 + ' ' + VVALUE2
			ID_VALUE4 = VVALUE1
			ID_VALUE22 = VVALUE2 + ' ' + ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4)
			ID_VALUE23 = ALLTRIM(VVALUE3) + ' ' + ALLTRIM(VVALUE4)
			ID_VALUE24 = ALLTRIM(VVALUE3)
			ID_VALUE5 = ID_VALUE22
			ID_VALUE6 = ID_VALUE23
			ID_VALUE7 = ID_VALUE24
		ENDIF
		IF I + 1 = 3
			ID_VALUE1 = VVALUE1 + ' ' + VVALUE2 + ' ' + ALLTRIM(VVALUE3)
			ID_VALUE2 = VVALUE1 + ' ' + VVALUE2
			ID_VALUE3 = VVALUE1
			ID_VALUE22 = VVALUE2 + ' ' + ALLTRIM(VVALUE3)
			ID_VALUE23 = ALLTRIM(VVALUE3)
			ID_VALUE4 = ID_VALUE22
			ID_VALUE5 = ID_VALUE23
		ENDIF
		IF I + 1 = 2
			ID_VALUE1 = VVALUE1 + ' ' + VVALUE2
			ID_VALUE2 = VVALUE1
			ID_VALUE22 = VVALUE2
			ID_VALUE3 = ID_VALUE22
		ENDIF
		IF UPPER(ID_VALUE7) == UPPER(ID_VALUE6) .OR. UPPER(ID_VALUE7) == UPPER(ID_VALUE5) .OR.  ;
				UPPER(ID_VALUE7) == UPPER(ID_VALUE4) .OR. UPPER(ID_VALUE7) == UPPER(ID_VALUE3) .OR.  ;
				UPPER(ID_VALUE7) == UPPER(ID_VALUE2) .OR.  ;
				UPPER(ID_VALUE7) == UPPER(ID_VALUE1)
			ID_VALUE7 = ''
		ENDIF
		IF UPPER(ID_VALUE6) == UPPER(ID_VALUE5) .OR. UPPER(ID_VALUE6) == UPPER(ID_VALUE4) .OR.  ;
				UPPER(ID_VALUE6) == UPPER(ID_VALUE3) .OR. UPPER(ID_VALUE6) == UPPER(ID_VALUE2) .OR.  ;
				UPPER(ID_VALUE6) == UPPER(ID_VALUE1)
			ID_VALUE6 = ''
		ENDIF
		IF UPPER(ID_VALUE5) == UPPER(ID_VALUE4) .OR. UPPER(ID_VALUE5) == UPPER(ID_VALUE3) .OR.  ;
				UPPER(ID_VALUE5) == UPPER(ID_VALUE2) .OR. UPPER(ID_VALUE5) == UPPER(ID_VALUE1)
			ID_VALUE5 = ''
		ENDIF
		IF UPPER(ID_VALUE4) == UPPER(ID_VALUE3) .OR. UPPER(ID_VALUE4) == UPPER(ID_VALUE2) .OR.  ;
				UPPER(ID_VALUE4) == UPPER(ID_VALUE1)
			ID_VALUE4 = ''
		ENDIF
		IF UPPER(ID_VALUE3) == UPPER(ID_VALUE2) .OR. UPPER(ID_VALUE3) == UPPER(ID_VALUE1)
			ID_VALUE3 = ''
		ENDIF
		IF UPPER(ID_VALUE2) == UPPER(ID_VALUE1)
			ID_VALUE2 = ''
		ENDIF
		VVALUE1 = ID_VALUE1
		VVALUE2 = ID_VALUE2
		VVALUE3 = ID_VALUE3
		VVALUE4 = ID_VALUE4
		VVALUE5 = ID_VALUE5
		VVALUE6 = ID_VALUE6
		VVALUE7 = ID_VALUE7
		RETURN VERROR
	ENDPROC
	*------

	PROCEDURE itSQLsepvalue2
		LPARAMETER GCSTRING , VVALUE1 , VVALUE2 , VVALUE3 , VVALUE4 , VVALUE5 , VVALUE6 , VVALUE7
		VERROR = 'OK'
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		VVALUE1 = ''
		VVALUE2 = ''
		VVALUE3 = ''
		VVALUE4 = ''
		VVALUE5 = ''
		VVALUE6 = ''
		VVALUE7 = ''
		ID_VALUE1 = ''
		ID_VALUE2 = ''
		ID_VALUE3 = ''
		ID_VALUE4 = ''
		ID_VALUE5 = ''
		ID_VALUE6 = ''
		ID_VALUE7 = ''
		GCSTRING = CHRTRANC(GCSTRING,':,;\/(){}[]<>-=_|~!@#$%^&*|?' + CHR(34),SPACE(29))
		GCSTRING = CHRTRANC(GCSTRING,'+',' ')
		GCSTRING = STRTRAN(GCSTRING,'      ',' ')
		GCSTRING = STRTRAN(GCSTRING,'     ',' ')
		GCSTRING = STRTRAN(GCSTRING,'    ',' ')
		GCSTRING = STRTRAN(GCSTRING,'   ',' ')
		GCSTRING = STRTRAN(GCSTRING,'  ',' ')
		IF OCCURS(' ',GCSTRING) = 0
			VVALUE1 = GCSTRING
			ID_VALUE1 = VVALUE1
			VERROR = 'OK'
			RETURN VERROR
		ENDIF
		IF OCCURS(' ',GCSTRING) > 0
			I = 1
			VLAST = 0
			VOC = OCCURS(' ',GCSTRING)
			FOR I = 0 TO VOC
				VVAR = 'Vvalue' + ALLTRIM(STR(I + 1))
				IF I = 0
					VSTAR = 1
					VLAST = AT(' ',GCSTRING)
				ELSE
					VSTAR = AT(' ',GCSTRING,I)
					VLAST = AT(' ',GCSTRING,I + 1)
				ENDIF
				IF I = VOC .OR. I >= 6
					&vvar.= alltrim(substr(gcstring,vstar,50))
					EXIT
				ENDIF
				&vvar.= alltrim(substr(gcstring,vstar, vlast-vstar+1))
			ENDFOR
		ENDIF
		IF  .NOT. EMPTY(VVALUE1)
			ID_VALUE1 = ALLTRIM(VVALUE1)
		ENDIF
		IF  .NOT. EMPTY(VVALUE2)
			ID_VALUE2 = ALLTRIM(VVALUE2)
		ENDIF
		IF  .NOT. EMPTY(VVALUE3)
			ID_VALUE3 = ALLTRIM(VVALUE3)
		ENDIF
		IF  .NOT. EMPTY(VVALUE4)
			ID_VALUE4 = ALLTRIM(VVALUE4)
		ENDIF
		IF  .NOT. EMPTY(VVALUE5)
			ID_VALUE5 = ALLTRIM(VVALUE5)
		ENDIF
		IF  .NOT. EMPTY(VVALUE6)
			ID_VALUE6 = ALLTRIM(VVALUE6)
		ENDIF
		IF  .NOT. EMPTY(VVALUE7)
			ID_VALUE7 = ALLTRIM(VVALUE7)
		ENDIF
		VVALUE1 = ID_VALUE1
		VVALUE2 = ID_VALUE2
		VVALUE3 = ID_VALUE3
		VVALUE4 = ID_VALUE4
		VVALUE5 = ID_VALUE5
		VVALUE6 = ID_VALUE6
		VVALUE7 = ID_VALUE7
		RETURN VERROR
	ENDPROC
	*------

	PROCEDURE ITSQLCOLOR
		LPARAMETER VCOLOR , PLMEMO , PLID_NAME
		LOCAL VPAUL , VCOUNTER , VPLREPL , VPLVAR , VPAULOK
		PLID_NAME = STRTRAN(PLID_NAME,'http://www.')
		PLID_NAME = STRTRAN(PLID_NAME,'www.')
		PLID_NAME = STRTRAN(PLID_NAME,'http://')
		PLID_NAME = STRTRAN(PLID_NAME,'HTTP://WWW.')
		PLID_NAME = STRTRAN(PLID_NAME,'WWW.')
		PLID_NAME = STRTRAN(PLID_NAME,'HTTP://')
		DIMENSION VVALUE( 7 )
		VVALUE = ''
		= ITSEPARATES(PLID_NAME)
		VREP1 = ALLTRIM(VVALUE(1))
		VREP2 = ALLTRIM(VVALUE(2))
		VREP3 = ALLTRIM(VVALUE(3))
		VREP4 = ALLTRIM(VVALUE(4))
		VREP5 = ALLTRIM(VVALUE(5))
		VREP6 = ALLTRIM(VVALUE(6))
		VREP7 = ALLTRIM(VVALUE(7))
		RELEASE VVALUE
		IF EMPTY(ALLTRIM(PLMEMO))
			RETURN ''
		ENDIF
		VERROR = 'OK'
		ON ERROR VERROR='FAIL: Error number: ' + LTRIM(STR(ERROR( )))+ ' Error message: ' + MESSAGE( )+ ' Line of code with error: ' +  MESSAGE(1) + ' Line number of error: ' + LTRIM(STR(LINENO( )))+ ' Program with error: ' + PROGRAM( )
		IF EMPTY(VCOLOR)
			VCOLOR = '#FF0000'
		ENDIF
		VBEGIN = "<font color='" + VCOLOR + "'>"
		VEND = '</font>'
		VLENG = LEN(PLMEMO)
		VPAUL = ''
		FOR VCOUNT = 0 TO VLENG
			VCOMPARISON = RIGHT(PLMEMO,VLENG - VCOUNT)
			VCHAR = SUBSTR(PLMEMO,VCOUNT,1)
			VOK = .F.
			IF  .NOT. VOK AND  .NOT. EMPTY(VREP1) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP1))
				VPAUL = VPAUL + VCHAR
				VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP1))) + VEND
				VCOUNT = VCOUNT + LEN(ALLTRIM(VREP1))
				VOK = .T.
			ENDIF
			IF  .NOT. VOK AND  .NOT. EMPTY(VREP2) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP2))
				VPAUL = VPAUL + VCHAR
				VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP2))) + VEND
				VCOUNT = VCOUNT + LEN(ALLTRIM(VREP2))
				VOK = .T.
			ENDIF
			IF  .NOT. VOK AND  .NOT. EMPTY(VREP3) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP3))
				VPAUL = VPAUL + VCHAR
				VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP3))) + VEND
				VCOUNT = VCOUNT + LEN(ALLTRIM(VREP3))
				VOK = .T.
			ENDIF
			IF  .NOT. VOK AND  .NOT. EMPTY(VREP4) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP4))
				VPAUL = VPAUL + VCHAR
				VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP4))) + VEND
				VCOUNT = VCOUNT + LEN(ALLTRIM(VREP4))
				VOK = .T.
			ENDIF
			IF  .NOT. VOK AND  .NOT. EMPTY(VREP5) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP5))
				VPAUL = VPAUL + VCHAR
				VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP5))) + VEND
				VCOUNT = VCOUNT + LEN(ALLTRIM(VREP5))
				VOK = .T.
			ENDIF
			IF  .NOT. VOK AND  .NOT. EMPTY(VREP6) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP6))
				VPAUL = VPAUL + VCHAR
				VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP6))) + VEND
				VCOUNT = VCOUNT + LEN(ALLTRIM(VREP6))
				VOK = .T.
			ENDIF
			IF  .NOT. VOK AND  .NOT. EMPTY(VREP7) AND UPPER(VCOMPARISON) = UPPER(ALLTRIM(VREP7))
				VPAUL = VPAUL + VCHAR
				VPAUL = VPAUL + VBEGIN + SUBSTR(VCOMPARISON,1,LEN(ALLTRIM(VREP7))) + VEND
				VCOUNT = VCOUNT + LEN(ALLTRIM(VREP7))
				VOK = .T.
			ENDIF
			IF  .NOT. VOK
				VPAUL = VPAUL + VCHAR
			ENDIF
		ENDFOR
		RETURN VPAUL
	ENDPROC
	*------

	PROCEDURE itsqlenc
		LPARAMETER LPASS
		LPASS = ALLTRIM(LPASS)
		IF EMPTY(LPASS)
			RETURN ''
		ENDIF
		IF SUBSTR(LPASS,1,2) = '^^'
			RETURN LPASS
		ENDIF
		LPPRIVATEKEY =  ;
			'143212131221143212131221143212131221143212131221143212131221143212131221143212131221143212131221143212131221'
		LPASS = ALLTRIM(LPASS)
		LOCAL LPASSLEN , LRESULT , LNUM , LTMP
		LPASSLEN = LEN(LPASS)
		LRESULT = ''
		FOR LNUM = 1 TO LPASSLEN
			LTMP = ASC(SUBSTR(LPASS,LNUM,1))
			LRESULT = LRESULT + CHR(LTMP + VAL(SUBSTR(LPPRIVATEKEY,LNUM,1)))
		ENDFOR
		LRESULT = '^^' + LRESULT
		RETURN LRESULT
	ENDPROC
	*------

	PROCEDURE itsqlunenc
		LPARAMETER LPASS
		LPASS = ALLTRIM(LPASS)
		IF EMPTY(LPASS)
			RETURN ''
		ENDIF
		IF SUBSTR(LPASS,1,2) <> '^^'
			RETURN LPASS
		ENDIF
		IF SUBSTR(LPASS,1,2) = '^^'
			LPASS = SUBSTR(LPASS,3,200)
		ENDIF
		LPPRIVATEKEY =  ;
			'143212131221143212131221143212131221143212131221143212131221143212131221143212131221143212131221143212131221'
		LOCAL LPASSLEN , LNUM , LRESULT , LTMP
		LRESULT = ''
		LPASSLEN = LEN(LPASS)
		FOR LNUM = 1 TO LPASSLEN
			LTMP = ASC(SUBSTR(LPASS,LNUM,1))
			LRESULT = LRESULT + CHR(LTMP - VAL(SUBSTR(LPPRIVATEKEY,LNUM,1)))
		ENDFOR
		RETURN LRESULT
	ENDPROC
	*------

	PROCEDURE ITSQLPASSWORD
		LPARAMETER PLNO
		IF PLNO < 1 .OR. PLNO > 18
			RETURN
		ENDIF
		SET DECIMALS TO 6
		LOCAL PLCOUNTER , PLPASSWORD
		PLPASSWORD = ''
		PLCOUNTER = 1
		DO WHILE PLCOUNTER <= PLNO
			VRAND = RAND() * SECONDS()
			VRAND = INT((VRAND - INT(VRAND)) * 26 + 0.3)
			PLPASSWORD = PLPASSWORD + CHR(65 + VRAND)
			PLCOUNTER = PLCOUNTER + 1
		ENDDO
		RETURN UPPER(ALLTRIM(PLPASSWORD))
	ENDPROC
	*------
ENDDEFINE
*------
DEFINE CLASS GENREPORTS AS Custom OLEPUBLIC

	PROCEDURE PRINTREPORT
		LPARAMETER VORDER_ID
		???MEM[57] = HOME() + 'ReportOutput.app'
		SET SAFETY OFF
		SET TALK OFF
		ON ERROR _isError=.T.
		IF  .NOT. USED('orddtl')
			USE IN 0 SHARED C:\test\orddtl
		ENDIF
		SELECT ORDDTL
		REPORT FORM C:\inetpub\wwwroot\Foxisapi\VTest\ORDFORM ASCII TO File  ;
			C:\inetpub\wwwroot\Foxisapi\VTest\ORDFORM.TXT FOR ORDER_ID = VORDER_ID
		RETURN 'REPORT COMPLETED'
	ENDPROC
	*------
ENDDEFINE
*------*
